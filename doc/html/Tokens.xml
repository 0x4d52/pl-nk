<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>deprecated</Name>
      <APILanguage>unknown</APILanguage>
    </TokenIdentifier>
    <Path>deprecated.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_classes.html</Path>
    <Abstract>Crossplatform atomic operation classes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicMemoryBarrier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_classes.html</Path>
    <Anchor>ga1d408b07d8283ec736827ab55b0c5a28</Anchor>
    <Abstract>A crossplatform read/write memory barrier. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicIClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Abstract>Atomic integer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicIRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga183ad90f901951728767c264232e8769</Anchor>
    <Abstract>An opaque reference to the Plank AtomicI object (atomic 32-bit integer). </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga084a140343047197fd8519bbb78af951</Anchor>
    <Abstract>Creates and initialises a Plank AtomicI object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga9772f673c27a18835f4a9f4a6137ce10</Anchor>
    <Abstract>Create a Plank AtomicI object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga6e154f1c86efdaaf77a8287f31121d5a</Anchor>
    <Abstract>Initialise a Plank AtomicI object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gabb677f03de31f3a45e14318ba993bd41</Anchor>
    <Abstract>Deinitialise a Plank AtomicI object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga346d43867e1875c609c31eb8b8776e54</Anchor>
    <Abstract>Destroy a Plank AtomicI object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga2c42024a78b9aa3b72ae972e35ee97a1</Anchor>
    <Abstract>Get the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga5c45ee9a46a9aff5c99e275b1024e100</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga5f655ad301d5411b649dee356ecb3509</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gaa590426da43199c5ec0cc9f591f3ea49</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga05f7d84887eb5303d3b99f13f37865e2</Anchor>
    <Abstract>Swap the current value with a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga942e0a28b933585446ba7502810ed051</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga6bb09bc96a296c65f7cf14bf8e866eb5</Anchor>
    <Abstract>Set the current value to a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gaf65dbf801fb2db041522c7f7c016666b</Anchor>
    <Abstract>Add a value to the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gaca34eea11afeb3a7d4bd93703150045c</Anchor>
    <Abstract>Subtract a value from the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gadfc2f7f017bd771544523669e5d1fe93</Anchor>
    <Abstract>Increment the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga4d6336d36324351a2754b7399570d80c</Anchor>
    <Abstract>Decrement the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gac4d323d789cf87e182bbb698a31af3cb</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Abstract>Atomic long. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga1e845a046ff737f9dfe05a151177817c</Anchor>
    <Abstract>An opaque reference to the Plank AtomicL object (atomic long integer). </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga9ab653eed56a9348e163e2cb9aeb1956</Anchor>
    <Abstract>Creates and initialises a Plank AtomicL object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gab81e467bc4edf35e4e73958f7c0ae939</Anchor>
    <Abstract>Create a Plank AtomicL object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga9db45f6beea0bf553927b31ded580300</Anchor>
    <Abstract>Initialise a Plank AtomicL object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga9be62f247bfe3cadd2b5b9872550e826</Anchor>
    <Abstract>Deinitialise a Plank AtomicL object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gac69db6121b2e9f78079d8d317dbf9923</Anchor>
    <Abstract>Destroy a Plank AtomicL object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga65d89347daa3d09b596b832ba8f22686</Anchor>
    <Abstract>Get the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga983cb185dfec2d2c3007cf2ab64b3d96</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga04206b79f7d77ed5101e0c32948bae29</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gaa64abd293602ce72352a2122929a8896</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga5d7e1c25233e5ab3a30b326f83bab7ca</Anchor>
    <Abstract>Swap the current value with a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga39788b8a42bff1c04b141aa5cf5b54c5</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gac225d372bc45668ad6dcf828692b8863</Anchor>
    <Abstract>Set the current value to a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gae3c1bab1c638a3fdac9cef65ef596a26</Anchor>
    <Abstract>Add a value to the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga03ad623f9ddc6c911993edcc1bc2f9dc</Anchor>
    <Abstract>Subtract a value from the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga804bb1772207f222064cf22151074d66</Anchor>
    <Abstract>Increment the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga838d7c26adffb74ff8b6e172f6339b72</Anchor>
    <Abstract>Decrement the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga44a1ea800743af176cf5bf99cdd51e3e</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLLClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Abstract>Atomic long long. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLLRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga4c5b247135d72b51b9a41f2fdc41b470</Anchor>
    <Abstract>An opaque reference to the Plank AtomicLL object (atomic 64-bit integer). </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga8b49550306f7def01816d0f232937ce8</Anchor>
    <Abstract>Creates and initialises a Plank AtomicLL object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga168c9b8204e1ce8d0082f9373a0a68de</Anchor>
    <Abstract>Create a Plank AtomicLL object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga63c22ee75542d22de18c3ee8ea0d4f84</Anchor>
    <Abstract>Initialise a Plank AtomicLL object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga9cb0b8a45eef171e323cf574bf8bc845</Anchor>
    <Abstract>Deinitialise a Plank AtomicLL object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga35b05875e1e65bde4c1eada03e4fb6a1</Anchor>
    <Abstract>Destroy a Plank AtomicLL object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga493b452b5bd534d03a966ca6cf708cc2</Anchor>
    <Abstract>Get the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga21c5c939f54109d335bb9aea28f61ecd</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga189704ff261ff690596e29490e257b0a</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga617eb7d7112df3f7c9775e19c83c11f9</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>gac5ded8be43a35d8d4a1dcdce757dbe29</Anchor>
    <Abstract>Swap the current value with a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga3d9e54b1cf56edf3eb9240d5fa57cbd9</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>gad242081b1122017a8e1084b8c305dc4b</Anchor>
    <Abstract>Set the current value to a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga0b157acea69db19c8721116f174ea5d9</Anchor>
    <Abstract>Add a value to the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga00d526fd6f00f53813aa9801a5ca1571</Anchor>
    <Abstract>Subtract a value from the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga4e4f3455a71e33fc644ba3ec53928818</Anchor>
    <Abstract>Increment the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>gad3271497b9187e45e4c3e6ad6d049fb1</Anchor>
    <Abstract>Decrement the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga1f48b66801f8caefce3dfa09056a8246</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Abstract>Atomic float. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga780002eda1e06c2ee5450fbaadfbe3a0</Anchor>
    <Abstract>An opaque reference to the Plank AtomicF object (atomic float). </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga44f26d7ec072baba8ad73503cc6f005f</Anchor>
    <Abstract>Creates and initialises a Plank AtomicF object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga00788db9d1e495cb26cf051fff3a95c6</Anchor>
    <Abstract>Create a Plank AtomicF object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga0d9679055aa7eb8a697db772832e362a</Anchor>
    <Abstract>Initialise a Plank AtomicF object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga71aca8d89457e7f3ce1e60713bfbbff9</Anchor>
    <Abstract>Deinitialise a Plank AtomicF object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gae5c92f1c67bc1f91b04dfc9ba5ae12b4</Anchor>
    <Abstract>Destroy a Plank AtomicF object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gae69e65313f4561b281b0b49a9d81b703</Anchor>
    <Abstract>Get the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga9cc956a0f0f415b9139fd26fcd765727</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gae1549c0bd40dbd33c02eb58920dbf44d</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga9cbfa8d926cbe08ebfe246c3dffa46f1</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga2b76a3dfa8078000fed1b1253502623a</Anchor>
    <Abstract>Swap the current value with a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gaf056e2d6a85119ac9afe494b1a1eefbc</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gad6e043e6608f376d8ddc37ef53c2537a</Anchor>
    <Abstract>Set the current value to a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga1da8d69174b16754afb44635acf6e22b</Anchor>
    <Abstract>Add a value to the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gac894318131c29763f938e54f46acf681</Anchor>
    <Abstract>Subtract a value from the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gad2cd043f5b0dcf4c5f995b739514ea8c</Anchor>
    <Abstract>Increment the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga3fd0ab88e232fbf160162d7bd27bb2bb</Anchor>
    <Abstract>Decrement the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga042b241707e814b5df4c2e5fceeae814</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicDClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Abstract>Atomic double. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicDRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gabe60fb3376736ef01c4806acb7625538</Anchor>
    <Abstract>An opaque reference to the Plank AtomicD object (atomic double). </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga78ff9999cd68e3ba77a4ad5f63ebdf8a</Anchor>
    <Abstract>Creates and initialises a Plank AtomicD object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga05893946955095aad8f0ef6f3e66a687</Anchor>
    <Abstract>Create a Plank AtomicF object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga9752b2b8f5611240cb89e2175ab033bc</Anchor>
    <Abstract>Initialise a Plank AtomicD object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gaff18b997fc53d47280a9282692150622</Anchor>
    <Abstract>Deinitialise a Plank AtomicD object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga662d4e0f3429b559542e1e1c22e5d5cc</Anchor>
    <Abstract>Destroy a Plank AtomicD object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gaa5b42c20d0ee79dcc7531983b170f273</Anchor>
    <Abstract>Get the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga575b80f9858ebe0e3ae657a9bcfc457a</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga9aa42118322617be68b12220e8ea161e</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga7fb457d231451ad47fcb8991a1677d1f</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga66f8779266de552bfb1c3ff1fccc1864</Anchor>
    <Abstract>Swap the current value with a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga0489b7f3a14cbc830ded341fccdd06b1</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga3dad9256d5fb27f15148ca77bfe8fce0</Anchor>
    <Abstract>Set the current value to a new value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga1088772204b229c2f7aa0c9788e19090</Anchor>
    <Abstract>Add a value to the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga09bccdd8548e51735eb4cd8134563a8d</Anchor>
    <Abstract>Subtract a value from the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga57a14b4c79fd3fc522cc972e319a713d</Anchor>
    <Abstract>Increment the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gacb13145f02f52ba7168bae6868a4c823</Anchor>
    <Abstract>Decrement the current value by 1. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga415d4543a2b14bec247b12e175340070</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Abstract>Atomic pointer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gac6ebd37367523407839a0f9a4fc5d9ea</Anchor>
    <Abstract>An opaque reference to the Plank AtomicP object (atomic pointer). </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga91086b7040d5c5d0594cceb1d8c27550</Anchor>
    <Abstract>Creates and initialises a Plank AtomicP object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga6d7802aad6952b25b20709f0257e8165</Anchor>
    <Abstract>Create a Plank AtomicD object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gac263304c4e2e10a3a689c0e697337f81</Anchor>
    <Abstract>Initialise a Plank AtomicP object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gac87ba35196e6c7f74dc192103fa07d0d</Anchor>
    <Abstract>Deinitialise a Plank AtomicP object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga48a4a79f0f042e2971afe827db1e5efd</Anchor>
    <Abstract>Destroy a Plank AtomicP object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga68f8298157fccc5a71a0785e37465a03</Anchor>
    <Abstract>Get the current value. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga2e426d5cc548af7df01d1455c0709068</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga099f222754557748fe9db77db8428cfe</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gac1db0b657d75a4100cac3f3b8e454685</Anchor>
    <Abstract>Not used for this class. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gaf34822f085b42e6cf2c8a8bf2a33621c</Anchor>
    <Abstract>Swap the current pointer with a new pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga98e1591583586b6a0230381f68a860ae</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga956fba70602f11fa64747eeab5158bec</Anchor>
    <Abstract>Set the current pointer to a new pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga306a94df2dd34d91234ab9b73bffda4d</Anchor>
    <Abstract>Offset current pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga6c4c61a1de6e2f7999c6ff6912dbe4d7</Anchor>
    <Abstract>Offset current pointer in a negative direct. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gaf79c17977d7445ff5fbf6ba58a34748f</Anchor>
    <Abstract>Increment the current pointer by 1 byte. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga20daf4da5c87a2d8e48405cc8c091dae</Anchor>
    <Abstract>Decrement the current pointer by 1 byte. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga7bbfec08311361e425765d80d8ee4287</Anchor>
    <Abstract>Swap the current pointer with a new pointer if a specified old pointer is still current. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPXClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Abstract>Extended atomic pointer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPXRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga71e2a3899219aaf2d3b0b881a2613776</Anchor>
    <Abstract>An opaque reference to the Plank AtomicPX object (atomic pointer with an extended tag of data)...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga0e5a5c826870a0873b7f3df9a6c4e36d</Anchor>
    <Abstract>Creates and initialises a Plank AtomicPX object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga5a42522025f98175817ed47ce46117ed</Anchor>
    <Abstract>Create a Plank AtomicPX object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaa6f2b2252a2e09f2c70ee6127d207f81</Anchor>
    <Abstract>Initialise a Plank AtomicPX object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga7fb63860f41079032acd2d7cc55a8c3d</Anchor>
    <Abstract>Deinitialise a Plank AtomicPX object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gae12e8b323fd1c1c53186c1fe7e888764</Anchor>
    <Abstract>Destroy a Plank AtomicPX object. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga38fdb0e5886f12bc6b0af2dc63ea97a3</Anchor>
    <Abstract>Get the current pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga78bb8eeae596eed8f9dffec9c9a29f06</Anchor>
    <Abstract>Get the current value nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga8ef1d996c5a82187ca083cf0a622f1fa</Anchor>
    <Abstract>Get the current value of the extra &quot;tag&quot;. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaa0f8af6f1ae892f3d63a126925ce8d9f</Anchor>
    <Abstract>Get the current value of the extra &quot;tag&quot; nonatomically. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_SwapAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga35c257d70c858f6502a431b120724d11</Anchor>
    <Abstract>Swap the current pointer with a new pointer and change the tag. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga3ba45d76543bfd43f75a2b3e38b4d505</Anchor>
    <Abstract>Swap the current pointer with a new pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga404ac946ec4ef0808e946c59de8fd474</Anchor>
    <Abstract>Swap over two values. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_SetAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga08aac7c5aa9335840e6333bdc5afaec1</Anchor>
    <Abstract>Set the current pointer to a new pointer and change the tag. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga5222fb0c24d3c106b08a027a28c09d81</Anchor>
    <Abstract>Set the current pointer to a new pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaa38739ce1ac0e46d846b62f049647681</Anchor>
    <Abstract>Offset current pointer. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga99ec5244496ea32891ea98ab6ca1f34b</Anchor>
    <Abstract>Offset current pointer in a negative direct. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaafcb2adb46addf8492d17df015e28a42</Anchor>
    <Abstract>Increment the current pointer by 1 byte. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gafc026e3552e6a705f9eceb8612c38d10</Anchor>
    <Abstract>Decrement the current pointer by 1 byte. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga99de3470a8390069e982fb5f1cadbcf7</Anchor>
    <Abstract>Swap the current values with new values if specified old values are still current. </Abstract>
    <DeclaredIn>plank_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankBitwiseFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_bitwise_functions.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankEndianFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga87019398db395f39a6ccef9b866197d7</Anchor>
    <Abstract>Swap the byte order of the unisgned short pointed to by bits. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga9b397217327c041070e6396944f60f24</Anchor>
    <Abstract>Swap the byte order of the 24-bit int pointed to by bits. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gad51cb40c377433419308acdafe23eb84</Anchor>
    <Abstract>Swap the byte order of the unisgned int pointed to by bits. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gadc6a767c2f992c3ae969bc24e0ffa22c</Anchor>
    <Abstract>Swap the byte order of the unisgned long long pointed to by bits. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga23a8e48a017cb465d4d2a57c5d970b91</Anchor>
    <Abstract>Swap the byte order of the unisgned long pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga7ab06952307c2746554be77f0aebf6c8</Anchor>
    <Abstract>Swap the byte order of the short pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga8d80a404143cac6f856accd1261972e7</Anchor>
    <Abstract>Swap the byte order of the int pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gae2df7fe1e0f41d78629a3ece9ac2b1c5</Anchor>
    <Abstract>Swap the byte order of the 24-bit int pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga295859ac253139042bb2b66c127fcc86</Anchor>
    <Abstract>Swap the byte order of the long pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga021701941740a134240a3b8ebe1c6070</Anchor>
    <Abstract>Swap the byte order of the long long pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga6078c0cb1781d05a5c76ef69bb15d496</Anchor>
    <Abstract>Swap the byte order of the float pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga2a2313047af494137ea4ccd90c5a0258</Anchor>
    <Abstract>Swap the byte order of the double pointed to by data. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga1e9e59103111dc314620dfd506696bd3</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned short elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga61c0f01020179ba2413c99e905850bce</Anchor>
    <Abstract>Swap the endianness of a vector of short elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga50d035fc1066811d70c983b0d953295e</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned 24-bit int elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga1eb4b31032ef752426b2304ff495e350</Anchor>
    <Abstract>Swap the endianness of a vector of 24-bit int elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gac9130d4eebf080770a788e6f8bdde3e2</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned int elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga62348e12036804dc74d94d2f0db55d1b</Anchor>
    <Abstract>Swap the endianness of a vector of int elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga098497ab8cfb48eb660358b20cff36a2</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned long elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga8a964083bbe892e6a83b68919f1a5b71</Anchor>
    <Abstract>Swap the endianness of a vector of long elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga12987a43c8ed4e5a4762fa0ac7d44df2</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned long long (64-bit) elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga40a076a8d4b0f913b64b879816070649</Anchor>
    <Abstract>Swap the endianness of a vector of long long (64-bit) elements. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankGUID</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_g_u_i_d.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankDynamicArrayClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Abstract>A dynamic array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankDynamicArrayRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga7ed3f04247baaec4f09394dee060950d</Anchor>
    <Abstract>An opaque reference to the Plank DynamicArray object. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankDynamicArrayCompareFunction</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga9daca2b7508e4547f26ab05fa1322aa9</Anchor>
    <Abstract>Compare function. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gacd75d8697297ad44f47d69594f6976dd</Anchor>
    <Abstract>Creates and intialises a Plank DynamicArray object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gabc45b142d8e106c0a4727df63b291c14</Anchor>
    <Abstract>Create a Plank DynamicArray object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga3207fd62b42b6ee9ebb0f50daf3d7ecb</Anchor>
    <Abstract>Initialise the array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_InitWithItemSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gacab7680417ce92f64a02c0293b184345</Anchor>
    <Abstract>Initialise the array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_InitWithItemSizeAndCapacity</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga78480d26cd03a22d4c9c55295705fc46</Anchor>
    <Abstract>Initialise the array with specified capacity. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga6bee60c8f55eb626e187331fbec4aa2a</Anchor>
    <Abstract>Denitialise the array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga63ed4ec36b9f70f4ae773f561ce9a6a7</Anchor>
    <Abstract>Destroy a Plank DynamicArray object. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_IsIndexInRange</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga0ac3ea147371d9f24c45d798383c7a72</Anchor>
    <Abstract>Determines if an index is in range for this array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gafd5c751e1deff283b1a1d3b9deb7c079</Anchor>
    <Abstract>Get the number of items stored in the array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetItemSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga2ad1ad51985b6c22b4bfafc52629c7f6</Anchor>
    <Abstract>Get the size of a single item stored in the array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetArray</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gaa9fa4d38189371ddd9d7952a2c331535</Anchor>
    <Abstract>Get the raw array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_AddItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gaa561452eee42c9d3516bd5f7f30e3099</Anchor>
    <Abstract>Add an item to the array. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_SetItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gae8d22a2c6d1fbac22678651177c5130b</Anchor>
    <Abstract>Copies an item to the specified index. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_InsertItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga814b47d52dcad65d9281e0a2dc859634</Anchor>
    <Abstract>Inserts an item into the specified index. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga64a79e5dd0613914b0f26179927fd3d2</Anchor>
    <Abstract>Retrieves an item at the specified index. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_RemoveItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga5b8d82f0053a66f44af8980b87c308df</Anchor>
    <Abstract>Removes an item from the specified index. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_EnsureSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga5307c7c1534d366764e3d50da2ca8df3</Anchor>
    <Abstract>Ensures that the array is sufficient to hold a certain number of items. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Grow</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga877d22e866939a3311db08fa78799ccf</Anchor>
    <Abstract>Inreases the array&amp;#39;s capcity by a spefcified number of items. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Purge</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga638b78468ffe31abf386279973441359</Anchor>
    <Abstract>Reduces the amount of memory the array uses to the minimum. </Abstract>
    <DeclaredIn>plank_DynamicArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeDynamicArrayClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_dynamic_array_class.html</Path>
    <Abstract>A lock-free dynamic array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeLinkedListElementClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_linked_list_element_class.html</Path>
    <Abstract>A lock-free linked list element. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeQueueClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_queue_class.html</Path>
    <Abstract>A lock-free queue (FIFO). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LockFreeQueue_GetSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_free_queue_class.html</Path>
    <Anchor>gafb22446a30c9dee41214207fe01130a8</Anchor>
    <Abstract>NB the result of this could be invalid by the time it is returned in a multithreaded context...</Abstract>
    <DeclaredIn>plank_LockFreeQueue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeStackClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_stack_class.html</Path>
    <Abstract>A lock-free stack (LIFO). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSharedPtrClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_shared_ptr_class.html</Path>
    <Abstract>A shared pointer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleLinkedListClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_linked_list_class.html</Path>
    <Abstract>A simple linked list. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleLinkedListElementClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_linked_list_element_class.html</Path>
    <Abstract>A simple linked list. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleMapClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Abstract>A simple map. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_ContainsKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>ga05d3f3511cd9f0b1b39343d041de0f2e</Anchor>
    <Abstract>Determines whether the map already contains a specified key. </Abstract>
    <DeclaredIn>plank_SimpleMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_SetKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>ga7124e2fb29ffbf06a24fb1618656de4b</Anchor>
    <Abstract>Sets a key to associate with a pointer. </Abstract>
    <DeclaredIn>plank_SimpleMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_GetKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>gaac6799dc7f0a0ad3a1df94a97a4c2ee0</Anchor>
    <Abstract>Get a pointer associated with the specified key. </Abstract>
    <DeclaredIn>plank_SimpleMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_RemoveKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>ga2896af146e37c5235b4cf682eec0dde6</Anchor>
    <Abstract>Get a pointer associated with the specified key and remove it from the map. </Abstract>
    <DeclaredIn>plank_SimpleMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleStackClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_stack_class.html</Path>
    <Abstract>A simple stack. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadLocalStorageClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_thread_local_storage_class.html</Path>
    <Abstract>Manages data that should be thread-local. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Abstract>A crossplatform synchronisation utiltiy. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gac6f2239e7a2c081b75b56b203e4523ba</Anchor>
    <Abstract>An opaque reference to the Plank Lock object. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaa0b9a96a7e182cde6a10d6d5eb79258a</Anchor>
    <Abstract>Create and intitialise a Plank Lock object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga6216a61e4dd15f7760aff6d8d613385a</Anchor>
    <Abstract>Create a Plank Lock object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaaf69da53793e9f3030aa8e056b0680f0</Anchor>
    <Abstract>Initialise a Plank Lock object. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaed411625db60fe72726527819997abf9</Anchor>
    <Abstract>Deinitialise a Plank Lock object. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga1bd59e4b2602f1e9d23e46007a29c121</Anchor>
    <Abstract>Destroy a Plank Lock object. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Lock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaec25a57c9cb58b31ab9486bc0aeb2392</Anchor>
    <Abstract>Obtain the lock. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Unlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga8faa8bcbafc49baf83b9a07c0eaa893d</Anchor>
    <Abstract>Release the lock. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_TryLock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga3ee574b6a39516bd5e0ea11c2645b58b</Anchor>
    <Abstract>Tries to obtain the lock but doesn&amp;#39;t block if this fails. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gac1baaa40c6b23a73b6194e13600f2e31</Anchor>
    <Abstract>Wait on the lock. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Signal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gad8176b9ce343ca5c6199d534ab4fd3e9</Anchor>
    <Abstract>Signal the lock. </Abstract>
    <DeclaredIn>plank_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSpinLockClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Abstract>A crossplatform synchronisation utiltiy. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSpinLockRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gaa6c4453d8ba74413dddfa2f8b9119e55</Anchor>
    <Abstract>An opaque reference to the Plank SpinLock object. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gacd819cf09a959a071622fe65f22b3362</Anchor>
    <Abstract>Create and intitialise a Plank SpinLock object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gafeafac9c112c5549f3fab5b59374499e</Anchor>
    <Abstract>Create a Plank SpinLock object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga5d75e9b1fa9f36488d9663dbd5875a8c</Anchor>
    <Abstract>Initialise a Plank SpinLock object. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gacb0f294146e4af176be3d61df4d09ea6</Anchor>
    <Abstract>Deinitialise a Plank SpinLock object. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gaed4193c0bef50b032d8b5d58b8956643</Anchor>
    <Abstract>Destroy a Plank SpinLock object. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Lock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga2e8c23c616b7b3575ce29946be6e9c0c</Anchor>
    <Abstract>Obtain the lock. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Unlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga543a3b2530ad3e062abfd4d94426c92d</Anchor>
    <Abstract>Release the lock. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_TryLock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga1a7bd0fdfafe2c5bf8edc5b00446e342</Anchor>
    <Abstract>Tries to obtain the lock but doesn&amp;#39;t block if this fails. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga56a542840b0193d83226dea9df76b062</Anchor>
    <Abstract>Wait on the lock. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Signal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gaf39b6a9530a70a8ecf846bfd4605cf15</Anchor>
    <Abstract>Signal the lock. </Abstract>
    <DeclaredIn>plank_SpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Abstract>A crossplatform thread implementation. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gae37e4606c7f40ef7b6f2363fc3def081</Anchor>
    <Abstract>An opaque reference to the Plank Thread object. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadID</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga8e4ce91496e1d22a26bac03aba31d9f3</Anchor>
    <Abstract>Thread ID. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadFunction</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga58d792a03a6de79e75bee9fea1de4f99</Anchor>
    <Abstract>The Thread run function. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSleep</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gae36320b30104e9ff93c9fd762e0add53</Anchor>
    <Abstract>Sleeps the calling thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadYield</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga7f201cf30774cf30ff06f006ad661d89</Anchor>
    <Abstract>Yield the calling thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadCurrentID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga961e5eee58364f31cfc4d28e97bdf249</Anchor>
    <Abstract>Get the thread ID of the calling thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga5d8b8d89d5e9d33d7ff2b76b89c9ba21</Anchor>
    <Abstract>Create and initialise a Plank Thread object and return an oqaque reference to it. ...</Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga24e217e0d1892f3cb4afdc4496ca1c09</Anchor>
    <Abstract>Create a Plank Thread object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga17502d8ff1c19cb2bd5d0e97155d5789</Anchor>
    <Abstract>Initialise a Plank Thread object. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga6035c458003182397300f5b7e4085b60</Anchor>
    <Abstract>Deinitialise a Plank Thread object. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga328bb5e57b769e08b1c43941a60a703c</Anchor>
    <Abstract>Destroy a Plank Thread object. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_GetID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gab489859d981e8b61dc68e203abcc2960</Anchor>
    <Abstract>Get the thread ID. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetName</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga9d6e3dbef83ad7369bed1ee956266070</Anchor>
    <Abstract>Set the name of the thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetFunction</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gad1a2f4dda5278e78ce0147862450268b</Anchor>
    <Abstract>Set the thread run function. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetUserData</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga1ba619bc81148a7ab5369bc1d4bcccb6</Anchor>
    <Abstract>Set a user data pointer. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_GetUserData</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga1fb96725fd5710ec31e8308982ef3a6f</Anchor>
    <Abstract>Get the user data pointer. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Start</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gaac35ad7b87f142c831f2fcd2842e927e</Anchor>
    <Abstract>Starts the Thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Cancel</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga4f30fcaae6853be24435b60e68f9fbcd</Anchor>
    <Abstract>Cancels the Thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gabce141a91ce41ceec730e292ec8b9c41</Anchor>
    <Abstract>Wait for the Thread. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_IsRunning</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga95318580d7b5e9d34b32d7b3adf811ce</Anchor>
    <Abstract>Determines if the Thread is still running. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetShouldExit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga11a80eb0b114468aa1b672c5a9f98d04</Anchor>
    <Abstract>Signals that the Thread should exit. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_GetShouldExit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gac68217524df0345ebb0f5e20c40e93e5</Anchor>
    <Abstract>Checks if the Thread has been asked to exit. </Abstract>
    <DeclaredIn>plank_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadSpinLockClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Abstract>A crossplatform synchronisation utiltiy. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadSpinLockRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga05d6a88d55bf6521caa21c6f98638a85</Anchor>
    <Abstract>An opaque reference to the Plank ThreadSpinLock object. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gac7b1000f8262394a28b3777d8c7bdf94</Anchor>
    <Abstract>Create and intitialise a Plank ThreadSpinLock object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaca89e8c4781c5e06316f42e7099ff260</Anchor>
    <Abstract>Create a Plank ThreadSpinLock object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaa9ec2f1ebabbfbbba0e543e996339c9e</Anchor>
    <Abstract>Initialise a Plank ThreadSpinLock object. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga4c4577b993ca331eb1a650ad9bb5f92d</Anchor>
    <Abstract>Deinitialise a Plank ThreadSpinLock object. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gacd5f5428a6e03f3b94b1dbdd3f541613</Anchor>
    <Abstract>Destroy a Plank ThreadSpinLock object. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Lock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaf9b7c65bead29e01d37b105a4bb6b141</Anchor>
    <Abstract>Obtain the lock. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Unlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaf88a98cfa171bf1ac5e813d510f1aab6</Anchor>
    <Abstract>Release the lock. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_TryLock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaab958fa12fd9576389044ea53cb8d934</Anchor>
    <Abstract>Tries to obtain the lock but doesn&amp;#39;t block if this fails. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gac3a845ddd197d23e70a7f537651e1d8d</Anchor>
    <Abstract>Wait on the lock. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Signal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga9ad728685b9d12807d1a485fc318fc55</Anchor>
    <Abstract>Signal the lock. </Abstract>
    <DeclaredIn>plank_ThreadSpinLock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFFTFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Abstract>A simple, cross-platform FFT processor for audio signals. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFFTFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga89d883ebc7fce22b9ab8345bfa66d9a7</Anchor>
    <Abstract>An opaque reference to the Plank FFTF object. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga64f618d491734a3bdde35081ad76b638</Anchor>
    <Abstract>Create and initialise a Plank FFTF object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga4d5a51ebb526b6da9e003faad7e2745e</Anchor>
    <Abstract>Create a Plank FFTF object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga3a6acb5eeebbb43e50a34b4970c0334c</Anchor>
    <Abstract>Initialise a Plank FFTF object with a default length (PLANKFFTF_DEFAULTLENGTH). </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_InitWithLength</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga08189e7ca2694321a80f4bb3d7b29dfd</Anchor>
    <Abstract>Initialise a Plank FFTF object. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga97269b462bd67784918a0daef74a5e9e</Anchor>
    <Abstract>Deinitialise a Plank FFTF object. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga9a785765c0551f8c0add01eb4a8fe04b</Anchor>
    <Abstract>Destroy a Plank FFTF object. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Forward</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>gae8de8981be43638abe68f206f4e596ad</Anchor>
    <Abstract>Apply the FFT to the input and place the result in output. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Inverse</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga58f9deb1c96c5dc9313b302fc03f6289</Anchor>
    <Abstract>Apply the inverse-FFT to the input and place the result in output. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Length</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>gacba55adc5154dd0186cfc2d86e279de7</Anchor>
    <Abstract>Get the FFT size. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_HalfLength</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>gab72a69072a99acdbaa71c599bd0aabe0</Anchor>
    <Abstract>Get half FFT size. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Temp</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga283a3d98eb47fb4a25d5fc71739a7307</Anchor>
    <Abstract>Get a pointer to the internal temporary buffer. </Abstract>
    <DeclaredIn>plank_FFT.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileCuePointClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_cue_point_class.html</Path>
    <Abstract>An audio file cue point reference. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileCuePoint_CreateSharedPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_cue_point_class.html</Path>
    <Anchor>gae944728f82cf815398bb8e8c68dc85d2</Anchor>
    <Abstract>Create a Plank AudioFileCuePoint object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_AudioFileCuePoint.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileMetaDataClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Abstract>An audio file meta data container. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_CreateSharedPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga51bd122a72dbefa8794757eb8f5296a3</Anchor>
    <Abstract>Create a Plank AudioFileMetaData object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddCuePoint</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga375c660140b598242f3bc8ab21554acb</Anchor>
    <Abstract>Adds a cue point. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_FindCuePointWithID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga29a81159d3539113fc7c98a2aea249b1</Anchor>
    <Abstract>Remove a cue point. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_RemoveCuePointWithID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga7a9cd75ca79eaed36715d2ee4394c60c</Anchor>
    <Abstract>Remove a cue point. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_GetNextCueID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>gab5ce96e796df5beda8b85e975e743258</Anchor>
    <Abstract>Searches the metadata for the highest numbered cue ID and returns this with 1 added. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddRegion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga379c0c8fd3759aefcaf5ff461b826e9d</Anchor>
    <Abstract>Adds a region. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_ConvertCuePointsToRegions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga309200e1078bbcb7a68904b89114b04c</Anchor>
    <Abstract>Coverts cue points to regions. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddLoopPoint</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga03ddc693b07ed6fb57ba5ee41ebe254e</Anchor>
    <Abstract>Adds a loop. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddFormatSpecificBlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga135bdcab86656782c22f1453732036a8</Anchor>
    <Abstract>Adds a format specific block of data. </Abstract>
    <DeclaredIn>plank_AudioFileMetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileReaderClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Abstract>An audio file reader. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileReaderRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga7b9ce129b7bc8b2861faa3be49fe656a</Anchor>
    <Abstract>An opaque reference to the Plank AudioFileReader object. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga8784ba3b844756be7837c8f8bd1ab7a2</Anchor>
    <Abstract>Create and initialise a Plank AudioFileReader object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga64b8041841db62479bd26a6ada614a94</Anchor>
    <Abstract>Create a Plank AudioFileReader object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga7efa09693c7ccea6568df64fe5cddbd5</Anchor>
    <Abstract>Initialise a Plank AudioFileReader object. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga89cc49dad0e1b2cf3b0e3598733f52c1</Anchor>
    <Abstract>Deinitialise a Plank AudioFileReader object. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga6d715deee494b0c2c13bf2ba636d5075</Anchor>
    <Abstract>Destroy a Plank AudioFileReader object. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga5a6e10f2b61bfd8ab9f289a5a76e8f53</Anchor>
    <Abstract>Gets the underlying Plank File object. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Open</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaa85d094267a8f606f6f82e9f40447bd6</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_OpenWithFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga23b611f1d461e3b2cf330430ffe4d2da</Anchor>
    <Abstract>Open from a file object. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Close</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaa2de7a4772b24bdacc792a38ccfcc971</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetFormat</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga3f14cbe2ba096761fb06d9dd7704e3e3</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetEncoding</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga6ba1c8ba7650576efcc962f5aadc33df</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetBitsPerSample</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaf42f83e7a2f5b6c3a561e141335ff24c</Anchor>
    <Abstract>The result of this will be invalid if the file is a compressed format. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetBytesPerFrame</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga085db5b740e6d508232ee5707fdf3b1e</Anchor>
    <Abstract>The result of this will be invalid if the file is a compressed format. </Abstract>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetNumChannels</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga0b169539564da5e656f4843bca46d730</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetSampleRate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gafc6121f2efff0f0696cd430b92697371</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetNumFrames</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga587eb8fe582eff2f31bcb787b23c29ce</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_SetFramePosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaa2939b9a2b0d5fe60838d7f2490ef3d9</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_ResetFramePosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gac726281037e5e992ba936fb24f807487</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetFramePosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga912a66e5adb97139b7ed5ace694e96d1</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_ReadFrames</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga79c6bb2ec1263570de5256598e376c34</Anchor>
    <DeclaredIn>plank_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileRegionClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_region_class.html</Path>
    <Abstract>An audio file region reference. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileRegion_CreateSharedPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_region_class.html</Path>
    <Anchor>ga2f7050786b5b14598330a550397b3f95</Anchor>
    <Abstract>Create a Plank AudioFileRegion object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_AudioFileRegion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileWriterClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Abstract>An audio file writer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileWriterRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga0443905cb8b979bb5e7cf68edfabf7d3</Anchor>
    <Abstract>An opaque reference to the Plank AudioFileWriter object. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga977ec0922644294aea3ed6be0536754a</Anchor>
    <Abstract>Create and intitialise a Plank AudioFileWriter object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>gae81c11ca2793bae61c247159438db94a</Anchor>
    <Abstract>Create a Plank AudioFileWriter object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga75b1e9d0eb60730587c8eda08a884f2c</Anchor>
    <Abstract>Inititalise a Plank AudioFileWriter object. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga451ab87a5455da84f80a3b754de4c8d7</Anchor>
    <Abstract>Deinitialise a Plank AudioFileWriter object. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>gac31cf7fba4e88acde197ff642f02e9b5</Anchor>
    <Abstract>Destroy a Plank AudioFileWriter object. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>gae27c3ac6a31d563bede50e9d22674629</Anchor>
    <Abstract>Gets the underlying Plank File object. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_GetFormatInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga009020d9179124eea96a710b06edbc5b</Anchor>
    <Abstract>Get format before open. </Abstract>
    <DeclaredIn>plank_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFileClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Abstract>A crossplatform file reading/writing utility. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_READ</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga58c5e1d5a7b1a826f055f4f4afa697a5</Anchor>
    <Abstract>Flag to identify &amp;#39;read&amp;#39; mode. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_WRITE</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga97b49043ad22933861f58b6055b402c9</Anchor>
    <Abstract>Flag to identify &amp;#39;write&amp;#39; mode. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_BINARY</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga740a67928b707cef8887cbf95002fd77</Anchor>
    <Abstract>Flag to identify &amp;#39;binary&amp;#39; mode. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_APPEND</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac5e888429c54d187fe6c3d4ae7aabb89</Anchor>
    <Abstract>Flag to identify &amp;#39;append&amp;#39; mode. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_NEW</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga6780b0323fabdb2768c6195a070d4ecf</Anchor>
    <Abstract>Flag to identify &amp;#39;new&amp;#39; mode. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_BIGENDIAN</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae8cee2fd2a05cca85533363920cda208</Anchor>
    <Abstract>Flag to identify big endian mode for binary files (otherwise it will be little endian). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_OWNMULTI</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf9b6225e790088d064215175430846cf</Anchor>
    <Abstract>Flag to identify that a multi file object should be owned by the File object. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_DYNAMICARRAYOWNED</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga31ae3a1fb4cc0df712aa68e3bb1d5885</Anchor>
    <Abstract>Flag to identify when in DynamciArray mode that the array is owned by this object. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_MASK</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga977a90e90ad400a6c6927d4ea1a4fe20</Anchor>
    <Abstract>Mode mask with all the mode flags except PLANKFILE_BIGENDIAN. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_ALL</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga007fd6edcef4c3e78f9822c446b65508</Anchor>
    <Abstract>Mode mask with all the mode flags. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFileRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga7a3834c3811eceffb81213155fd14e59</Anchor>
    <Abstract>An opaque reference to the Plank File object. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FileErase</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga9010c7fcd068f755105a30409cfda8a7</Anchor>
    <Abstract>Delete a file with the given path form the filesystem. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf3d641d92bc5a937e2d44127b690bf2e</Anchor>
    <Abstract>Create and initialise a Plank File object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa082f0286f7db42cb80a1d3a02ef0966</Anchor>
    <Abstract>Create a Plank File object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga28528f2257dadba6daf977160b706ccd</Anchor>
    <Abstract>Initialise a Plank File object. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga38f26cb71c29db7e1a4e2b45f0d769ad</Anchor>
    <Abstract>Deinitialise a Plank File object. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gab857b1acf9fae3d94d3c08bc4883a1fa</Anchor>
    <Abstract>Destroy a Plank File object. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Open</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae559595e5fd9ae0c9516748b07e1102c</Anchor>
    <Abstract>Open a file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenTextRead</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga7c4ce239aeac329367be8ca3930e7a51</Anchor>
    <Abstract>Open a text file for reading and optionally writing. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenTextWrite</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4c3df13be9beaa2a4a75bf56ee09dc34</Anchor>
    <Abstract>Open a text file for writing and optionally reading. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryRead</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac0e2fb70c1f212c23860a3cefaeebf15</Anchor>
    <Abstract>Open a binary file for reading and optionally writing. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryWrite</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga660dbb16fe9917836248430fb355576c</Anchor>
    <Abstract>Open a binary file for writing and optionally reading. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryNativeEndianRead</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae80ca5d7e106be93f18cdc48d05fd895</Anchor>
    <Abstract>Open a binary file for reading and optionally writing in the native endian format. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryNativeEndianWrite</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf777842917cc18433b3828ecc9537d41</Anchor>
    <Abstract>Open a binary file for writing and optionally reading in the native endian format. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsBigEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf0125ef82c4af98c33534d25fa1aad9c</Anchor>
    <Abstract>Determine if a file object is in big endian format. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsLittleEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga6be51df6cd1114dc7cd8d6704e6aec99</Anchor>
    <Abstract>Determine if a file object is in little endian format. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsNativeEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaab3dd901ce039e26debe9e792492744b</Anchor>
    <Abstract>Determine if a file object is in the native endian format. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Close</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gad508ef1ca04986784eebd8f58e7fe5d7</Anchor>
    <Abstract>Close a file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa61247a2d83c3ab1fbc2bb0e18c7ad12</Anchor>
    <Abstract>Set the current position of the file read/write pointer. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OffsetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaea3b7367b42566c7e801fffc78fc56f8</Anchor>
    <Abstract>Offset the current position of the file read/write pointer. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ResetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga71c0032e9f87f01510ed5cc12737d5ef</Anchor>
    <Abstract>Reset the current position of the file read/write pointer to the start of the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetPositionEnd</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga0605466aa8e1ed3b806e09a3489f2c7d</Anchor>
    <Abstract>Set the current position of the file read/write pointer to the end of the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsValid</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gafd6ac54a2bfee59aff3da84dc288536c</Anchor>
    <Abstract>Determine if a file object is valid. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsEOF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga334bb77095a53b4bc5a5d30e35e83250</Anchor>
    <Abstract>Determine if a file object read/write pointer has reached the end of the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetEOF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga38986081f4e645e125378d898ab4aa08</Anchor>
    <Abstract>Sets the file object read/write pointer to the end of the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_GetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac259f0da23f6ce83409e93371deb07a7</Anchor>
    <Abstract>Get the current position of the file read/write pointer. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetMode</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf7db745b9435d03b79a30479d2431312</Anchor>
    <Abstract>Reopen the file with a different mode (e.g, read/write/binary etc). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Read</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga3f6b4549317ddc62ca95d43cafb4f191</Anchor>
    <Abstract>Read an array of bytes from the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga0c08e9720517a352698a7f27f45287f6</Anchor>
    <Abstract>Read one signed byte from the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga06c37458676b12ff128f0bb28417d60d</Anchor>
    <Abstract>Read a short from the file (16-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga0bc77191531de3373c4c4a375fc59b87</Anchor>
    <Abstract>Read an int from the file (32-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga117e4cc8e3670c1b0f98b1eaa04cf7f6</Anchor>
    <Abstract>Read a 24-bit int from the file (i.e. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4758673a34464a71ad6b923ff1328c2e</Anchor>
    <Abstract>Read a long from the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaffce2c63afa28bf408775a86b61d588d</Anchor>
    <Abstract>Read one unsigned byte from the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gad456be7c79815fa8ef29a4cae5365371</Anchor>
    <Abstract>Read an unsigned short from the file (16-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae3c80fd2b556c056ded0d31ff3d07db4</Anchor>
    <Abstract>Read an unsigned int from the file (32-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga9a6d94236a721891dbe505ae9d7a761a</Anchor>
    <Abstract>Read an unsigned 24-bit int from the file (i.e. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaed5a1d81b1d4ca59c6285375f776fbfe</Anchor>
    <Abstract>Read a long from the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf244d0e568c034926617726825f2e57d</Anchor>
    <Abstract>Read an unsigned 64-bit int from the file (i.e. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa95f3c6bf37685747b373455da60457c</Anchor>
    <Abstract>Read a float from the file (32-bit float). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga69ae9efd0b11c5e2118044675e99f303</Anchor>
    <Abstract>Read a double from the file (64-bit float). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadLine</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga854f1f38dd0882255b21ce9131b16efc</Anchor>
    <Abstract>Read an array of bytes as text upto the next line ending (or the end of the file if sooner)...</Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SkipBytes</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaaa3fb85b283c5c4f3b0bdd81035f00dd</Anchor>
    <Abstract>Skip over a number of bytes in the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Write</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga94fb1c8ba6c324f1e032ec55c74bf83b</Anchor>
    <Abstract>Write an array of bytes to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gab77b1864e3a13b3a269a9e9eff1bd8e7</Anchor>
    <Abstract>Write one signed byte to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4bdabdaf7cba10def430252ff5286417</Anchor>
    <Abstract>Write a short to the file (16-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4222dbbc8486e8dd2d67f7afd9e10128</Anchor>
    <Abstract>Write an int to the file (32-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga114a1629f0996ea44925fe69e212f364</Anchor>
    <Abstract>Write a 24-bit int to the file (i.e., 3 bytes). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa8f23f4d4f62c1f2bc16c2db28652c7a</Anchor>
    <Abstract>Write a long to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga1211786a40a82960493585fec6f8cf88</Anchor>
    <Abstract>Write one unsigned byte to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga547d377121983dcfa573af98bd7a04ff</Anchor>
    <Abstract>Write an unsigned short to the file (16-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac232eadb468ceecfdac10225f320db2f</Anchor>
    <Abstract>Write an unsigned int to the file (32-bit int). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4329d8c87cded92f8a20fd289df8948a</Anchor>
    <Abstract>Write an unsigned 24-bit int to the file (i.e., 3 bytes). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gad4f9aa825fb07dfcdab31cd471a10d76</Anchor>
    <Abstract>Write an unisigned long to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaac61e8626ecaadcd40dc31dadaa6c148</Anchor>
    <Abstract>Write an unsigned 64-bit int to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac616b003e797c36cec2ce89cea88d6fb</Anchor>
    <Abstract>Write a float to the file (32-bit float). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gadeef54a7fd4811f363cc55ef3ba618d4</Anchor>
    <Abstract>Write a double to the file (64-bit float). </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteString</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga32760bb91c90d10b3a241816d5b6d418</Anchor>
    <Abstract>Write string to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteLine</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac5c9f5593d89fa99365d80d76da43256</Anchor>
    <Abstract>Write line of text to the file. </Abstract>
    <DeclaredIn>plank_File.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileReaderClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Abstract>A generic IFF/RIFF file reader helper. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileReaderRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gaf3f3fbf2849e73e0d7c0cee324713acd</Anchor>
    <Abstract>An opaque reference to the Plank IffFileReader object. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gad8b686899f4ce9390290569e1774a11f</Anchor>
    <Abstract>Create and initialise a Plank IffFileReader object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga3f42bc71541ad07401d2e7e1d34fa2fa</Anchor>
    <Abstract>Create a Plank IffFileReader object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga1d3aa86bd74b5091bac3787bf63816b5</Anchor>
    <Abstract>Initialise a Plank IffFileReader object. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gaafebab2c787458fc5adf793cb98e46b7</Anchor>
    <Abstract>Deinitialise a Plank IffFileReader object. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga7326ad8d98497c015930167a772cd1ba</Anchor>
    <Abstract>Destroy a Plank IffFileReader object. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gadfbf398a4a19991b47639c1d6a2ff245</Anchor>
    <Abstract>Gets the underlying Plank File object. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Open</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga5ac68294a1adf847195937a1ba30d03e</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_OpenWithFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gae94810668da237376673a27032cd10ab</Anchor>
    <Abstract>Open from a file object. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Close</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gab10f618aa45bae084bf7940c0259ac58</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetMainID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gae8bbcc7f83cfaebbbb944af951d8a5ea</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetFormatID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga334d748334889d8194ab05aa78476af9</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetMainLength</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga939b89df2a91581946031d814a59bbee</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetMainEnd</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga6b687552c44f6cbe6ad1b489831bc1eb</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_IsBigEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga088184f65ec9225e61b889363b1a92cb</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_SetEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gafe00a67e7166da700d577793f672991d</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_SeekChunk</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga6c1fd9cd33b69781f17e0536c085abea</Anchor>
    <Abstract>Seek to the data of a particular chunk. </Abstract>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_ParseChunkHeader</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gaa73b554058ea1e0602ed273ea4958b00</Anchor>
    <DeclaredIn>plank_IffFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileWriterClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Abstract>A generic IFF/RIFF file writer helper. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileWriterRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga0d6081668c3925c23293e1cdb5a12992</Anchor>
    <Abstract>An opaque reference to the Plank IffFileWriter object. </Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga97aadfd2116c3c03b0f9b47af315d1fe</Anchor>
    <Abstract>Create and initialise a Plank IffFileWriter object and return an oqaque reference to it...</Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga9abb84d6bac7ce3f7ef47236dfafa246</Anchor>
    <Abstract>Create a Plank IffFileWriter object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>gaaa11aa4a252c1a0652b54b94317d4c5a</Anchor>
    <Abstract>Initialise a Plank IffFileWriter object. </Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga80973d46c4a2eda262f972b64281defb</Anchor>
    <Abstract>Deinitialise a Plank IffFileWriter object. </Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>gacb64daae92638c7e966f8f5fcc51d916</Anchor>
    <Abstract>Destroy a Plank IffFileWriter object. </Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga3ad9675af0d8fff53d497c9058204b85</Anchor>
    <Abstract>Gets the underlying Plank File object. </Abstract>
    <DeclaredIn>plank_IffFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankMultiFileClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_multi_file_class.html</Path>
    <Abstract>Holds references to multiple files. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MultiFileReader_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_multi_file_class.html</Path>
    <Anchor>ga89d2056c34ca6147fccbe7be878ba1e2</Anchor>
    <Abstract> </Abstract>
    <DeclaredIn>plank_MultiFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankMathsFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MoveF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga164f0323225df0494e603154fa1e614c</Anchor>
    <Abstract>Just returns the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MoveD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga754d66954713e2d287a4732bc9f3835c</Anchor>
    <Abstract>Just returns the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NegF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9c53f7694e05268362e4ce21f311a390</Anchor>
    <Abstract>Returns the negative of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NegD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gafab5e6f96a4ae2100219c17d4ab33d54</Anchor>
    <Abstract>Returns the negative of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga32c5e9ec697355c3e2a153b3f3950393</Anchor>
    <Abstract>Returns the absolute of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga3abed4819ea079935becaee097c1b131</Anchor>
    <Abstract>Returns the absolute of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log2F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabdd452e1518a66cf0d9fed691c8b47a0</Anchor>
    <Abstract>Returns the logarithm base 2 of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log2D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga63b2b10f119a9e85835cd1c52659db85</Anchor>
    <Abstract>Returns the logarithm base 2 of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ReciprocalF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1cb6feb8a8a34d3323b405650ef1e0ad</Anchor>
    <Abstract>Returns the reciprocal of the input argument (i.e, ). </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ReciprocalD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gad86ace90fe2ea6f9a3fbd6d490411d94</Anchor>
    <Abstract>Returns the reciprocal of the input argument (i.e, ). </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1fd0eec07e3e032eeec06f614a70754e</Anchor>
    <Abstract>Returns the sine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga05a9ada88f21fae3424b96bc702efbd9</Anchor>
    <Abstract>Returns the sine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CosF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8e0af6f1ad5d3b451566c295f3c0ad34</Anchor>
    <Abstract>Returns the cosine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CosD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga71e32eb4c3e8a7135f7028a16fb8b55d</Anchor>
    <Abstract>Returns the cosine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaa9f0c2dd6ff1434bd8188b20142daf05</Anchor>
    <Abstract>Returns the tangent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7c0d061f726b227dc80ef6fcc60399bf</Anchor>
    <Abstract>Returns the tangent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AsinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga74148d65fe6c3a44826479200bfaa679</Anchor>
    <Abstract>Returns the arcsine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AsinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4e5d74f2d8fb5d8503c0d1378ff67528</Anchor>
    <Abstract>Returns the arcsine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AcosF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaaddd7a8373b601b9c085ac9a86046f75</Anchor>
    <Abstract>Returns the arcosine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AcosD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaecd4def003a534923d1342fe11af5028</Anchor>
    <Abstract>Returns the arcosine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gab9bb9726978a4930418eda07ec09afdd</Anchor>
    <Abstract>Returns the arctangent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac9c8a17625345c474954b33c728fba4f</Anchor>
    <Abstract>Returns the arctangent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinhF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaf682076757a71f9839db7734c9ce4f8f</Anchor>
    <Abstract>Returns the hyperbolic sine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinhD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8070a645911752f5e9ac9561f913aef4</Anchor>
    <Abstract>Returns the hyperbolic sine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CoshF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga05dbce5d0a023eb6fa68d8458c0bbca7</Anchor>
    <Abstract>Returns the hyperbolic cosine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CoshD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga93a00c44db3ff597f7a57869dfeedb6e</Anchor>
    <Abstract>Returns the hyperbolic cosine of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanhF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga913afa2be9670c3019619a5a43231370</Anchor>
    <Abstract>Returns the hyperbolic tangent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanhD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga88ca17d57234ef605e2233a118aee8fe</Anchor>
    <Abstract>Returns the hyperbolic tangent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrtF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1054c302ddd4838a762847abbf7e43f6</Anchor>
    <Abstract>Returns the square root of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrtD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1cc033112e9660b8647e74aa3a1b94ed</Anchor>
    <Abstract>Returns the square root of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LogF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga3411a481af05f50f2649bfcef48c223a</Anchor>
    <Abstract>Returns the natural logarithm of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LogD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga112778b49b391a2c444bd1bdd510dc09</Anchor>
    <Abstract>Returns the natural logarithm of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log10F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga721bcf745e7cb845b42cda978ad1c5cf</Anchor>
    <Abstract>Returns the logarithm base 10 of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log10D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7f2cb185c8e2b8a6e17b150903cfb344</Anchor>
    <Abstract>Returns the logarithm base 10 of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ExpF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac90ae85b687ddfe982ab104787bb8a7f</Anchor>
    <Abstract>Returns the exponent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ExpD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gadaa32d432245768cf1cda0d0997a6308</Anchor>
    <Abstract>Returns the exponent of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SquaredF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1ad89904e94262fa52d443da6674517b</Anchor>
    <Abstract>Returns the input argument squared. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SquaredD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga650925e99f01eb75c031f6beb7d20a92</Anchor>
    <Abstract>Returns the input argument squared. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CubedF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaedb66d437bc79576d43c11ba71486853</Anchor>
    <Abstract>Returns the input argument cubed. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CubedD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac862753d321c0959563fc250e5cfbf5f</Anchor>
    <Abstract>Returns the input argument cubed. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CeilF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaea7073a4052c7a04dced96c85ddac579</Anchor>
    <Abstract>Returns the input argument rounded up to the next highest integer. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CeilD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga022a4169851f70d61d18090f1ed33de3</Anchor>
    <Abstract>Returns the input argument rounded up to the next highest integer. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FloorF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gae60d4c966db6b253f1493417ca06f18d</Anchor>
    <Abstract>Returns the input argument rounded down to the next lowest integer. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FloorD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga00d7b64487da47afe70db45db840e6cc</Anchor>
    <Abstract>Returns the input argument rounded down to the next lowest integer. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FracF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gab7f29542e87ca53fd5b4168b6597988b</Anchor>
    <Abstract>Returns the fractional part of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FracD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5176c934c987a71c7867af8179486472</Anchor>
    <Abstract>Returns the fractional part of the input argument. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SignF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0f25776ceba9bc1831e062af5210df89</Anchor>
    <Abstract>Returns 0 if the input is 0, -1 if the input is negative or 1 if the input argument is positive...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SignD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga2c9f56b92320d80feb209b61bc899057</Anchor>
    <Abstract>Returns 0 if the input is 0, -1 if the input is negative or 1 if the input argument is positive...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_M2FF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8a90b2a033250976770d6dfbc26bf02c</Anchor>
    <Abstract>Returns the input argument converted from MIDI note numbers to frequency (in Hz). ...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_M2FD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4ed411f2c409aa5a64c96d6ce9529165</Anchor>
    <Abstract>Returns the input argument converted from MIDI note numbers to frequency (in Hz). ...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_F2MF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga2fbb504cd6f2549733f07d1fabda6e2b</Anchor>
    <Abstract>Returns the input argument converted from frequency (in Hz) to MIDI note numbers. ...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_F2MD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4749786c700311a0593cba415177ef1e</Anchor>
    <Abstract>Returns the input argument converted from frequency (in Hz) to MIDI note numbers. ...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_A2dBF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga50680a3c21e29807f2610a0967e16995</Anchor>
    <Abstract>Returns the input argument converted from linear amplitude to decibels where 0dB is an amplitude of 1...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_A2dBD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga25500f8339961ab245fea970a454f001</Anchor>
    <Abstract>Returns the input argument converted from linear amplitude to decibels where 0dB is an amplitude of 1...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_dB2AF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaaae6e51563bdb41422830414b91e029e</Anchor>
    <Abstract>Returns the input argument converted from decibels to linear amplitude where 0dB is an amplitude of 1...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_dB2AD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga89d70c9e30576872fda245aa3ecad1dc</Anchor>
    <Abstract>Returns the input argument converted from decibels to linear amplitude where 0dB is an amplitude of 1...</Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_D2RF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga55565fb50d812509e916d1a5bcd50ed3</Anchor>
    <Abstract>Returns the input argument converted from degrees to radians. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_D2RD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gad5e25003bbb6a68d7ee9ef6295647f5e</Anchor>
    <Abstract>Returns the input argument converted from degrees to radians. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_R2DF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaa294d009df41dd5a5c7ba1f2505ed49d</Anchor>
    <Abstract>Returns the input argument converted from radians to degrees. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_R2DD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaadfb3bf407a277817a4fd7ae67d84c70</Anchor>
    <Abstract>Returns the input argument converted from radians to degrees. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DistortF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac6733f9a979d84ed6ecdd4288e301b27</Anchor>
    <Abstract>Returns the input argument distorted. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DistortD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga52b93af939f6ca274d514b2ae3ee692b</Anchor>
    <Abstract>Returns the input argument distorted. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ZapF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga221e4008898dcbbc16265b267e399350</Anchor>
    <Abstract>Returns the input argument with infinities, NaNs and denormallised numbers removed. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ZapD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga95dcdb9612f2e6349e9dc07c587562ce</Anchor>
    <Abstract>Returns the input argument with infinities, NaNs and denormallised numbers removed. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AddF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga94049aff0b7b8e6710ecde60cd58be33</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AddD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga978ae5cc15df8c6bc50c6a9187de3f24</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SubF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga3195b8723443d971f4b67b6af5f13124</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SubD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0ece8fe3b61a411cd7f4f47e8e6708ac</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MulF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0586150351369c6450846b2fb4e99d31</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MulD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0f8928287a4a4fbfcff5b4843ba6f8e1</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DivF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7cd062d19d3e7c0d5d9c2ad218f016f3</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DivD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4b48b69d14f582db2a0d2be7a0192cb0</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ModF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaeafd3ee471f776684b02b44acb6cfbb8</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ModD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6378931d67f09df9021038a3be54d538</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga423cca3e7ed31a33d06afb0053ee024a</Anchor>
    <Abstract>Returns minimum of a and b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga90c5aa20c29af981a057f2e215cb4aea</Anchor>
    <Abstract>Returns minimum of a and b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MaxF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7d3f060f2bb9dbd233b679af4f6527b2</Anchor>
    <Abstract>Returns maximum of a and b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MaxD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga26735381f5a1fe41ad8ecbb576ad80f5</Anchor>
    <Abstract>Returns maximum of a and b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_PowF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1636222e26b467dba7c062207545cdbd</Anchor>
    <Abstract>Returns a raised to the power b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_PowD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8a45dc6511a59d71dc2d06467b7f9965</Anchor>
    <Abstract>Returns a raised to the power b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5f99b2ef37521573669ae59e27be7e18</Anchor>
    <Abstract>Returns 1 if the inputs are equal otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gadce33f1551a89e982bfaae51c4769fb8</Anchor>
    <Abstract>Returns 1 if the inputs are equal otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsNotEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8dae0bad8a8e61635058baa7d5d124a7</Anchor>
    <Abstract>Returns 1 if the inputs are not equal otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsNotEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga94470c822ac243f74aff9fd153427154</Anchor>
    <Abstract>Returns 1 if the inputs are not equal otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga42224769b1d547f65d7afe530e24a782</Anchor>
    <Abstract>Returns 1 if the a is greater than b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gace2e7d74c4853140b481a4b09dff7bb8</Anchor>
    <Abstract>Returns 1 if the a is greater than b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanOrEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6135fc355e7b4ecf76afb9293c814f36</Anchor>
    <Abstract>Returns 1 if the a is greater than or equal to b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanOrEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga267b5f04240db101f50bbddf65c57409</Anchor>
    <Abstract>Returns 1 if the a is greater than or equal to b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga57a877dffa9aee83b54aebfa40c8e4c6</Anchor>
    <Abstract>Returns 1 if the a is less than b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0c2e0523e7d1dd182ba3011eaf3dcd06</Anchor>
    <Abstract>Returns 1 if the a is less than b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanOrEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga90cceb4d492e11827b62d42d50d65981</Anchor>
    <Abstract>Returns 1 if the a is less than or equal to b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanOrEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gacae863b2196244ac11f0575e635ee6a5</Anchor>
    <Abstract>Returns 1 if the a is less than or equal to b otherwise returns 0. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_HypotF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaff17fbdad0951763b813ef99e1505ba0</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_HypotD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaf967c719bfec3b395ddf14598a2c71a7</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Atan2F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6398472a918e14aeb79f11a8948e6a24</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Atan2D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaea36eb66a008077875488271614dc584</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SumSqrF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaddcbd7645d9348e061fe51e8739b1c28</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SumSqrD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6ae4b646a620622e2776915c82197c8d</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DifSqrF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gab3294d19a6d57a7937bc071891252efa</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DifSqrD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9d0baaacc5e3c7b0d29c7b3c2107dbc7</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrSumF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6cc65e053fabc3b4980b1bce2bd265b1</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrSumD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabd69fea93b359ded950ec2b2f174fffc</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrDifF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabbb0a26f6febc273c32beaa63d130491</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrDifD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga03cfbc0e0273810105de847c874a6331</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsDifF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9d9d94b5f83f1b3c59e66fa7816943b6</Anchor>
    <Abstract>Returns the absolute difference between the input arguments. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsDifD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac953475056afca0d56c2bf794921a61f</Anchor>
    <Abstract>Returns the absolute difference between the input arguments. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreshF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac24bec6ed723b1850a02777c03d03837</Anchor>
    <Abstract>If a is less than b returns 0 otherwise return a. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreshD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaba2dbb4ba56bfd9897a0edb5198afd2b</Anchor>
    <Abstract>If a is less than b returns 0 otherwise return a. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MinL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabb9c201de469f6d00c93435917f679f4</Anchor>
    <Abstract>Returns minimum of a and b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MaxL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga02f421f17ffa3e81132d9f6f53e1e3a5</Anchor>
    <Abstract>Returns maximum of a and b. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0cb780b46fff06a1191a4b706cafedc9</Anchor>
    <Abstract>Maps a value from one linear range to another. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaf9532dbb6977e6c82e472d935d4417f1</Anchor>
    <Abstract>Maps a value from one linear range to another. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLin2F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaeb1323a7e6eaa87bf38c63ef4aa71178</Anchor>
    <Abstract>Maps a value from one linear range to another. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLin2D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gad13b362539bd8501214b59aae195a7c2</Anchor>
    <Abstract>Maps a value from one linear range to another. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinExpF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga25ad3b6c27ea6b960aab0cd8b5b60c95</Anchor>
    <Abstract>Maps a value from a linear range to an exponential range. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinExpD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga83433f2f17eac8a7c470e1e1efa7fb20</Anchor>
    <Abstract>Maps a value from a linear range to an exponential range. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinInterpF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8e3fdc2ff02fc552f809e47b09589dc0</Anchor>
    <Abstract>Perform linear interpolation on two values. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinInterpD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5e9388062730c6f12b19869dac4b7203</Anchor>
    <Abstract>Perform linear interpolation on two values. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LookupF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9d73c041d343b113f13b8d981c880fe9</Anchor>
    <Abstract>Lookup a value in a table at the given index performing linear interpolation if necessary. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LookupD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gafbfd838336b8d44fd4155621d1dc56ea</Anchor>
    <Abstract>Lookup a value in a table at the given index performing linear interpolation if necessary. </Abstract>
    <DeclaredIn>plank_Maths.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankVectorMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_vector_macros.html</Path>
    <Abstract>Vector processing macros. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankVectorFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Abstract>Vector processing functions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillF_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadba19e6ddb41b291cf5a31417c77c002</Anchor>
    <Abstract>Fills a vector with a constant. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearF_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga892aadf09ccc35dec2b1f8cce0329361</Anchor>
    <Abstract>Fills a vector with zeros. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampF_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab931e3548c1ad9126eeac4d03a62a98b</Anchor>
    <Abstract>Fills a vector with a ramp. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineF_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafd7d205df3f0e4356ac512f2ac83e1ee</Anchor>
    <Abstract>Fills a vector with a line. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad39cad02b7c701d4be998d35a5dd0c07</Anchor>
    <Abstract>Applies the function pl_MoveF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2bfe67e97be50768653aaa0f3cdff703</Anchor>
    <Abstract>Applies the function pl_IncF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4d2847fbedcb67e16b46f797037cd2ca</Anchor>
    <Abstract>Applies the function pl_DecF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga654f989747a7b20aed6f4eb71409fbd2</Anchor>
    <Abstract>Applies the function pl_NegF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa9fb54784040ae2431e4cb377e4702c2</Anchor>
    <Abstract>Applies the function pl_AbsF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8446ece2772413021be86d7f98eefe17</Anchor>
    <Abstract>Applies the function pl_SquaredF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab160564cfb8f0dec844f2bea55bd247</Anchor>
    <Abstract>Applies the function pl_CubedF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga143cd9b01bae1e6f0caf7575f47e17b4</Anchor>
    <Abstract>Applies the function pl_SignF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8f02ebb7a4110feef4a34d437b782be6</Anchor>
    <Abstract>Applies the binary operator function pl_AddF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf287d98412e43a25e0953fa2ea43ec97</Anchor>
    <Abstract>Applies the binary operator function pl_AddF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaef612212a4ac2b5c676af30cd22be056</Anchor>
    <Abstract>Applies the binary operator function pl_AddF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac4b06f96f6dcb9f2edf9c61e7c30fcf9</Anchor>
    <Abstract>Applies the binary operator function pl_SubF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga40f2ac54f4fb2f9e440d576e2ada3ecb</Anchor>
    <Abstract>Applies the binary operator function pl_SubF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2495cfcd9ba3cde6ba1e94f5cf7289db</Anchor>
    <Abstract>Applies the binary operator function pl_SubF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga657fafd02820bafdcf59781846dd6f50</Anchor>
    <Abstract>Applies the binary operator function pl_MulF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2e713aceff8936cb99c3060668249080</Anchor>
    <Abstract>Applies the binary operator function pl_MulF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab8dd0d9a18518f218b1d689d2bc05530</Anchor>
    <Abstract>Applies the binary operator function pl_MulF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab559e430be970a60131370fa31b228ee</Anchor>
    <Abstract>Applies the binary operator function pl_DivF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac488371bc54870bcb8ff0cd902acb061</Anchor>
    <Abstract>Applies the binary operator function pl_DivF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga25625c71b9da7b3f0dbbe4e8cac59226</Anchor>
    <Abstract>Applies the binary operator function pl_DivF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac1fc99d5e631bff108a2cc22c92e34e4</Anchor>
    <Abstract>Applies the binary operator function pl_ModF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa8bc20cd644158022023aa40e2404fcd</Anchor>
    <Abstract>Applies the binary operator function pl_ModF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga387954cb2cfeac14216189b31f76ac7c</Anchor>
    <Abstract>Applies the binary operator function pl_ModF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8542af16ca19db6bdfdc061c114eea83</Anchor>
    <Abstract>Applies the binary operator function pl_MinF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8965b6a641573b227e81367f75cd1d4c</Anchor>
    <Abstract>Applies the binary operator function pl_MinF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1ca4a193a3c08f2d10632acac17361ce</Anchor>
    <Abstract>Applies the binary operator function pl_MinF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7bff8bdc34828900ac7cfd604485ba97</Anchor>
    <Abstract>Applies the binary operator function pl_MaxF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9688c52a0116efe26df425e8ceddf758</Anchor>
    <Abstract>Applies the binary operator function pl_MaxF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad4eb16d1174fddd78fa163f58041c4b3</Anchor>
    <Abstract>Applies the binary operator function pl_MaxF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab0de20114b3bc9f3731ccdba7e1e384a</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5a36c9b4736f8a4805bca9edb913c4ed</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa27d99cd962fd93135a0b0f625b90fb9</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad1b3f845e51af93bbc89082ff018adc1</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToF() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf6341ecc5bbb5262008376f9b4054315</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae9350411addc7eea65ee954c00666795</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaed17c88828cf4f9bf75d11dc094d7231</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanF() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae111fddf2163a58774455139228e3c64</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga603bda0f33f6d9eea7321feab21ea47e</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad3f1e235efee8f4c08a99d6c38ffab93</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToF() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga80702b216c212e9d13a0ee1ff83a1c37</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToF() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaae2735bbcc466cbd3787be50572b9c9c</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToF() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2128f6c4ec3c734a559788cd04d27c13</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6fd286456ba73cac26f525f569a023f5</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga80bb8e63fd61299437026256fd130366</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9ca6c16e14cbfc30829615ab14c3a5a</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToF() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6235013c19294884402f4665250d0d9d</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0b37df385ca9cc7a46c692f49d729cd5</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga103def5ebd845c9b71f62bce900ede8d</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9a91eb0e8949454fa8fa27d6d46e222</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3e969dc4489c0608a11a17fb722fe3cf</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaeaca8320095b72c8642bf2efb6c1756c</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9f8f8e117a293a3c8db940bd9378fda4</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae297806d57ad37ddeca466fb478e863e</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9b034de23e951a36cf73513da8ffa2f5</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad0395c837dec28dbb9bf71499bb9e0ee</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga24bf6d4f1411c89cf7549d4ee68cb8f6</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab3db27e541deace9661703700f34d47d</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2a28d8dc74913c13c67fb8bb42945f4c</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa3e6bfbe8a0dfb7fe99af0ff2936f7b0</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4175eb18ecbbb9ee3a7727b5df73daee</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac4898c4ad885e7b00db64d9ed8b2397b</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa7603ee5d6779c07433e18ac27438f0c</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga29dbb9bdcaa99c811b11ca3ec64dda7f</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaeeb6d36165a29bf684b2f80a4411dc80</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad64e191068f104b2991d97b396d4f94e</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshF() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga71a31699a53013b3ef13517fe1687243</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa0c02febadf1a2b141126a4b37274284</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga44bd1f61432631188be339b84021ed4f</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2497304098b70556ab776e818f79dccc</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabf9d247a86b01c9d75de1160df02be93</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupF_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac61a7a83e3b62e2112adbf5e5edcb3aa</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog2F_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9f6a1dcd2cc5f532a70a1c564aa1aa6</Anchor>
    <Abstract>Applies the function pl_Log2F() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorReciprocalF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa1e6a14dbfe2040eb7634d614b85ba62</Anchor>
    <Abstract>Applies the function pl_ReciprocalF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga00fba10282b6ed9dd5ac73f3025c07e6</Anchor>
    <Abstract>Applies the function pl_SinF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCosF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab8b29fc4634a30b066b6825efa4432ea</Anchor>
    <Abstract>Applies the function pl_CosF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac0b466f3b2fe1126f26c8bcd9e6e5658</Anchor>
    <Abstract>Applies the function pl_TanF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAsinF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab3b4149af6461bc184035460726ee585</Anchor>
    <Abstract>Applies the function pl_AsinF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAcosF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga34743d1860c26bfcd78c00b069d3e5b0</Anchor>
    <Abstract>Applies the function pl_AcosF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtanF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga069dee94b3fb58db3101ec6c02db9bdf</Anchor>
    <Abstract>Applies the function pl_AtanF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinhF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacb37d7ffeb5dd8c121cd115b881e5e74</Anchor>
    <Abstract>Applies the function pl_SinhF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCoshF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab78c0c8491efad2c84ff4ffe0116b897</Anchor>
    <Abstract>Applies the function pl_CoshF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanhF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga044605176f057f3e9f483df1c926126c</Anchor>
    <Abstract>Applies the function pl_TanhF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrtF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0fd29b71440dce0538ea738539e63f63</Anchor>
    <Abstract>Applies the function pl_SqrtF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLogF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad327ca50a85a1336e1bf0ad4629b2a3a</Anchor>
    <Abstract>Applies the function pl_LogF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog10F_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga57d16c6a5b47800abdad9dd59f9ea861</Anchor>
    <Abstract>Applies the function pl_Log10F() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorExpF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1b2019b250dd7b9d5d828879542ae7c3</Anchor>
    <Abstract>Applies the function pl_ExpF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCeilF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab45ccdd24b9e4775c1993a9002bd69a2</Anchor>
    <Abstract>Applies the function pl_CeilF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFloorF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad9aa6c23cb0b68acebf8a35f6bdd960b</Anchor>
    <Abstract>Applies the function pl_FloorF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFracF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac24e8c6dc0c37c5e006dae033b932f19</Anchor>
    <Abstract>Applies the function pl_FracF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorM2FF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9f99ea7f9bf2329a58e3dd0cc5c6dea4</Anchor>
    <Abstract>Applies the function pl_M2FF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorF2MF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3ed58bae298fe7c786d03bced982ff4c</Anchor>
    <Abstract>Applies the function pl_F2MF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorA2dBF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga581e8dfb23d178379b3c3569b8bc57ba</Anchor>
    <Abstract>Applies the function pl_A2dBF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectordB2AF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf8c93af1cf188792d27e9ba28c5f112c</Anchor>
    <Abstract>Applies the function pl_dB2AF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorD2RF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6a14db51ae2f170906a1e54b640ad5ea</Anchor>
    <Abstract>Applies the function pl_D2RF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorR2DF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae937a7e901d8a93b68ec2682972282b5</Anchor>
    <Abstract>Applies the function pl_R2DF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDistortF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9c77b2458337e8c2834d09f84257ca3</Anchor>
    <Abstract>Applies the function pl_DistortF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorZapF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga63e862d34333b3b7f9eb4d148403be2e</Anchor>
    <Abstract>Applies the function pl_ZapF() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaccb1c9356c3e3632a542ebde0ffb62ad</Anchor>
    <Abstract>Applies the binary operator function pl_PowF() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad71c86de3bd7260f491b623d693ac5a2</Anchor>
    <Abstract>Applies the binary operator function pl_PowF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8e4d5b4f0677d1c8874d486cd0f84eeb</Anchor>
    <Abstract>Applies the binary operator function pl_PowF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab96492cec3180e8440f359bce170ff3</Anchor>
    <Abstract>Applies the binary operator function pl_HypotF() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac0c14b1e08d6ea7936542a0525716591</Anchor>
    <Abstract>Applies the binary operator function pl_HypotF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2056a9ca59a37a119ec599365574f8a8</Anchor>
    <Abstract>Applies the binary operator function pl_HypotF() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2F_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga480982918810208c7bbdf9c66045abda</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2F() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2F_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga07b98e47264fce67c59b9a1035c7b156</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2F() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2F_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3ed5b01e169a070f3a2ee1c9c77e91aa</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2F() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillD_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacebb8d4770bfc5ae1b666c2871e708ee</Anchor>
    <Abstract>Fills a vector with a constant. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearD_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga582aee4f8ef87cedc8076a91fce31b43</Anchor>
    <Abstract>Fills a vector with zeros. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampD_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa694ab019eed9a45596e13694583138b</Anchor>
    <Abstract>Fills a vector with a ramp. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineD_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6a514b220967e7c3d38934c4bcc4d267</Anchor>
    <Abstract>Fills a vector with a line. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga08a65a2395b289f0b7a8b0da6cdbf597</Anchor>
    <Abstract>Applies the function pl_MoveD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga13bff603268e8fa70cf79a8a809fabf7</Anchor>
    <Abstract>Applies the function pl_IncD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga21534f244dc4279e701dc035955d61e5</Anchor>
    <Abstract>Applies the function pl_DecD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga50a2c0ee177efd070eebf24e277a5245</Anchor>
    <Abstract>Applies the function pl_NegD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1649c04b20b19581943d799c0ebaecb5</Anchor>
    <Abstract>Applies the function pl_AbsD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6c6d21a240242a62d11f1178b724a483</Anchor>
    <Abstract>Applies the function pl_SquaredD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8008c48ab666efde05675856474f46a7</Anchor>
    <Abstract>Applies the function pl_CubedD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf02de6860f57430125cdb3df99fd89b7</Anchor>
    <Abstract>Applies the function pl_SignD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7e3050499bf268977cd729fdc8175be9</Anchor>
    <Abstract>Applies the binary operator function pl_AddD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf73a202a50bf27915a8f16d51c8f6477</Anchor>
    <Abstract>Applies the binary operator function pl_AddD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafc7766928114fd1b979496bae4a2bbf8</Anchor>
    <Abstract>Applies the binary operator function pl_AddD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga29b529b7794c15aa2c54e3862df7e9c9</Anchor>
    <Abstract>Applies the binary operator function pl_SubD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6028cf664c89972f0e497006d6acd6ff</Anchor>
    <Abstract>Applies the binary operator function pl_SubD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga447fb6c92722b7b1fcc326961b2fb610</Anchor>
    <Abstract>Applies the binary operator function pl_SubD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae875fd38f045da8435d440307163b447</Anchor>
    <Abstract>Applies the binary operator function pl_MulD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab1fedecdd8c9babaead99d12dc419fb6</Anchor>
    <Abstract>Applies the binary operator function pl_MulD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac28bd2c7906b0e402075399dc643c6f8</Anchor>
    <Abstract>Applies the binary operator function pl_MulD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2c872eaf7340d375b21032ba723d9004</Anchor>
    <Abstract>Applies the binary operator function pl_DivD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad61376200edeb645ce8833342873187d</Anchor>
    <Abstract>Applies the binary operator function pl_DivD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga402f410c5f65410b2e41448f72540b9c</Anchor>
    <Abstract>Applies the binary operator function pl_DivD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9012d21140d538af8aa305da6301389c</Anchor>
    <Abstract>Applies the binary operator function pl_ModD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga16a3ccdf6a1dcecb5ec2437c973c268a</Anchor>
    <Abstract>Applies the binary operator function pl_ModD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga42e969ed158c3972e8270c34c787846f</Anchor>
    <Abstract>Applies the binary operator function pl_ModD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga848555fae4a74209cbb5ec6ff00d3a0f</Anchor>
    <Abstract>Applies the binary operator function pl_MinD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac55b94ee543dd3d6ad3b46478b3679ac</Anchor>
    <Abstract>Applies the binary operator function pl_MinD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga149f731faae3246722c61af8ff5c9108</Anchor>
    <Abstract>Applies the binary operator function pl_MinD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa6ebbe1b66455630f9cea1b40ac8ea5a</Anchor>
    <Abstract>Applies the binary operator function pl_MaxD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf8c3b5c2c34868c07392d2ffe932ee4f</Anchor>
    <Abstract>Applies the binary operator function pl_MaxD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7fbd1a9d0fbf9f16cf3b13198001ccce</Anchor>
    <Abstract>Applies the binary operator function pl_MaxD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga96b2a553a5a948e76bd2ab4f7a4ab429</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga61b9d8aa012d9d1761ddc29afb502b76</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaafc74997e4dc05abfdec534379d13cf5</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf1d6068f61e53973aafc646a1fd53bec</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToD() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1c830ff6946e1bceb18f0ef9a4fda146</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga87c9ba2f9ca685ab8c69513e977f6134</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga864700ff670102ff1987fb15a9e6c89f</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanD() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga62785505176e8ab5602773776298077a</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6ce2025dc9de2473f8742bd1b385efab</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga59f1090c09d151b69d92c369e6949b81</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToD() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga89e31aa8283e36de10599b1405440a1b</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToD() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga798838db18fa92dfed2d92e6dea1ec58</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToD() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1b78c30a853816d3e5b3e982cb5b61bf</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0e299780e9f6fe886beea95cf952a5e2</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad61e672aacb0c647cdb551f91218a971</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga212ad5a88a1d7bec02e5d8cfd3b60c41</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToD() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab928524aa0bdf120000beef9a18dedd3</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga09f9a019ab75ed1c068d28fc37bf480d</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga52f08daaad31f158bcf93a6a87fa0494</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa76d1c85565a8a8351af42d7733988cc</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6418de088ed74d35ffde360a7e384b51</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga61be7b94c2be1034725b5751aca8e990</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga19a7b8365bec19f5ff850d85cd48833c</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga66cf6558920db41aad48828441f38e19</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadcdbc7147bffb461f188ebb5e6aca1e3</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf500eefbd4ab2af6dd5198151ebc252c</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga32dd35458ab0278e7987679e7704a86f</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7398cf059ce37bebb581d9f4ee3d20c0</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0f075f77006716b4d3b9cc017ff58d3d</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga176828afcded6548a89f49b1995bed13</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6fdebdcf63b80aafe02d63ad554f5a65</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga42d17a77fda62578890074d384719e34</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5988fd7ea010466df3f4bac66e9201d0</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2e04b2dc215a5bb208a029849247bec0</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga918517424f9eef11caa8dfb47bcaecf5</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6e22c4750658983bf472f6d4bf7ed6c0</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshD() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1a38f57524dedc9e9a3861e9fe31301b</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad00053c1caaa7ea48ddcbce99da049c5</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa92228c49540f5e09f35d69194fbd0ac</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa268b03e8e1c7f78569607117a0e9ba3</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga71b0f8a0bbb6b334b03bd3d29e55eb00</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupD_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab988d570759d074ea4bb147a1d464a24</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog2D_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4e11d032ff3be79dd1a52c6612b2179d</Anchor>
    <Abstract>Applies the function pl_Log2D() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorReciprocalD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5f410c4628d389364e98e9277cdf024a</Anchor>
    <Abstract>Applies the function pl_ReciprocalD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4410b64918287e614b6373a9a94013ad</Anchor>
    <Abstract>Applies the function pl_SinD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCosD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0eb26f0f2503c952d7552ff4e8dd2507</Anchor>
    <Abstract>Applies the function pl_CosD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf36524bad408e187bd34514c42bba12e</Anchor>
    <Abstract>Applies the function pl_TanD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAsinD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9f0dbb5695136c6247577376acd0fe4</Anchor>
    <Abstract>Applies the function pl_AsinD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAcosD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa2c6dc0cb6abcce6d7168d4235f6a1bd</Anchor>
    <Abstract>Applies the function pl_AcosD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtanD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0f85465fa01ee9078fc8339f1eb0a3ac</Anchor>
    <Abstract>Applies the function pl_AtanD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinhD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa13fa35a740b5d427874a05aef53dc78</Anchor>
    <Abstract>Applies the function pl_SinhD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCoshD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9f6aad4d49677f26ce1f50e1d12f8f9b</Anchor>
    <Abstract>Applies the function pl_CoshD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanhD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacd15f8c8361c48ef19789e25906a6f07</Anchor>
    <Abstract>Applies the function pl_TanhD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrtD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9aaa7daf8943aab2ec75a9dd855f3bd0</Anchor>
    <Abstract>Applies the function pl_SqrtD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLogD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae68033746ad26ce9ddc90c7b3546cf76</Anchor>
    <Abstract>Applies the function pl_LogD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog10D_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga06652d9833a33ca56f53f5a3ad9ef9d5</Anchor>
    <Abstract>Applies the function pl_Log10D() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorExpD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga749cb93d0fa278301a20e912b8614431</Anchor>
    <Abstract>Applies the function pl_ExpD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCeilD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadb1de7de4c8ca09cc0e5930984322cfa</Anchor>
    <Abstract>Applies the function pl_CeilD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFloorD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1bd025c340b553b0703bc250892d5aff</Anchor>
    <Abstract>Applies the function pl_FloorD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFracD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaada67433e64e3458ef59ad1f6d318154</Anchor>
    <Abstract>Applies the function pl_FracD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorM2FD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac89c3b0170b611ec270997c54c3e2ba0</Anchor>
    <Abstract>Applies the function pl_M2FD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorF2MD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga57af67aed55de7631f0c65859ac5e3b4</Anchor>
    <Abstract>Applies the function pl_F2MD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorA2dBD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4612f19e5f5f92caa4a70ef315fbf056</Anchor>
    <Abstract>Applies the function pl_A2dBD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectordB2AD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac5eb84eaaf9579b597791792b1956e5e</Anchor>
    <Abstract>Applies the function pl_dB2AD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorD2RD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga111f0fe3bff9ffbb345da42b95678d43</Anchor>
    <Abstract>Applies the function pl_D2RD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorR2DD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa2b37eaee5e6a54506affdda8d1b2046</Anchor>
    <Abstract>Applies the function pl_R2DD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDistortD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1cc5913d89a6a84659875f8e84b68df7</Anchor>
    <Abstract>Applies the function pl_DistortD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorZapD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga63134d71572c5039f9be3d03af1508a0</Anchor>
    <Abstract>Applies the function pl_ZapD() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga82cd21d513c73abdc698c8760c6c8168</Anchor>
    <Abstract>Applies the binary operator function pl_PowD() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga03940e8fcc25e673633b110a8c367bb5</Anchor>
    <Abstract>Applies the binary operator function pl_PowD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8aa44d3931e8a3f626016f83ae7bd507</Anchor>
    <Abstract>Applies the binary operator function pl_PowD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafc13222a9beb248211de5b615f0f3341</Anchor>
    <Abstract>Applies the binary operator function pl_HypotD() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga59dec295cea265998a50819dbd49921e</Anchor>
    <Abstract>Applies the binary operator function pl_HypotD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab77b9eea1cdab289d70b9daa27cbe0f</Anchor>
    <Abstract>Applies the binary operator function pl_HypotD() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2D_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadde56eb1249120aafcb6046b0a25152c</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2D() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2D_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga233f67eaff7821bdc66f8782c8332370</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2D() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2D_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga34f3fe4e02c4cd3174317aa311a5abcb</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2D() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillS_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga562af8bc8f1b8843b0378ef989f2cfd2</Anchor>
    <Abstract>Fills a vector with a constant. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearS_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaac0a39899378bfaf30bef81730de528b</Anchor>
    <Abstract>Fills a vector with zeros. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampS_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa34839385ba01bc48a65705f6eab43b4</Anchor>
    <Abstract>Fills a vector with a ramp. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineS_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac27e93d3a5f9ab2c74a5032e5271175f</Anchor>
    <Abstract>Fills a vector with a line. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf74ee3a1b0b7132a5903b8bf53e647d7</Anchor>
    <Abstract>Applies the function pl_MoveS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad9bb8810a9d217d58116b9ac73bbe5f1</Anchor>
    <Abstract>Applies the function pl_IncS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8a925e1d24ffe86c8947f39dea069ce2</Anchor>
    <Abstract>Applies the function pl_DecS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga293fbd4269fbfc4eddd16940eb77c3fe</Anchor>
    <Abstract>Applies the function pl_NegS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0c04a3b6c71ffd456a05d04aa5429c97</Anchor>
    <Abstract>Applies the function pl_AbsS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga70e5ab57042c5caa2114872594baae00</Anchor>
    <Abstract>Applies the function pl_SquaredS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaacd7d6184264d2ccf80f3c19c40c9c12</Anchor>
    <Abstract>Applies the function pl_CubedS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab4bf5385671bd5784f65e480481bee0a</Anchor>
    <Abstract>Applies the function pl_SignS() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa0033b33a3e532672fe89228cb2f4c26</Anchor>
    <Abstract>Applies the binary operator function pl_AddS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5391f7973d99d15aa83dd8b990735aa7</Anchor>
    <Abstract>Applies the binary operator function pl_AddS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2fc77dcf6263bf01ab5bffc9c81f81e0</Anchor>
    <Abstract>Applies the binary operator function pl_AddS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9bbe10c2ad966d4d7bf417f458e9365</Anchor>
    <Abstract>Applies the binary operator function pl_SubS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab4562637a3d2f7bf0dc02f26f7ce062e</Anchor>
    <Abstract>Applies the binary operator function pl_SubS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabda96e2670ddbd5965620f54831e7935</Anchor>
    <Abstract>Applies the binary operator function pl_SubS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad78a28a5da9932f279152b98f896b208</Anchor>
    <Abstract>Applies the binary operator function pl_MulS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab3f20e65486850740b6d374592b19b4c</Anchor>
    <Abstract>Applies the binary operator function pl_MulS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7860418821d0bf0a409e4d8b687debf1</Anchor>
    <Abstract>Applies the binary operator function pl_MulS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8cf1ba75cbea71e81734d7b164e9f710</Anchor>
    <Abstract>Applies the binary operator function pl_DivS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga04b8615fe72480747c631e5f2e252502</Anchor>
    <Abstract>Applies the binary operator function pl_DivS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga71a450a6ee6d2f14688d09b966cb7cf3</Anchor>
    <Abstract>Applies the binary operator function pl_DivS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5b5c4f0a7b50777bb08765f19fa0129f</Anchor>
    <Abstract>Applies the binary operator function pl_ModS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5746019b676e0ac8363221e780b32dde</Anchor>
    <Abstract>Applies the binary operator function pl_ModS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacaa981efa92aac5fed1da939cfcf39ed</Anchor>
    <Abstract>Applies the binary operator function pl_ModS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4518ef5559b6ccea7ec51c931f7c7d53</Anchor>
    <Abstract>Applies the binary operator function pl_MinS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1dd0406a4d67bd81524a261bf4ca6127</Anchor>
    <Abstract>Applies the binary operator function pl_MinS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga31df072fd551776b962b1623c4227625</Anchor>
    <Abstract>Applies the binary operator function pl_MinS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf5dee8910936040cd0696e659fa474e0</Anchor>
    <Abstract>Applies the binary operator function pl_MaxS() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac96bc499fed7e00b40ecfc8bbaa34595</Anchor>
    <Abstract>Applies the binary operator function pl_MaxS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2a3dd83182ec9b0d6a9dd1135ba464f6</Anchor>
    <Abstract>Applies the binary operator function pl_MaxS() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacd2ccadc95e1b7e54b616294427eb82e</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1c5e20f24ef87eda137d7cd72ab3f4a1</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad4ead78c9cf9498b6bed23014f5062e3</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga37cf405e80583246b410f35e72d042e1</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToS() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaabaf8a101758fa6e022a7263669fc187</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab142a876cd9edb67ec47b34e00926431</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8c7c0a1beaae6d63b8ef304dc98ce1e5</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanS() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5ae3c2e172cb0c8312852d0562bd717d</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadc4f18083d46e601445c32b1fa6f9d08</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2325e277cc498f87f5c999f8d1838072</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToS() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3c7e78a578bf51e6c5dd94f13f3460ca</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToS() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae7edaaebcaad5bc05f1eea38abb94e32</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToS() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaff863513c3bb1d80fad0057004e59ef4</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga20de57d8a7f25a3fd9019c93749e7301</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7eea936620cecd163b7cd34ff738e6c2</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga123e8a44d474b0fa8189c372cc7f991d</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToS() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6f6b3b7928d4e578897065b6334e3216</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga180aa7fc57c453ce0f8e47ffb6abd8e5</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga49109bea227c00ffacd31efed414bd44</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0d8f2c17ef97dff023b2ea87356761f1</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga87e8ba7673d89cb8cbf43dd7a9ba0fc4</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac3d33fbe0b9538ca89463f17c62d36dc</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga16528c2081b39aa923c2753c2872aa2a</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad81057c7e1436032e43a84f2870b0b15</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga29f937d6459b096a5e65e54077e94807</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga23a89d9f08bb8a55cd16eb7330ee3131</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0e96631315acd74fd4ac8abf6170737c</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa49d8fd788461ed13caa57be3a194f66</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaefbefa66daaad2740e4e4192014a4a49</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0372426e5e7290aa07c6d24cee339141</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9740aa776e82675f08142209d5b2aa2</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga81d8da0ca65594496199094ef0080d2e</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf4af576432d977cff8db66544db869ca</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga684459ad3706a9754b90cea36ab19fa5</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshS() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacf0f64d8ca5c48d5c30628f83bbd09b8</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3b0b20c38cf81d6e837eb83338051563</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshS() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf85fe672003a86d3cd03c66444f6053c</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga69a6b536bf34ec38e2e98a2f5fd396d2</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7fde5d4090875b03d545d39ef81dec4b</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga34985f4f21f902442202a628bbe0ebfe</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad9644b58ff9ed83600ac2c952d1dca15</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupS_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacfc7d64830fd60d592b6774d5a9d83ad</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillI_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab6588f5d3ca718f9d4a28a55e27b6c7f</Anchor>
    <Abstract>Fills a vector with a constant. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearI_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga64f9942103e07ee430f341d3852828bb</Anchor>
    <Abstract>Fills a vector with zeros. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampI_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8f2345e3680ef76d3a0eb087ccdcac9d</Anchor>
    <Abstract>Fills a vector with a ramp. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineI_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga955d024c295222033107c5726326155e</Anchor>
    <Abstract>Fills a vector with a line. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac5267bf552788aec02423bce4cb0feef</Anchor>
    <Abstract>Applies the function pl_MoveI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga996ab442f69ae46953c4bdbb3f24c3f5</Anchor>
    <Abstract>Applies the function pl_IncI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga96ba6a5c3bb691e2021e81aa701552fc</Anchor>
    <Abstract>Applies the function pl_DecI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf69a1ea246490843db0ba42754e59d6c</Anchor>
    <Abstract>Applies the function pl_NegI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga28474a08be840b22f2c2c1b5c977fcde</Anchor>
    <Abstract>Applies the function pl_AbsI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga53c37400d1f46c75d07826827c2d1d83</Anchor>
    <Abstract>Applies the function pl_SquaredI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4862070ae473f11d8d3cd39f67bb597b</Anchor>
    <Abstract>Applies the function pl_CubedI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga294ad0430bddd01329f1669ccec50165</Anchor>
    <Abstract>Applies the function pl_SignI() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9d8441a5ff9a7868507b90281f71bac4</Anchor>
    <Abstract>Applies the binary operator function pl_AddI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1044495b15ceee2d94fde0b1523b7ecd</Anchor>
    <Abstract>Applies the binary operator function pl_AddI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga10a852256ee7d148e41407275b8d7969</Anchor>
    <Abstract>Applies the binary operator function pl_AddI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga28df41da92ff7e28945e4fab9b9f3671</Anchor>
    <Abstract>Applies the binary operator function pl_SubI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8fbeddc23cdcba3b088fe901d5a0a9cb</Anchor>
    <Abstract>Applies the binary operator function pl_SubI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4565351fe92f87ae0b3091e21f3996c9</Anchor>
    <Abstract>Applies the binary operator function pl_SubI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4bf74fe26785059ed5ea49bf6dd52ddf</Anchor>
    <Abstract>Applies the binary operator function pl_MulI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7f8a31bd1154ba7d2fd908bbc95032bb</Anchor>
    <Abstract>Applies the binary operator function pl_MulI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga105b462abc7c4bec72654c2d2b2300fe</Anchor>
    <Abstract>Applies the binary operator function pl_MulI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad392ec4dc408555d305a08f22247e48d</Anchor>
    <Abstract>Applies the binary operator function pl_DivI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac2688e6f2fd32c1c66d9a36aa38927fe</Anchor>
    <Abstract>Applies the binary operator function pl_DivI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3bd1e570e38170b8581bd31297be398d</Anchor>
    <Abstract>Applies the binary operator function pl_DivI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf55766f82861efc308cb27ca3cdb55c7</Anchor>
    <Abstract>Applies the binary operator function pl_ModI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf824c84b9570eb2a78b929092b9711bd</Anchor>
    <Abstract>Applies the binary operator function pl_ModI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabfcc9da82d32c4ed41beecc4ad0f45d1</Anchor>
    <Abstract>Applies the binary operator function pl_ModI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4b06f4957b852a2b1ad7a1b247fd225f</Anchor>
    <Abstract>Applies the binary operator function pl_MinI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5eccb19453db1df6a0f3958a8226784a</Anchor>
    <Abstract>Applies the binary operator function pl_MinI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5e9e70acda5a119135fbc82e6220f687</Anchor>
    <Abstract>Applies the binary operator function pl_MinI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf6442fadbab4d1e2eb86b9812ee1c24e</Anchor>
    <Abstract>Applies the binary operator function pl_MaxI() to each item in two input vectors. ...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga429ec9f6ac55507689114a20d4c6e1f7</Anchor>
    <Abstract>Applies the binary operator function pl_MaxI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad3749cd3025edf835a3116ccc8284c1c</Anchor>
    <Abstract>Applies the binary operator function pl_MaxI() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa8707fc2c5971d4be1a8108382422ae8</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaa64a88c5bc91ed469fcdbe7219ce211</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7d66ecd8498b33e1857efbe2a3ac6ef9</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga79c737b2ba3f64875b3649fbb3080ee9</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToI() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac39893f8373204e425f0f34bcbbdbda5</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac29e3ee934c7f8ae9765d2f6ee6ef42b</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3ccf703f03810b81b156dd09a63d11d7</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanI() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1f9a8e2b972c90edf2501ac656483f8d</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaddaf7a0c3fb1c45d88a4988dd4fb61fc</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1c98f03d1c1fbd9d36c4a2ea3993d454</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToI() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga956602d2330d3ac418a5cc4bf1b6470f</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToI() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafc727be9ce130c6ed634ac0e3344ccf7</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToI() to an input vector and a scalar val...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae938ed4c94dbd83e1b1e6884d84ae7c4</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8bf9ee90aa055866898c8e8ee7e4a9a6</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaac68c8bad455d3e325f03b4efee82c4</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2dbe022aef634f30ec035f3e358cad05</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToI() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae28610bf7c7642704e4e95c997c45e1d</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad13c7b0719ac14698a05396e51d81ef8</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0a07b1c095f1618b9e435208030ab295</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaba1d96772009a6a72759fbbce6c2d9b1</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga705fc269d20ccbb4a65ec4ba06047f43</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa07e16b479fe667305c1eb6cb58fb48e</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaab2f2b18d675de86c8bd0ab22b0069c</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5c58948b42e765bf35bf9a25a5517f66</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8ab51f918e5f224310543d1a1108b79a</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga816c96cdf9bf62ae49036d56997a3530</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga79d1a88d798330cce225856ff2bd4ada</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaea391baacba7e3280b9865b9f73bc33e</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf4a1113e48001c2e3c59b8689c666f46</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7047582a8a88cc77095bfb415881865c</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5291201e3acdb79f4246f590c353fe31</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5e54d52c083a3f47aad7ab1d3d0e1963</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9416c1bd04ede9807a6c8701831618a6</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga242cc9632999ab543935a6e668c259c1</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshI() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga06de67ae8eaa0bcb14716ff0fa47b5cb</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacd1b9273022d1b40e8f8cd859ac31be2</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshI() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaabed7205a1945e904de37dbfbf75e176</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4628aacee0d33f6522c08ac073af7fc4</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga178500f79643b94a3ca9778db4b86733</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1e85623c051371912b1b22764420b713</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabb0f97f1a9d3b73918a55f8f18e8c683</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupI_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabca5edfd82ba65c9b7c94e59e422dd13</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillLL_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad3ee24cc25f55581a0d8dccba3ff99e4</Anchor>
    <Abstract>Fills a vector with a constant. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearLL_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac00220a1d88503bc9df4f37586bd5e24</Anchor>
    <Abstract>Fills a vector with zeros. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampLL_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacfa09e6fcec0b6d9349f93591fc39305</Anchor>
    <Abstract>Fills a vector with a ramp. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineLL_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaecd3a26788e857ddb110b697f8b59bc0</Anchor>
    <Abstract>Fills a vector with a line. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7992ed92f6e76514299b1b4761802f94</Anchor>
    <Abstract>Applies the function pl_MoveLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga12f5eacda36cca2749376d9b835f99e2</Anchor>
    <Abstract>Applies the function pl_IncLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0db139b6fc464cd567c180c3452ba49e</Anchor>
    <Abstract>Applies the function pl_DecLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga905857db2ae0fe626c727277d2b987d3</Anchor>
    <Abstract>Applies the function pl_NegLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga696c065a0cab2097dddb586b452f9791</Anchor>
    <Abstract>Applies the function pl_AbsLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5dc78be4f8e137a15716fe538acd4733</Anchor>
    <Abstract>Applies the function pl_SquaredLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0637204146ac2d58ce9d011552987961</Anchor>
    <Abstract>Applies the function pl_CubedLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga29c7f308d20ff36cfe447b5ed7f56237</Anchor>
    <Abstract>Applies the function pl_SignLL() to each item in a vector. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2cede05b9c891d50277cf1c4c4910d24</Anchor>
    <Abstract>Applies the binary operator function pl_AddLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga621bf3db853b5a79bcc8ccb1f49b854a</Anchor>
    <Abstract>Applies the binary operator function pl_AddLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad811d502747515a3c277d16a6d384221</Anchor>
    <Abstract>Applies the binary operator function pl_AddLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2d0c489c12f96004e071304a4304efc6</Anchor>
    <Abstract>Applies the binary operator function pl_SubLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga817e99f5875f1d50566652abc5f7c910</Anchor>
    <Abstract>Applies the binary operator function pl_SubLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga338251a7244946f691149ea76efed82d</Anchor>
    <Abstract>Applies the binary operator function pl_SubLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7d72a5d75144ad2d239376798fa7af5f</Anchor>
    <Abstract>Applies the binary operator function pl_MulLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga731796d6b89b538cfc13eb6e730f9b14</Anchor>
    <Abstract>Applies the binary operator function pl_MulLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga44b06f6558ee24ce0050d1292659f0d2</Anchor>
    <Abstract>Applies the binary operator function pl_MulLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga932969df0326915b430a5d8ff0f2c3ea</Anchor>
    <Abstract>Applies the binary operator function pl_DivLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa8ffb2b91b96381fd3f1c3616986c98a</Anchor>
    <Abstract>Applies the binary operator function pl_DivLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga694de4bec70d2358d0c55a838d9bb310</Anchor>
    <Abstract>Applies the binary operator function pl_DivLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5a28439775ddf508116485e455e13b2d</Anchor>
    <Abstract>Applies the binary operator function pl_ModLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3f2219762e387488fa077e59d2c9fbe4</Anchor>
    <Abstract>Applies the binary operator function pl_ModLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaa17b1beb10e0e320b6ce1bd885e7a66</Anchor>
    <Abstract>Applies the binary operator function pl_ModLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2db9fe0f690b69cade8956b005b98234</Anchor>
    <Abstract>Applies the binary operator function pl_MinLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga40f42c6fcb1a3d47273c35230fe5a023</Anchor>
    <Abstract>Applies the binary operator function pl_MinLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2dc864b87e4c97229f26ba114f1cd176</Anchor>
    <Abstract>Applies the binary operator function pl_MinLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabe3223784606cd49c503ffc01ba2f7a3</Anchor>
    <Abstract>Applies the binary operator function pl_MaxLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae60cb870796c258e0efdd97ed5741a09</Anchor>
    <Abstract>Applies the binary operator function pl_MaxLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9b2ed54939d8d32e519375ce4ebc294f</Anchor>
    <Abstract>Applies the binary operator function pl_MaxLL() to an input vector and a scalar value. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4fc42811f9f84b5c7a7eb1a4d6be07fd</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7e9c40db92ce9a1fd0670111b1df5170</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2cccb5cfec944add448ed323f1cf3744</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5c5d4af340cff2ff197b93f137e5f0ca</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToLL() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5d862581f1250b0ce48fd973640cb0d6</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga96e4bc35f3bdb221a78fe58ee8e7f5b3</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabe7ecb536563b878a4e8684c475a7fcb</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanLL() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa7ae82aed3589da933669c4c601dcf7f</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae5845a7a4baee22ac9937e7f81c8c019</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga211d481c4d8ea4d9ca4736274552f8bd</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToLL() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0bb64c6ade51dac974c9ae425b92a1d0</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToLL() to an input vector and a scalar va...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga159ccc038cab60dfcdc962f64697e5a5</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToLL() to an input vector and a scalar va...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad2ba9ea0036e3f4900ed137819f7adf0</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad530dfe817741df06be8c77c406460b6</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf6ac6e3aefd6952600abb747e392c5df</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1efebc1438d02be9a0eda6bd5f1d4205</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToLL() to each item in two input vectors...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacf6e4867346acc05412b601dfdbebed5</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8b4d7f0ff5802abd96327024f9aa4666</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacf7016b63863ee971dcf4f05546716dc</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaff24169945324c7be00f8ce8c004f7f8</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga98a389818496a7d5a7dcf2f8a79cf1ca</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab5f19311e8c3e0ca7845e1141156deab</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaefc3c280c4dad057e1a388f5306b3bc8</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadc268b50b3634f9905ce097d88ffd355</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4f8aa49082dcfc9a3df0510c1a05f852</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0abf428d0f23942b470a4820fa3f960d</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0e3fc0d624179d86a92fc532d3da02f9</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9f7be637d8eca7414f7d652969a8d6e3</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae527896de571f8cd2f4cd4e33f022df0</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga094533b744cabe4b9f1ab1885f52393e</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadfe0b5ade715148afff9db4b9a1c157d</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga40fa57f028d0f166594aa86ead3f8c5d</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa6b45d9bed4583acda924fb84dac6f23</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf3e805541a1b90ffcaf4ca5bc05fe9fb</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshLL() to each item in two input vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga793267003f0a2b1c83ac8979c41e3960</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6056958bae73d7188486e2369d492c03</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshLL() to an input vector and a scalar value...</Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga46a694fc19a6fadfe070433d15c6230f</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa1022a155509d155b54ce69dfbbfd3da</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae198b8cafedab729dcd4c6f800dd080d</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaddb0ea55f42bdc4f054d6a17d019b761</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac5727105454dab6b79ffebd0ee4a043f</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupLL_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0532d3466fc5d22b20fab7e643842c79</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table. </Abstract>
    <DeclaredIn>plank_Vectors.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralLayerFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Abstract>A neural layer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralLayerFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Anchor>gadd0cec9e248e081f0a99fe832413c7ea</Anchor>
    <Abstract>An opaque reference to the Plank NeuralLayerF object. </Abstract>
    <DeclaredIn>plank_NeuralLayer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralLayerF_InitNumNodesAndPrevious</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Anchor>ga023d71b6299b257a3fda612ea8ca053e</Anchor>
    <Abstract>Initialise a Plank NeuralLayerF object. </Abstract>
    <DeclaredIn>plank_NeuralLayer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralLayerF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Anchor>gaaf66a7e40088029f7ad7d155c3b1f7ec</Anchor>
    <Abstract>Deinitialise a Plank NeuralLayerF object. </Abstract>
    <DeclaredIn>plank_NeuralLayer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNetworkFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Abstract>A neural network. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNetworkFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Anchor>ga41d21c0f8a17e595812cde801c5bfe3e</Anchor>
    <Abstract>An opaque reference to the Plank NeuralNetworkF object. </Abstract>
    <DeclaredIn>plank_NeuralNetwork.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNetworkF_InitWithLayersAndRange</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Anchor>ga135ac7b822cb9feb3e4411717c677e03</Anchor>
    <Abstract>Initialise a Plank NeuralNetworkF object. </Abstract>
    <DeclaredIn>plank_NeuralNetwork.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNetworkF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Anchor>ga5c66264ad7b8d8b9ee43842cd5312dc4</Anchor>
    <Abstract>Deinitialise a Plank NeuralNetworkF object. </Abstract>
    <DeclaredIn>plank_NeuralNetwork.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNodeFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Abstract>A neural node. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNodeFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>ga86ac3adc51083e916a5ad462b644dda0</Anchor>
    <Abstract>An opaque reference to the Plank NeuralNodeF object. </Abstract>
    <DeclaredIn>plank_NeuralNode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNodeF_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>gaa0b6aa8916062cd782bb4bbb739024cd</Anchor>
    <Abstract>Initialise a Plank NeuralNodeF object. </Abstract>
    <DeclaredIn>plank_NeuralNode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNodeF_InitWithNumWeights</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>gaf187313d2a95ebf61e486343bd3043b0</Anchor>
    <Abstract>Initialise a Plank NeuralNodeF object. </Abstract>
    <DeclaredIn>plank_NeuralNode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNodeF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>gaece3a6d5e6fcf42bdf085608a3bd0e52</Anchor>
    <Abstract>Deinitialise a Plank NeuralNodeF object. </Abstract>
    <DeclaredIn>plank_NeuralNode.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankModules</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_modules.html</Path>
    <Abstract>Plank modules.... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFundamentals</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_fundamentals.html</Path>
    <Abstract>Plank fundamentals. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_classes.html</Path>
    <Abstract>Plank classes... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_functions.html</Path>
    <Abstract>Plank functions... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankMiscFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Abstract>Plank misc functions... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertUIToUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>gacdd2be88bc1206379d9fd8e86e43c578</Anchor>
    <Abstract>Convert an unsigned 32-bit int into to an unsigned 24-bit int. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertUI24ToUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>ga200d9d962f6945ae7a03904cf61972c5</Anchor>
    <Abstract>Convert an unsigned 24-bit int into to an unsigned 32-bit int. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertIToI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>gae7cec87db0f96fa11a3c8e3e473c1db7</Anchor>
    <Abstract>Convert a 32-bit int into to a 24-bit int. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertI24ToI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>ga6115d419b21f57abf58bed38a33297ac</Anchor>
    <Abstract>Convert a 24-bit int into to a 32-bit int. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FourCharCode</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>ga41809d65db515317f5a731edde6d8bcd</Anchor>
    <Abstract>Convert four characters to a int as used by IFF file formats to identify data chunks. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankInternalMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_internal_macros.html</Path>
    <Abstract>Plank internal macros... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankCoreConcepts</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_core_concepts.html</Path>
    <Abstract>An outline of the core concepts used in Plank. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankRNGClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Abstract>A simple, fast, cross-platform random number generator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankRNGRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga4b77483ed0e59c1b55fb0b6682ef82cb</Anchor>
    <Abstract>An opaque reference to the Plank RNG object. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga86aca40f3469cb412b633883f65f25dc</Anchor>
    <Abstract>Create and initialise a Plank RNG object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>gaf8c9d1bec2fe0ab8c5568e8917197209</Anchor>
    <Abstract>Create a Plank RNG object and return an oqaque reference to it. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga6daa15c83f5bb03d4eb8a843eb41f729</Anchor>
    <Abstract>Initialse a Plank RNG object. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga0349fc5f9b97046d43a8546d193827f2</Anchor>
    <Abstract>Deinitialse a Plank RNG object. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>gabf41c3146297725bd10f022b0121927b</Anchor>
    <Abstract>Destroy a Plank RNG object. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Seed</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga2bc680ab31e54bd5f950bfd874ba3317</Anchor>
    <Abstract>Seed a Plank RNG object. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Next</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga7366f413a659c0633e5ef89595a032cc</Anchor>
    <Abstract>Generate a random integer. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_NextInt</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga8f577823c323a83c0aa5418db3d79f0a</Anchor>
    <Abstract>Generate a random unsigned integer over a given range. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_NextFloat</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga6f3a1cd9c95780cbb782f3234c4e1150</Anchor>
    <Abstract>Generate a random float between 0 and 1. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_NextDouble</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>gaf1d82fa1ba755fe6399767b9b88967b6</Anchor>
    <Abstract>Generate a random double between 0 and 1. </Abstract>
    <DeclaredIn>plank_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkModules</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_modules.html</Path>
    <Abstract>Plink modules.... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkFundamentals</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_fundamentals.html</Path>
    <Abstract>Plink fundamentals... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_classes.html</Path>
    <Abstract>Plink classes... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkInternalMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_internal_macros.html</Path>
    <Abstract>Plink internal macros... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkCoreConcepts</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_core_concepts.html</Path>
    <Abstract>An outline of the core concepts used in Plink. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkSawProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_saw_process_f_class.html</Path>
    <Abstract>A sawtooth generator process. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkTableProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_table_process_f_class.html</Path>
    <Abstract>A wavetable generator process. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkWhiteNoiseProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_white_noise_process_f_class.html</Path>
    <Abstract>A white noise generator process. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkBinaryOpMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_binary_op_macros.html</Path>
    <Abstract>Binary operator process macros. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkBinaryOpProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_binary_op_process_f_class.html</Path>
    <Abstract>A binary operator processes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkMulAddProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_mul_add_process_f_class.html</Path>
    <Abstract>A multply-add process. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkUnaryOpMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_unary_op_macros.html</Path>
    <Abstract>Unary operator process macros. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkUnaryOpProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_unary_op_process_f_class.html</Path>
    <Abstract>A unary operator processes. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkBinaryOpFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Abstract>Binary arithmetic operator functions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gafc7e8c54945637744307dec82f5133b3</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;+&amp;#39; operator. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gab65369300d68a8a223b319e898ba7e69</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;-&amp;#39; operator. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gafabed700da2286c796d43098e0e25619</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;*&amp;#39; operator. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gad3d978b8988c1e8f4ce301d4561c7ee9</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;/&amp;#39; operator. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga44fea55213c3decc9a14c99e4028e343</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;&amp;#39; operator. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga030804440e70b9c69fc5079c97afbf90</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;&amp;#39; operator (float). </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga4da5044afda73b20b532aabd35539de1</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;&amp;#39; operator (double). </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga59c5662568559d966345908092157c76</Anchor>
    <Abstract>Returns 1 if the inputs are equal otherwise returns 0. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga6e80d23de8bb2a70b21840f4601e0748</Anchor>
    <Abstract>Returns 1 if the inputs are not equal otherwise returns 0. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga18986c2efc11c1b4e8f160d29cf322bd</Anchor>
    <Abstract>Returns 1 if the a is greater than b otherwise returns 0. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gad35df42771725856c02c958e8b937e9a</Anchor>
    <Abstract>Returns 1 if the a is greater than or equal to b otherwise returns 0. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga4de9a758833eee106c7f0e2b2b4291c9</Anchor>
    <Abstract>Returns 1 if the a is less than b otherwise returns 0. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga8a811eb561d5a1a8a8367e45b9c70954</Anchor>
    <Abstract>Returns 1 if the a is less than or equal to b otherwise returns 0. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga200bfe3083524b301ecbae72604a6196</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga66c9f1e77e3975cbb05640416e97a940</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga386d1dbba85746e1be9d45df68f1b5d7</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gadfff7f72b9db21817b772904247fcaf1</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga69637fc6407fc31bde056b409396a799</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga3ec8519856e13a308e89e2de8562fbfe</Anchor>
    <Abstract>Returns . </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga77ecdae2b5a7ba9e7142aa94d260f3bc</Anchor>
    <Abstract>Returns the absolute difference between the input arguments. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gae7eddf754552484f4d29cd7dc7410171</Anchor>
    <Abstract>If a is less than b returns 0 otherwise return a. </Abstract>
    <DeclaredIn>plonk_InlineBinaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga27790adabeefca86454c44449ce83296</Anchor>
    <Abstract>Returns minimum of a and b. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gacbc430682d8a68a0314ab44145bfa2c9</Anchor>
    <Abstract>Returns maximum of a and b. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gaa27c46fd6e4b760a1be8088e2aa20bf9</Anchor>
    <Abstract>Returns a raised to the power b. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga6074c96b40121fce682ae09cfe0e2645</Anchor>
    <Abstract>Returns the input argument squared. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga3e90359a8b3a78880e08332a0862e2a0</Anchor>
    <Abstract>Returns the input argument cubed. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkMiscArithmeticFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Abstract>Miscellaneous arithmetic functions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga698a3ee89bfd0973c649a46b6c07a4cd</Anchor>
    <Abstract>Returns minimum of a, b and c. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga4170e3fbab12665ffccd381fb38c328f</Anchor>
    <Abstract>Returns minimum of a, b, c and d. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga0a0e876d193e04d3b6ff0d8b7822927d</Anchor>
    <Abstract>Returns maximum of a, b and c. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga37b1627fb19ae71ea315891b7fc8397e</Anchor>
    <Abstract>Returns maximum of a, b, c and d. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkUnaryOpFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Abstract>Unary arithmetic operator functions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga6a3022ba793581b39e78cf78ef83b1cc</Anchor>
    <Abstract>Returns the absolute of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineCommonOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gabc0a0c1b941a6f4249efe4da957fe4a1</Anchor>
    <Abstract>Just returns the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga2359712299cd213282371307fc5b6ad4</Anchor>
    <Abstract>Increment by 1. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga5758a8272e0cdd50ef018ba8df7b5ba6</Anchor>
    <Abstract>Decrement by 1. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaed97a174668c3993df09464fe7ff5fbe</Anchor>
    <Abstract>Returns the logarithm base 2 of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga8e09496da8795a111ab16ec3869d7610</Anchor>
    <Abstract>Returns the negative of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga6b3176667186f5fef6f9f5efc238204d</Anchor>
    <Abstract>Returns the reciprocal of the input argument (i.e, ). </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gab399ee6d2f8ccbcc2c9fad1932981cad</Anchor>
    <Abstract>Returns the sine of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gacbfe225d31293c837f33d0927020d0a6</Anchor>
    <Abstract>Returns the cosine of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga1418b55737c6630e7b110aaa68a06fc3</Anchor>
    <Abstract>Returns the tangent of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga6c3921813be11094f4e3fd8fcfb6ca47</Anchor>
    <Abstract>Returns the arcsine of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gadca2d635ecbd1703e42176d68dc0c6dd</Anchor>
    <Abstract>Returns the arcosine of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga5e0c1de7d0ee09149ac4694f012bde77</Anchor>
    <Abstract>Returns the arctangent of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga8e3b86e9234786d5ccbf805b221f7dfb</Anchor>
    <Abstract>Returns the hyperbolic sine of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga7f96e8f12be7a045d934f27f724d0752</Anchor>
    <Abstract>Returns the hyperbolic cosine of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaa1d72668c1fa115a5989764e65afd1f5</Anchor>
    <Abstract>Returns the hyperbolic tangent of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaf948787b822c5f0cd5059f8cd496d242</Anchor>
    <Abstract>Returns the square root of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga9f3d9ed02e5e1a6b85c4a82ac2e220b9</Anchor>
    <Abstract>Returns the natural logarithm of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga28a31867e2cf4f9b4dc3ddfc3fe9a151</Anchor>
    <Abstract>Returns the logarithm base 10 of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaef6caf2c220fe16b4b77ed512b04c768</Anchor>
    <Abstract>Returns the exponent of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga337e00eb1a4dbc877a9d502c0b0208a2</Anchor>
    <Abstract>Returns the input argument rounded up to the next highest integer. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaa0f51ec88be7c460c88f72e5a3506c92</Anchor>
    <Abstract>Returns the input argument rounded down to the next lowest integer. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga5a662ef5e3f0ad10607261a6c31d8158</Anchor>
    <Abstract>Returns the fractional part of the input argument. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gac49c29efe49db57146e4af9cd3b05274</Anchor>
    <Abstract>Returns 0 if the input is 0, -1 if the input is negative or 1 if the input argument is positive...</Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga9710edd72880e512366d222437e94553</Anchor>
    <Abstract>Returns the input argument converted from MIDI note numbers to frequency (in Hz). ...</Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga0ed94e7e44433d89133ee34b3e310f35</Anchor>
    <Abstract>Returns the input argument converted from frequency (in Hz) to MIDI note numbers. ...</Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gab5cd1f2cb44129a945db011fb1835b8c</Anchor>
    <Abstract>Returns the input argument converted from linear amplitude to decibels where 0dB is an amplitude of 1...</Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga1e0e8f35253a808588f24a93b482ad9a</Anchor>
    <Abstract>Returns the input argument converted from decibels to linear amplitude where 0dB is an amplitude of 1...</Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>q2bw</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga22f4dce03d90e8c748f001fb580d50bc</Anchor>
    <Abstract>Returns the input argument converted from q to bandwidth in octaves. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bw2Q</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga01061bd4999d6f6cb7a1697ce1edaf6f</Anchor>
    <Abstract>Returns the input argument converted from bandwidth in octaves to q. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga6e3e64ce5713fe186680bf0b957e7287</Anchor>
    <Abstract>Returns the input argument converted from degrees to radians. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga49d48312bc03b83a05ad557cedd4a7e9</Anchor>
    <Abstract>Returns the input argument converted from radians to degrees. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga369156006ac4d84c29e2471fc29f840e</Anchor>
    <Abstract>Returns the input argument distorted. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gabf9b4bd37fac2afcd9557c100e5aa84e</Anchor>
    <Abstract>Returns the input argument with infinities, NaNs and denormallised numbers removed. </Abstract>
    <DeclaredIn>plonk_InlineUnaryOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkModules</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_modules.html</Path>
    <Abstract>Plonk modules.... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkFundamentals</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_fundamentals.html</Path>
    <Abstract>Plonk fundamentals... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkUnitCategogies</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_unit_categogies.html</Path>
    <Abstract>Plonk units... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkContainerClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_container_classes.html</Path>
    <Abstract>Other Plonk container classes... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkOtherUserClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_other_user_classes.html</Path>
    <Abstract>Other Plonk user classes... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NoLock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>Lock</Scope>
    </TokenIdentifier>
    <Path>group___plonk_other_user_classes.html</Path>
    <Anchor>ggab95046aacdff47710fc1e20f5730caada4b01f1f100c0a5dfa1d26a513302366f</Anchor>
    <Abstract>Doesn&amp;#39;t actually lock. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutexLock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>Lock</Scope>
    </TokenIdentifier>
    <Path>group___plonk_other_user_classes.html</Path>
    <Anchor>ggab95046aacdff47710fc1e20f5730caadae7a02be4189b19e727ed979922da6eb1</Anchor>
    <Abstract>Uses a mutex to lock. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpinLock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>Lock</Scope>
    </TokenIdentifier>
    <Path>group___plonk_other_user_classes.html</Path>
    <Anchor>ggab95046aacdff47710fc1e20f5730caada0cd353fc5af5908107d8980ef63d227c</Anchor>
    <Abstract>Uses a simple spin lock. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ThreadSpinLock</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>Lock</Scope>
    </TokenIdentifier>
    <Path>group___plonk_other_user_classes.html</Path>
    <Anchor>ggab95046aacdff47710fc1e20f5730caadaddce80bb3faaef3bed0837eea8582240</Anchor>
    <Abstract>Uses a spin lock that can be locked multiple times from the same thread. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkOtherUserFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_other_user_functions.html</Path>
    <Abstract>Other Plonk user functions... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkExtras</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_extras.html</Path>
    <Abstract>Plonk extra topics... </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkCoreConcepts</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_core_concepts.html</Path>
    <Abstract>An outline of the core concepts used in Plonk. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GeneratorUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___generator_units.html</Path>
    <Abstract>A list of all oscillator unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___filter_units.html</Path>
    <Abstract>A list of all filtering unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NoiseUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___noise_units.html</Path>
    <Abstract>A list of all noise/random-based unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___f_f_t_units.html</Path>
    <Abstract>Alist of FFT related UGens. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MathsUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___maths_units.html</Path>
    <Abstract>A list of all mathematical operator type unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnvelopeUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___envelope_units.html</Path>
    <Abstract>A list of all envelope type unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DelayUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Abstract>A list of all delay-based unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombLPFP1</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga3c05fa3e91b5971010a9bc5ec049312c</Anchor>
    <Abstract>A comb filter with a one-pole low-pass filter in the feedback loop. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombLPF</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga08d4f111a94ff880f375bef56b6e7b91</Anchor>
    <Abstract>A comb filter with a Butterworth low-pass filter in the feedback loop. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombHPFP1</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga360fee63dd6e4690e5706e4b01c52e78</Anchor>
    <Abstract>A comb filter with a one-pole high-pass filter in the feedback loop. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombHPF</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga9c454891d960c13bcea3a8f94c3cb00c</Anchor>
    <Abstract>A comb filter with a Butterworth high-pass filter in the feedback loop. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ControlUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___control_units.html</Path>
    <Abstract>A list of all control units classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SoundFileUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___sound_file_units.html</Path>
    <Abstract>A list of all soundfile-based unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConverterUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___converter_units.html</Path>
    <Abstract>A list of all converter unit classes and their brief descriptions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ResampleLinear</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___converter_units.html</Path>
    <Anchor>ga11b096c5634678adfdf8fca02b1d30f2</Anchor>
    <Abstract>Resampler. </Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MiscUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___misc_units.html</Path>
    <Abstract>A list of other various units. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AllpassDecayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AllpassDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_decay_unit.html</Path>
    <Abstract>An allpass delay setting the decay as a time to decay by 60dB. </Abstract>
    <DeclaredIn>plonk_DelayFormAllpassDecay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AllpassDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_decay_unit.html</Path>
    <Anchor>a65f97adc2d1d7e235f036337bdec7902</Anchor>
    <Abstract>Create an audio rate allpass delay. </Abstract>
    <DeclaredIn>plonk_DelayFormAllpassDecay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AllpassFFFBUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AllpassFFFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_f_f_f_b_unit.html</Path>
    <Abstract>An allpass delay setting the feedforward and feeback coefficient directly. </Abstract>
    <DeclaredIn>plonk_DelayFormAllpassFFFB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AllpassFFFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_f_f_f_b_unit.html</Path>
    <Anchor>ab1dd6b0615dd91686bd65d63f4d4a42a</Anchor>
    <Abstract>Create an audio rate allpass delay. </Abstract>
    <DeclaredIn>plonk_DelayFormAllpassFFFB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArrayAllocator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ArrayAllocator</Scope>
    </TokenIdentifier>
    <Path>class_array_allocator.html</Path>
    <Abstract>Default array de/allocation. </Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArrayAllocator&lt; Type * &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ArrayAllocator&lt; Type * &gt;</Scope>
    </TokenIdentifier>
    <Path>class_array_allocator_3_01_type_01_5_01_4.html</Path>
    <Abstract>Pointer array de/allocation. </Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArrayAllocatorBuiltIn</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ArrayAllocatorBuiltIn</Scope>
    </TokenIdentifier>
    <Path>class_array_allocator_built_in.html</Path>
    <Abstract>Built-in numerical types array de/allocation. </Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicExtended</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicExtended</Scope>
    </TokenIdentifier>
    <Path>class_atomic_extended.html</Path>
    <Abstract>Enables atomic operations on a pointer with additional security. </Abstract>
    <DeclaredIn>plonk_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicOps</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AtomicOps</Scope>
    </TokenIdentifier>
    <Path>class_atomic_ops.html</Path>
    <Abstract>Type-independent atomic operations. </Abstract>
    <DeclaredIn>plonk_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicValue</Scope>
    </TokenIdentifier>
    <Path>class_atomic_value.html</Path>
    <Abstract>Enables atomic operations on a range of types. </Abstract>
    <DeclaredIn>plonk_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicVariableChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Abstract>Atomic variable channel. </Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Anchor>a3abb1e2656fbe211fe51d6d0a7e76768</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Anchor>abe3308ee16f52608b094e86b6a39f9a5</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicVariableUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicVariableUnit</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_unit.html</Path>
    <Abstract>Atomic variable unit. </Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AtomicVariableUnit</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_unit.html</Path>
    <Anchor>a166ad3b50f39b033ae5328c710e8efc7</Anchor>
    <Abstract>Create control rate variable. </Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AudioFile</Scope>
    </TokenIdentifier>
    <Path>class_audio_file.html</Path>
    <Abstract>Some audio file common constants. </Abstract>
    <DeclaredIn>plonk_AudioFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Abstract>Audio file reader. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a91c6f09f07144b27a3c471cac221fef4</Anchor>
    <Abstract>Creates a null object. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>acd5197ab6a5633d282b00ee8ca115cce</Anchor>
    <Abstract>Creates an audio file reader from the given path. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a4fae789f74cde1fb142e1877b2f0ea7f</Anchor>
    <Abstract>Creates an audio file reader from the given path. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a71e8caa99af2787fc0e671402db48743</Anchor>
    <Abstract>Creates an audio file reader from the given path. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a7622c2ced52f8fd17f8d4579f2b97eee</Anchor>
    <Abstract>Creates an audio file reader from the given path. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>aca8ca71c557c90e669e0911086bb8121</Anchor>
    <Abstract>Creates an audio file reader from the given path. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>ab37320834aaca236233b02069a1614c6</Anchor>
    <Abstract>Creates a multiple audio file reader from the given paths. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a6a877c22ed952368897e76197d4024e8</Anchor>
    <Abstract>Creates a multiple audio file reader from the given paths. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a8e00d73442c7b991373949eefe477425</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a7afa4ad6506034a5a46fa4b56f82dcfa</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFormat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>ab8d57185a09de44b04d9fff47b08f36e</Anchor>
    <Abstract>Get the format of the audio file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEncoding</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>acf09b7b7e84a7c162c5e2eba33d0ab24</Anchor>
    <Abstract>Get the encoding of the audio file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a911c0d5a6c1e94ee9d4949592d7f9fd4</Anchor>
    <Abstract>Get the sample type of the audio file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBitsPerSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a423a9b7beee125b073992ff609d11b2b</Anchor>
    <Abstract>Get the number of bits used per sample in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBytesPerFrame</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a2c543d259e48a66735a75763a545a502</Anchor>
    <Abstract>Get the number of bytes in each frame of the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBytesPerSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a7534092f159e205e366e0569dfa79c8f</Anchor>
    <Abstract>Get the number of bytes in each sample of the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a0041e6bb522fcfab98301e3acdbc4902</Anchor>
    <Abstract>Get the number of channels in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setDefaultNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a618c450de7be3b45e292940e30e6216f</Anchor>
    <Abstract>Set the default number of channels in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDefaultNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a8ae9380e7406b3385606299cf2f2f9e3</Anchor>
    <Abstract>Get the default number of channels in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a2adf996462c40019ef92967b064124fc</Anchor>
    <Abstract>Get the sample rate of the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a097fd1078c6e04549d0238613a6201db</Anchor>
    <Abstract>Get the total number of frames in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFramePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>af54d47d541a56f209f348780b0607ddd</Anchor>
    <Abstract>Get the current frame position. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFramePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a6995bb02f18922073167bbe675288690</Anchor>
    <Abstract>Set the frame position to a particular frame. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFramePositionOnNextRead</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>ac759079c8110601c768c6f91514c5021</Anchor>
    <Abstract>Set the frame position to a particular frame just before the next read operation. ...</Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resetFramePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a027ffeaf848113e7c55a4bbbe5264c44</Anchor>
    <Abstract>Resets the frame position back to the start of the frames. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a8b43360e8a1064cd92c88bdf9410f40b</Anchor>
    <Abstract>Read frames into a pre-allocated NumericalArray and apply scaling. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readFramesDirect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a65a7a9947d893acb8d02414945e65d5d</Anchor>
    <Abstract>Read frames into a pre-allocated NumericalArray without scaling. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a3abfb7f1b2254fe334007853b49c66db</Anchor>
    <Abstract>Initialises a Signal object in the appropriate format for the audio in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>aabbc97b09651e22218b7d9ee4aad79ac</Anchor>
    <Abstract>Read frames into a pre-allocated Signal object and apply scaling. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readSignalDirect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a976fb4e0accd6ba807d623c8d5bd7a91</Anchor>
    <Abstract>Read frames into a pre-allocated Signal object without scaling. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readAllFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a49e682a902cccff63f74fcf159e70103</Anchor>
    <Abstract>Reads all the frames in the file and returns them in an interleaved array. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator NumericalArray&lt; SampleType &gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a55fd28500e07b6e0138ac7a0dc1fa1bd</Anchor>
    <Abstract>Reads all the frames in the file and returns them in an interleaved array. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator SignalBase&lt; SampleType &gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a4fad929c705efae231628bd5a2903718</Anchor>
    <Abstract>Reads all the frames in the file and returns them in Signal object. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOtherSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>aaf7f73f0409b845d559e453157d421be</Anchor>
    <Abstract>Reads all the frames in the file and returns them in Signal object. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>af5445c9c65eb83accaf7e1eb7916dcff</Anchor>
    <Abstract>Reads all the frames in the file and returns them in Signal object. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isReady</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a39512009b122fa46eb1eb50375f4eb6b</Anchor>
    <Abstract>Determines whether the audio data is ready to be read. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a979c7c92bd446e70e9f7af0df76d748f</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AudioFileWriter</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_writer.html</Path>
    <Abstract>Audio file writing class. </Abstract>
    <DeclaredIn>plonk_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileWriter</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_writer.html</Path>
    <Anchor>a0058f5d1e72d0f7d4835e9c03e460054</Anchor>
    <Abstract>Get the number of channels in the file. </Abstract>
    <DeclaredIn>plonk_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileWriter</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_writer.html</Path>
    <Anchor>acd68615a2565e9599a02ee213ba33c17</Anchor>
    <Abstract>Get the sample rate of the file. </Abstract>
    <DeclaredIn>plonk_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioHostBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Abstract>An abstract class to interface with audio devices. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioHostBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a9d258693a850ff3916ff2a800dd1d99e</Anchor>
    <Abstract>Constructor. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~AudioHostBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>abec35a069c21d0a696213484a3f32817</Anchor>
    <Abstract>Destructor. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a436cf4142284601cf572d80ada7b51af</Anchor>
    <Abstract>Determine whether the audio device is running. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIsPaused</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a80628815ab5569ebe59c990fdfa05f6a</Anchor>
    <Abstract>Determine whether the audio device is paused. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputUnit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a6cd8a8cc470b06328d8e2d701015d2d9</Anchor>
    <Abstract>Get a reference to the output unit. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a311e87228b807a08fb9415c115405da3</Anchor>
    <Abstract>Get the number of audio inputs. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>af95509ffb33d36f2c44c7a5059048fdd</Anchor>
    <Abstract>Get the number of audio outputs. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredHostSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ac84aa04a6798b2eec554f8da83e6da22</Anchor>
    <Abstract>Get the current preferred sample rate for the host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredHostBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aa3d6f27e1279813d7882f8acefe5357a</Anchor>
    <Abstract>Get the current preferred block size for the host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredHostSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a77ff52e60c0b1203f1135d902e59a3df</Anchor>
    <Abstract>Set the host&amp;#39;s preferred sample rate. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredHostBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>abef9f7e9f80e0a1eba09cf857938b401</Anchor>
    <Abstract>Set the host&amp;#39;s preferred block size. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredGraphBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a50f2963c1f1e927f53549355dbb37449</Anchor>
    <Abstract>Get the current preferred block size for the graph. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredGraphBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aa330a3a0c13ebf45cdc5eebf797ead62</Anchor>
    <Abstract>Set the graph&amp;#39;s preferred block size. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a97e22b16e99cf8c2b3c3223441e9ceea</Anchor>
    <Abstract>Set the number of audio inputs required. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a3b86efabd19949082d704f54aa1362db</Anchor>
    <Abstract>Set the number of audio inputs required. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOtherOptions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a5233dc06e3164004226e8ff61f4ab6eb</Anchor>
    <Abstract>Get other (normally platform dependent) options. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a032ebd726ac376f5b99ebd74948ba32c</Anchor>
    <Abstract>Get the input buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ac7aab8a036a1e7c8f398a678867eb4a0</Anchor>
    <Abstract>Get the input buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a6324afb86b6f59ad6ed75eef5e5032b5</Anchor>
    <Abstract>Get the output buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a53b0048b4954e2b314696db270812a3a</Anchor>
    <Abstract>Get the output buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHostName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a4d5cf02b8df0d3934449b527b0072317</Anchor>
    <Abstract>Get the name of the audio host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNativeHostName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a9f3d7131d5e3b466319783f4362eefa4</Anchor>
    <Abstract>Get the name of the native host audio API. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ab79046689f535c13ef7e4317d36ab266</Anchor>
    <Abstract>Get the name of the audio input device. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ad46ac3e85653530dead5e504c1f73984</Anchor>
    <Abstract>Get the name of the audio output device. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCpuUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a958e9e5a8a1c7dc5b9eed9c5094d8e61</Anchor>
    <Abstract>Get the current CPU usage for the DSP loop. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a21d2959b9d731a3b226682f1fb87af87</Anchor>
    <Abstract>Start the host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a461a85d786386a56216fc80057b4f657</Anchor>
    <Abstract>Stop the host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>constructGraph</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aecd49bc3c60a304a69cf2476b47035ba</Anchor>
    <Abstract>This must be implemented by your application. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setIsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a822c844b24b89b97ed0e5b88ac032362</Anchor>
    <Abstract>Set a flag to indicate the audio host is running. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base64</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Base64</Scope>
    </TokenIdentifier>
    <Path>class_base64.html</Path>
    <Abstract>Base64 encoding and decoding. </Abstract>
    <DeclaredIn>plonk_Base64.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Abstract>A utility class for reading and writing binary files. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a3d0f10cc9ccdc8bb5d6cb648096fc5a7</Anchor>
    <Abstract>Creates a null object. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ac4e67ed5965986db1c77111f1b2c5bf8</Anchor>
    <Abstract>Creates a binary file reader from the given path. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ad7465018287eaaf34b05ce15141ea4f6</Anchor>
    <Abstract>Creates a binary file reader from the given path. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a8e61b1ff78693bd03ebbc87653ebc017</Anchor>
    <Abstract>Creates a binary file reader from the given path. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a204a9c30fc73cd3ff69c5883f75fa581</Anchor>
    <Abstract>Creates a binary file reader from the given path. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>aa899e81a61130cc67514c0ff03788f2b</Anchor>
    <Abstract>Memory stream. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a95a7e2c729b3080cfa03a8ae94a7c53e</Anchor>
    <Abstract>Creates a multiple binary file reader from the array of files. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ae44cc94b641221314da2c157c4293c61</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>aafe776f527c875a94f4172dc2e2b458a</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a6e239f68604c2bc2139f342d84ffbb20</Anchor>
    <Abstract>Gets the position of the file stream. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a8f840e835687f42f5452f203702f4e90</Anchor>
    <Abstract>Sets the position of the file stream. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a3b880ba0f8446a56288b1c8afe538bdc</Anchor>
    <Abstract>Sets the position of the file stream to the end of the file. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>afff34250a0c8e9107d8980f8554678a9</Anchor>
    <Abstract>Determines if the file stream is positioned at its end. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a46d688b70f0cbe705b5f69d1fa348987</Anchor>
    <Abstract>Reads a numerical value from the file. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>afb2565c47b7001b6e72f04bc7d0bba36</Anchor>
    <Abstract>Reads a value or array from the file. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a8844f876f06a1e28ed9b7b46eba940c1</Anchor>
    <Abstract>Write a numerical value to the file. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ae343de37e61e0a652e39ace0ccdfd5b7</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chunkID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a0912399f74e6b731494479fab172d51d</Anchor>
    <Abstract>Creates a chunk name identifier. </Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryOpChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Abstract>For applying binary operators. </Abstract>
    <DeclaredIn>plonk_BinaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Anchor>a2ec64e8340693fb27ff469c3c0812116</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_BinaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Anchor>acf67be1020f44a4597b24c544f279e5a</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_BinaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Bits</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Bits</Scope>
    </TokenIdentifier>
    <Path>class_bits.html</Path>
    <Abstract>Some useful bitwise functions. </Abstract>
    <DeclaredIn>plonk_InlineMiscOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Abstract>Block channel. </Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Anchor>ac173d940de43107905bb0aeff6930abe</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Anchor>abf22cc3fd3d27970ed7803a11dfed26a</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Abstract>A specialised Variable&lt;int&gt; for handling block sizes. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a3267344c93ac784230c999d152425200</Anchor>
    <Abstract>To catch a potential programming error. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a2c7c7a4a9f8585b2cc414a392126dbf8</Anchor>
    <Abstract>Create BlockSize with an int. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>aeadcdd13e4f698280b8578823abcda5a</Anchor>
    <Abstract>Create BlockSize from an IntVariable. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a422cfa94141bf1c527ab73e48dad8a08</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a796cbc111d7f3ca22ef67096da2dc4e3</Anchor>
    <Abstract>Create a block size converting from another type. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aaee8f7b83d0852076b6251679289dcde</Anchor>
    <Abstract>Default constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc64133e0e95c4c3f3fa55c9edbe77e1</Anchor>
    <Abstract>Initialised with a specific internal. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae28f084e871562a27b62ae420d0f82dc</Anchor>
    <Abstract>Copy constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a03775764169975aa6bdd58cd5e729700</Anchor>
    <Abstract>Initialised with a specific value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a23024f58133373d58666fbe1325a950e</Anchor>
    <Abstract>Initialised with a pattern/sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a086d7da52f4416ea5814c4ec06e67768</Anchor>
    <Abstract>Initialised with a pattern/sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab51b36e8035550e747a7d612551816e0</Anchor>
    <Abstract>Create a Variable that converts from one type to another. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a607f32d2dfcdfeef6d5ea68d42328136</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5c2bed144a52f71a5ff057cc70e2490a</Anchor>
    <Abstract>A convenience for setValue(). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a039e7aa6f46e5115f8a835612a7607f5</Anchor>
    <Abstract>Returns the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValuePtr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae001f8395a0aac15d7b663fd48f9190f</Anchor>
    <Abstract>Returns the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator int</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4b62e9398f59e797f196f291023b9ec8</Anchor>
    <Abstract>Returns the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a972257a7d4905e8a6ba879934b17a5fd</Anchor>
    <Abstract>Returns the next value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae00152b8b3b8151421857deea2dc02f7</Anchor>
    <Abstract>Sets the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>binary</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6f0b057793e46b0d507d3289759d3fdd</Anchor>
    <Abstract>Builds a binary operation from two source Variables. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unary</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a0f335dbaa25a63de85abe98822f0ed</Anchor>
    <Abstract>Builds a unary operation from a source Variable. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa68a9b3bed392f5c0653edbe1121d704</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a033c3627b51039f5954622e189228fd3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a96c3c016f3ae35c028ac56e5fdcc3948</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af616ff1720bb62c5cdf38d99b65347d0</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abe8eb76afbc9a1333c93c76b4ffc47a5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4a100f4394a7b50a039e816934320a5d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab3aad47f5d35845de82bdcc23cebadeb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a70df26faaaba6fba941b7309ef63e759</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a117662f99ba5006e975a296e36c3272a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and the ri...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab1632233c3e21db6b7c0cad3c6dfccd0</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a29ca1669dc169d0474a3ebe069f44415</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac0b9acb346941b6c3b0e1905dc7125dc</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2813ae66a082bb4bb35cf55624c1373d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6677f06ba42fa81dfa9d25510e9f48ed</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae38887e43624c752febab4c7a5f83ba4</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a010e5ea46c6bd6dabcfba7469de1eadb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a155b826972cc4231b632050b6c91ef53</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac163622355c742768be010e1ff92a6a1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1ad67bd1ced8bb985499cd30dde40dd7</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>added8094a984f8614c6283ed1fd2bc91</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9aa7fa7eca31ecc4250f3820a710223e</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7e1863e95635b70172259e64e936a370</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a56af338b3e7e6f4753a61e0f31918949</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;round&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8db05fd3d96b322c9b9ec9bb91e7780c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a96247f9e282807c9cd8947550293a25c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa92fc450dad45deb2abb39bdd52ffaa3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a238cef7603e8d0d415e3f7daf0bb32ac</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afc5eae44d9318aafcbff7570e752411b</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0de9c9e3bfab9f39d393af00ef8bb3dc</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abf6e2cc24577ff2fcd2d00e46894e7e1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac4716adbc550382141748e51651388c3</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa6ba9c04c94a5d8cfbb86135792c4066</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab248631c5e92ab5e8328409bbaa382c2</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8daac18d512be9ffda57f5841a117419</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8d25fc97924496cee6266341ab8bb060</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac87257b81e06b9c667ec693f2eff1727</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3cd7209371976db10771558c44d53b70</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0318a28a8d6e1558bcb3062bc4c0c7df</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a746e9bef06f6957a423abe18f63f539c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4476c58b465cee6df36ca4bb62363fc5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a474f5e8f941787e3fc3c69e01b4e935f</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5cc80091d0fb77dc676a69d055883bcb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad9ebbe4f1df6e9c3bb3a235261a65070</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9294ea3c179b72ec3df293f7d98eb2c6</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a53d337065b2658d74b200285097b8f09</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0cabd713245207a11cc5b6eb800d78cc</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a21c0c28e5ddb449b1f13c9442e3980</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab529838d787722400b03f83e7911f2d3</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae57b2ee912fab03207de0aab994d7c53</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc1fdb679811567fb8fba82241def51e</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and the ri...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a857d2e28f6b8c67802773dcf7d73942a</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0f638daa507070519be46d206f8ff30f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5dd813b0fd9b0ad412a9104b439ba0dc</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5e3e78231ddccb73fc55311932d8fb8e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a927ebf29a03105d958b653ba4f638045</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac9e340dc450ac5da2d63dcae019189e4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad37a53370b744ed217547bcdc966f746</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a47d81bb38a371b5838095fe7a9db33a4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3ca439cdaaef249bda5bb4656e64aa4b</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a11fc366fdbf6af4f4f820ae8e15ae93f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4a774315b8ebef5ff656104afd0aa8b0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a511c687ecead8fd322a71bb61a78c546</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1a67a72574226c9928ef0a243d88e9b4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>acae49e93412ff41badc4619a22acd6c5</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab60e3b698985ac6ce498a648218d258f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab267f7758e724b9059651176699f1993</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>adeeba19e7c51d87b5f64e30255c461f0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6b5feb083a416628daa9b20529136ccf</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae5af611a700e5ad9b1c52dc18623bc87</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a73ef7254575856f8a4d7f7206f609f0e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a73d3d45c4b54b431c70674c5449801f0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;squared&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5d7d33dd4d80978564a571d428c912b4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7e092b4ae2a1ac06855e39d42d165015</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa51a0bbf36eecaa4247510afc0c82dd6</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9f934eaa82ff690293a391535a77fe6d</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9e4e2b77a3e6b5c9658d0e6d08f47b5e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af618ee51529ef7f028245f7a3f93dea4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae703472fce347e00e50c786bb5b8faf2</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a17a859fa38ca289f1741ff7bf3e6c3e3</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac7eecf837c73bb80330648a681c4a763</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afc95585b298035aba9819a543f429d0f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab331f4d9b978e2273d253b961ba78fb1</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8c585a15ab2ab4d1e555cb31cda73115</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;distort&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a87ecc4996f67a1eb13dbb4913a9d2f09</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afebaf666d804900a9d430733ba60f5ac</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac06acbf768ec112154e48881b551181c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afa7cc3ee279465c2e6dcaade5524cb93</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a44f9ee14363eb19a3a31b462be733fd7</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a885a985740d002802d1d0fcf8a82c403</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>ac022f97ed4f42a64936fdc0f3479c1cb</Anchor>
    <Abstract>Gets the default block size. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getControlRateBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a0b63924e21af360f0e44fdaccb56c14d</Anchor>
    <Abstract>Gets the default control rate block size. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFractionOfDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a692b89b56a9004c70c1aeaf8f6cb1d09</Anchor>
    <Abstract>Create a block size that is a fraction of the default block size. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMultipleOfDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a5130faee8cc5b8862d39ecfecca4c16c</Anchor>
    <Abstract>Create a block size that is a multiple of the default block size. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noPreference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>aa6ada18e533ad70d58aae4e0549fab84</Anchor>
    <Abstract>A dummy block size used to indicate no preference. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlockSize1</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a908f1f70af4835dfe259c9f914c563b9</Anchor>
    <Abstract>Get a block size of 1. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>afcc989dcc540a3d62f67d939f16c6457</Anchor>
    <Abstract>Select a block size based on a unit&amp;#39;s preference and its inputs. </Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>Variable&lt; int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac6051f1df5e6fa73a0ea5a9c015ee901</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BlockUnit</Scope>
    </TokenIdentifier>
    <Path>class_block_unit.html</Path>
    <Abstract>Copies data from a buffer to an output block. </Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockUnit</Scope>
    </TokenIdentifier>
    <Path>class_block_unit.html</Path>
    <Anchor>a7b72cf806c6c7c0491fd9abc8b9687ed</Anchor>
    <Abstract>Create an audio rate block generator. </Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockUnit</Scope>
    </TokenIdentifier>
    <Path>class_block_unit.html</Path>
    <Anchor>aed8ef1a07bb927df7ff91764f05f8602</Anchor>
    <Abstract>Create an audio rate block generator. </Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_p_f_unit.html</Path>
    <Abstract>Bandpass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_p_f_unit.html</Path>
    <Anchor>aa9881bc69068cfe59bc0aec661421b30</Anchor>
    <Abstract>Create a bandpass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_p_f_unit.html</Path>
    <Anchor>a49fedf3fbbc053c0919ab236fd0b8595</Anchor>
    <Abstract>Create a control rate bandpass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BRFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BRFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_r_f_unit.html</Path>
    <Abstract>Bandreject (band-elimination) filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BRFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_r_f_unit.html</Path>
    <Anchor>a8f789818837d410554d4082c28721d48</Anchor>
    <Abstract>Create a bandreject filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BRFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_r_f_unit.html</Path>
    <Anchor>a4749f3495aaedba740fb7b0203bee6e9</Anchor>
    <Abstract>Create a control rate bandreject filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BufferQueueRecordChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BufferQueueRecordChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_buffer_queue_record_channel_internal.html</Path>
    <Abstract>Send buffers of recorded data. </Abstract>
    <DeclaredIn>plonk_BufferQueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BufferQueueRecordChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_buffer_queue_record_channel_internal.html</Path>
    <Anchor>a0106765d38db4dfede8cd3fd208cff71</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_BufferQueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BufferQueueRecordChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_buffer_queue_record_channel_internal.html</Path>
    <Anchor>a70c7b02576c61faefcff25e07a94d1bb</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_BufferQueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BufferQueueRecordUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BufferQueueRecordUnit</Scope>
    </TokenIdentifier>
    <Path>class_buffer_queue_record_unit.html</Path>
    <Abstract>Queue unit. </Abstract>
    <DeclaredIn>plonk_BufferQueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BufferQueueRecordUnit</Scope>
    </TokenIdentifier>
    <Path>class_buffer_queue_record_unit.html</Path>
    <Anchor>a10802ab2e7b8699cbdb2467a2806c92a</Anchor>
    <Abstract>Create an audio rate block generator. </Abstract>
    <DeclaredIn>plonk_BufferQueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusBuffer</Scope>
    </TokenIdentifier>
    <Path>class_bus_buffer.html</Path>
    <Abstract>Enables the storage of globally accessible buffers to be used as signal busses. </Abstract>
    <DeclaredIn>plonk_Bus.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusBuffer</Scope>
    </TokenIdentifier>
    <Path>class_bus_buffer.html</Path>
    <Anchor>a2cb1ea18fe8f6c818727639f87bd862c</Anchor>
    <Abstract>Write data with a given time stampe start to the bus. </Abstract>
    <DeclaredIn>plonk_Bus.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusBuffer</Scope>
    </TokenIdentifier>
    <Path>class_bus_buffer.html</Path>
    <Anchor>abd3ad66715e77da7dc65419fdf3eed6c</Anchor>
    <Abstract>Read data from the bus with a given time stamp. </Abstract>
    <DeclaredIn>plonk_Bus.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusReadChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Abstract>Bus read channel. </Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Anchor>a06b46ab936746b57462da282f3811db9</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Anchor>ac0135a69cf7a7a58c3706e9a0b763fa6</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusReadUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_unit.html</Path>
    <Abstract>Reads data from a Bus. </Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BusReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_unit.html</Path>
    <Anchor>a1f0fc076f32146c9f9b00da54c14c465</Anchor>
    <Abstract>Create an audio rate bus reader. </Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusWriteChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Abstract>Bus write channel. </Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Anchor>a3a0dd5b4948a52fe1f637bfa3057f3da</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Anchor>a995c1ece3dcd7eba56085ae0a31162c8</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusWriteUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusWriteUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_unit.html</Path>
    <Abstract>Write data to a Bus. </Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BusWriteUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_unit.html</Path>
    <Anchor>ac827ead7040479156130903742389edf</Anchor>
    <Abstract>Create an audio rate bus writer. </Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Abstract>A single output signal. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>ab7eaf4e3fd5527c073278b4dbe4c0452</Anchor>
    <Abstract>Default constructor. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a3151beffa0f9c901b9100666bbd1e188</Anchor>
    <Abstract>Construct a channel with a specific internal type. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>abfc0bb2780501eb7a012884802cda4e8</Anchor>
    <Abstract>Get the first channel from a one-channel unit. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a63e01bb026eb3d73601851b1094a0e28</Anchor>
    <Abstract>Get the first channel from a one-channel unit. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>ae498bfacd7faa18b3f1a451ab08bcdc0</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>ac591b46c587bf555ef73fcac2219d347</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>afd9a2e561eda8b912f7f023a3e552537</Anchor>
    <Abstract>Construct a channel that generates a constant. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsToProcess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>afa38cf8d0f4363a695056c9770dcb02e</Anchor>
    <Abstract>Returns true if this unit needs to process for the given timestamp. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a6696996610312a7c53805056ec79de50</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelData</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelData</Scope>
    </TokenIdentifier>
    <Path>struct_channel_data.html</Path>
    <Abstract>Base class for channel state data. </Abstract>
    <DeclaredIn>plonk_ChannelData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal.html</Path>
    <Abstract>The base class from which most ChannelInternals should be derived. </Abstract>
    <DeclaredIn>plonk_ChannelInternal.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a0d5725cc71173dcff25b08f992acf1ea</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>aa4e59e6ac19208c22de024fe2bda39bc</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelInternalBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelInternalBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_base.html</Path>
    <Abstract>The templated base class for all internal channel processes. </Abstract>
    <DeclaredIn>plonk_ChannelInternalBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a0d5725cc71173dcff25b08f992acf1ea</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>aa4e59e6ac19208c22de024fe2bda39bc</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelInternalCore</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Abstract>The base, core class for all internal channel processes. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a0d5725cc71173dcff25b08f992acf1ea</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>aa4e59e6ac19208c22de024fe2bda39bc</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelMixerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Abstract>Mix all channels in a single unit to a single channel. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Anchor>ae99695dbb26b26113faad0e9fe25f63a</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Anchor>af388639c73905f4d9fd47ed34adce022</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombDecayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>CombDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_decay_unit.html</Path>
    <Abstract>A comb filter setting the decay as a time to decay by 60dB. </Abstract>
    <DeclaredIn>plonk_DelayFormCombDecay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>CombDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_decay_unit.html</Path>
    <Anchor>a7d336ba7359cbde4c1b713f59d791353</Anchor>
    <Abstract>Create an audio rate comb filter. </Abstract>
    <DeclaredIn>plonk_DelayFormCombDecay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombFBUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>CombFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_f_b_unit.html</Path>
    <Abstract>A comb filter setting the feedback amount directly. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>CombFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_f_b_unit.html</Path>
    <Anchor>ac43e14cc10dbbdd46010838047fe9416</Anchor>
    <Abstract>Create an audio rate comb filter. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombFilter1ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>CombFilter1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_filter1_param_unit.html</Path>
    <Abstract>A comb filter with a filter in the feedback loop (where the filter takes one parameter). </Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>CombFilter1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_filter1_param_unit.html</Path>
    <Anchor>a13ca4487e2afd20310e6f054a0182040</Anchor>
    <Abstract>Create an audio rate comb filter. </Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstantChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Abstract>For generating constants. </Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a98c447d3ffd4b8fd813c985198d3a439</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a68fdcf89e1ded9b6e7dfdded85f87c3d</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DCUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DCUnit</Scope>
    </TokenIdentifier>
    <Path>class_d_c_unit.html</Path>
    <Abstract>DC removal filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DCUnit</Scope>
    </TokenIdentifier>
    <Path>class_d_c_unit.html</Path>
    <Anchor>ab7b98dfe81f1d30ce3827f0a441834f5</Anchor>
    <Abstract>Creates a DC removal filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DCUnit</Scope>
    </TokenIdentifier>
    <Path>class_d_c_unit.html</Path>
    <Anchor>a44e2010392342d6c57159b2fd42c6d42</Anchor>
    <Abstract>Creates a control rate exponential deacy filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DecayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_decay_unit.html</Path>
    <Abstract>Exponential decay filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_decay_unit.html</Path>
    <Anchor>aa126e11ab1f77171e7bb08356f786b86</Anchor>
    <Abstract>Creates an exponential deacy filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_decay_unit.html</Path>
    <Anchor>a7b427dc25f25e20b10b6cb836cd6c0f7</Anchor>
    <Abstract>Creates a control rate exponential deacy filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay1ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay1_param_channel_internal.html</Path>
    <Abstract>Delay processor. </Abstract>
    <DeclaredIn>plonk_Delay1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay1_param_channel_internal.html</Path>
    <Anchor>a148aa72d26ce671b838dfe33a955e965</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Delay1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay2ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay2_param_channel_internal.html</Path>
    <Abstract>Delay processor with two control parameters. </Abstract>
    <DeclaredIn>plonk_Delay2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay2_param_channel_internal.html</Path>
    <Anchor>ae7e44939064036c3d9bb413681b6763f</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Delay2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay3ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay3_param_channel_internal.html</Path>
    <Abstract>Delay processor with two control parameters. </Abstract>
    <DeclaredIn>plonk_Delay3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay3_param_channel_internal.html</Path>
    <Anchor>a602b099bb2576a3da4ddf45f372cb792</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Delay3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay4ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay4ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay4_param_channel_internal.html</Path>
    <Abstract>Delay processor with two control parameters. </Abstract>
    <DeclaredIn>plonk_Delay4Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay4ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay4_param_channel_internal.html</Path>
    <Anchor>ae8a01ec0fcbc8ebaa90bd1e66cc79827</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Delay4Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DelayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DelayUnit</Scope>
    </TokenIdentifier>
    <Path>class_delay_unit.html</Path>
    <Abstract>Simple delay processor. </Abstract>
    <DeclaredIn>plonk_DelayFormDelay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Abstract>A dictionary class for storing key/value pairs. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a1d86bdbd4c09c1f8df5ad17162bb6ada</Anchor>
    <Abstract>Creates an empty dictionary. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>afc6c389dfa64984c8afb22d67fc0c538</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ab31d318b9c8288cfe441035b6136839b</Anchor>
    <Abstract>Creates a dictionary initialise with an array of key/value pairs. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValues</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a2b7ad3dfd1e62023c5fc063e9f31802f</Anchor>
    <Abstract>Returns the array of values. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getKeys</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a83ed3edd33080fbc502ea7da5e0047a3</Anchor>
    <Abstract>Returns the array of keys. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPairs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a0bb89703d9eecc0b0fe2d596daeab015</Anchor>
    <Abstract>Returns an array of the key/value pairs. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a6ee81b793caf6c652e9d6545ce848a13</Anchor>
    <Abstract>Put an item into the dicionary associated with the specified key. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a83c2739092b4a8d164b5c8d5575801d2</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a9d093afdbe6f6b7cdceadfae562c7e8d</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a41988ece0789b19039c7367a2abb3e72</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a873f52238cab2d0bcc35595d18081797</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>aee8b8fb99e32739a8c9f55a81c6ca01b</Anchor>
    <Abstract>Remove and return an item at the specified key. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keyForValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ac15f5b7945d4fc918e098015f11c0136</Anchor>
    <Abstract>Return the key for a particular value. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a17ce658ebb6fe914bb044e60a3c5ae6d</Anchor>
    <Abstract>Get a key at a particular index. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ae92215cec3ad9533f2aa85d761504945</Anchor>
    <Abstract>Get a value at a particular index. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a0f61cc9a425100dd854816641258cc8a</Anchor>
    <Abstract>Get a key at a particular index. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>af1abde84ed749710596e8130a2c75bd9</Anchor>
    <Abstract>Get a value at a particular index. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a4af4232a588a2777343008309a2d1faf</Anchor>
    <Abstract>Get the number of items stored in the dictionary. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a63c0c7e86f5935ea9ae4dce27be28355</Anchor>
    <Abstract>Get the number of items stored in the dictionary. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a57cd3afaeee69cab52b38b1a34e9da5c</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiffChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DiffChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_diff_channel_internal.html</Path>
    <Abstract>Difference. </Abstract>
    <DeclaredIn>plonk_DiffChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>DiffChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_diff_channel_internal.html</Path>
    <Anchor>ab2aa218f3cd9179aba297805c915b668</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_DiffChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>DiffChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_diff_channel_internal.html</Path>
    <Anchor>af5bfe6a9a4724f5ae5a1ed3c6299baaf</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_DiffChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiffUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DiffUnit</Scope>
    </TokenIdentifier>
    <Path>class_diff_unit.html</Path>
    <Abstract>Diff outputs the difference between successive samples. </Abstract>
    <DeclaredIn>plonk_DiffChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DiffUnit</Scope>
    </TokenIdentifier>
    <Path>class_diff_unit.html</Path>
    <Anchor>a57d79dd610508cc990ac9c05d8f0f856</Anchor>
    <Abstract>Create an audio rate sample rate differentiator. </Abstract>
    <DeclaredIn>plonk_DiffChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Endian</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Endian</Scope>
    </TokenIdentifier>
    <Path>class_endian.html</Path>
    <Abstract>A utility class to swap the endianness (byte-order) of one or more data elements. ...</Abstract>
    <DeclaredIn>plonk_Endian.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EndianIfBig</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>EndianIfBig</Scope>
    </TokenIdentifier>
    <Path>class_endian_if_big.html</Path>
    <Abstract>A utility class to swap the endianness (byte-order) of one or more data elements. ...</Abstract>
    <DeclaredIn>plonk_Endian.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EndianIfLittle</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>EndianIfLittle</Scope>
    </TokenIdentifier>
    <Path>class_endian_if_little.html</Path>
    <Abstract>A utility class to swap the endianness (byte-order) of one or more data elements. ...</Abstract>
    <DeclaredIn>plonk_Endian.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnvelopeChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Abstract>Envelope channel performs a series of breakpoints. </Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Anchor>ad79d5809d5b16e0d15e166b602e35e17</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Anchor>acc94f0a2e16c48876d583e6df0ee4ec2</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnvelopeUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>EnvelopeUnit</Scope>
    </TokenIdentifier>
    <Path>class_envelope_unit.html</Path>
    <Abstract>Envelope unit performs a series of breakpoints. </Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>EnvelopeUnit</Scope>
    </TokenIdentifier>
    <Path>class_envelope_unit.html</Path>
    <Anchor>a6d9ba57b2c959d64b1bff74992c6876d</Anchor>
    <Abstract>Create an audio rate envelope generator. </Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>EnvelopeUnit</Scope>
    </TokenIdentifier>
    <Path>class_envelope_unit.html</Path>
    <Anchor>a7087efba9e73c41707c54b0fd198be94</Anchor>
    <Abstract>Create a control rate envelope generator. </Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Abstract>FFT channel. </Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Anchor>af77c5e3abe973f0be23d554dd4a71969</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Anchor>a83d2bde9a0ebd89885ef3620e6a93bb3</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTEngineBase&lt; float &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Abstract>A platform independent FFT processing engine. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTEngineBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a0c3245666f4f363fa753018bd987322c</Anchor>
    <Abstract>Create a new engine with a particular FFT size. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTEngineBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>abe943aa0fd5fa019897aadc91329204a</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a02536062e3b3cb35bdac478ca41b371d</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>forward</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>ad231ed65b833f8e0dd21bdb792dd8b82</Anchor>
    <Abstract>Apply the FFT to the input and place the result in output. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>forward</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>aeb513354cc323fb1ada82c4e8929f6bd</Anchor>
    <Abstract>Apply the FFT to the input and place the result in output. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inverse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>acdda8a01c61f73f7897934412f052d0a</Anchor>
    <Abstract>Apply the inverse-FFT to the input and place the result in output. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inverse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>ae237edc455056077b0b46a714d3a7c72</Anchor>
    <Abstract>Apply the inverse-FFT to the input and place the result in output. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a8fa4584323f75cbf51ae61178ba80586</Anchor>
    <Abstract>Get the FFT size. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>halfLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a5413bd8ef03e6f596a74a1e0498a3217</Anchor>
    <Abstract>Get half FFT size. </Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FFTUnit</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_unit.html</Path>
    <Abstract>FFT Unit. </Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FFTUnit</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_unit.html</Path>
    <Anchor>a1224bc7edb0f00850b125890daf9f444</Anchor>
    <Abstract>FFTs a signal. </Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePath</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>FilePath</Scope>
    </TokenIdentifier>
    <Path>class_file_path.html</Path>
    <Abstract>File path construction, manipulation and operations. </Abstract>
    <DeclaredIn>plonk_FilePath.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePlayChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Abstract>File player generator. </Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Anchor>a53551e4b108ffeb88e61f9281569cab4</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Anchor>ab1d1d37c0726d40c302375652b5a886d</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePlayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilePlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_file_play_unit.html</Path>
    <Abstract>Audio file player generator. </Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilePlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_file_play_unit.html</Path>
    <Anchor>adbcc2cf5c59a0835569e15a6fe5f17a1</Anchor>
    <Abstract>Create an audio rate audio file player. </Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePlayUnit::Simple</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>FilePlayUnit::Simple</Scope>
    </TokenIdentifier>
    <Path>class_file_play_unit_1_1_simple.html</Path>
    <Abstract>A simple file player to handle buffering and sample rate conversion. </Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Abstract>A generic FIR/IIR filter. </Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Anchor>a51b642d49069ae930c19e904a79a7a9d</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Anchor>a4b6fe26ac0fd78e6de7e3da18831a2cd</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs1ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Abstract>Filter coefficient generator from one control parameter. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Anchor>aada67ea502eed0f355657d66b38a290c</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Anchor>a159799bb8c59e4b439f5b24eae122672</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs1ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_unit.html</Path>
    <Abstract>Filter coefficients generator for an IIR filter using one control parameter. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterCoeffs1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_unit.html</Path>
    <Anchor>ad340003b900e2ef01237b10540a2a801</Anchor>
    <Abstract>Filter coefficients from one control parameter. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs2ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Abstract>Filter coefficient generator from two control parameters. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Anchor>aea0fefbb1d8a3c469a2b150d160107d4</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Anchor>a09fd0c9704560ec6c42eca0d3c68a9ac</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs2ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs2ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_unit.html</Path>
    <Abstract>Filter coefficients generator for an IIR filter using two control parameters. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterCoeffs2ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_unit.html</Path>
    <Anchor>aa75b81ca3db4692037c20261c6418784</Anchor>
    <Abstract>Filter coefficients from two control parameters. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs3ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Abstract>Filter coefficient generator from two control parameters. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Anchor>a87970ef615ae4f5b8b6ae06166742735</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Anchor>af2c3ddfed9f9c8ff522ea4f0309c90ba</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs3ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs3ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_unit.html</Path>
    <Abstract>Filter coefficients generator for an IIR filter using three control parameters. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterCoeffs3ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_unit.html</Path>
    <Anchor>af89ce8a11b2c098aa7896117e2eb7812</Anchor>
    <Abstract>Filter coefficients from three control parameters. </Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::B2 &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::B2 &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_b2_01_4.html</Path>
    <Abstract>Butterworth 2nd order form. </Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1 &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1 &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1_01_4.html</Path>
    <Abstract>One-pole form. </Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1a &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1a &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1a_01_4.html</Path>
    <Abstract>One-pole form, special simplified case for low pass. </Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1b &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1b &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1b_01_4.html</Path>
    <Abstract>One-pole form, special simplified case for DC removal. </Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1c &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1c &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1c_01_4.html</Path>
    <Abstract>Asymetrical one-pole form, for low pass. </Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P2Z2 &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P2Z2 &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p2_z2_01_4.html</Path>
    <Abstract>Two-pole, two-zero form. </Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeBPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeBPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_b_p_f_base.html</Path>
    <Abstract>Two-pole, two-zero, band-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeBRFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeBRFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_b_r_f_base.html</Path>
    <Abstract>Two-pole, two-zero, band-reject filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeDecayBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeDecayBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_decay_base.html</Path>
    <Abstract>One-pole decay shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeHighShelfBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeHighShelfBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_high_shelf_base.html</Path>
    <Abstract>Two-pole, two-zero, high-shelving filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeHPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeHPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_h_p_f_base.html</Path>
    <Abstract>Butterworth 2nd order high-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeHPFP1Base</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeHPFP1Base</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_h_p_f_p1_base.html</Path>
    <Abstract>One-pole high-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLagAsymBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLagAsymBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_lag_asym_base.html</Path>
    <Abstract>One-pole aysmmetical lag shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLagBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLagBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_lag_base.html</Path>
    <Abstract>One-pole lag shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLowShelfBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLowShelfBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_low_shelf_base.html</Path>
    <Abstract>Two-pole, two-zero, low-shelving filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_l_p_f_base.html</Path>
    <Abstract>Butterworth 2nd order low-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLPFP1Base</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLPFP1Base</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_l_p_f_p1_base.html</Path>
    <Abstract>One-pole low-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeNotchBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeNotchBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_notch_base.html</Path>
    <Abstract>Two-pole, two-zero, notch EQ filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeRHPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeRHPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_r_h_p_f_base.html</Path>
    <Abstract>Two-pole, two-zero, resonant high-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeRLPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeRLPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_r_l_p_f_base.html</Path>
    <Abstract>Two-pole, two-zero, resonant low-pass filter shape. </Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_unit.html</Path>
    <Abstract>A generic FIR/IIR filter. </Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_unit.html</Path>
    <Anchor>a3c77ba97cddc51d0ef8cb62848d0ddd7</Anchor>
    <Abstract>Create a generic filter from the coefficients. </Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fix</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Fix</Scope>
    </TokenIdentifier>
    <Path>class_fix.html</Path>
    <Abstract>A generic fixed point numerical class. </Abstract>
    <DeclaredIn>plonk_Fix.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HarmonicSawUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HarmonicSawUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_saw_unit.html</Path>
    <Abstract>Harmonic sawtooth wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSawUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_saw_unit.html</Path>
    <Anchor>a219fc58728192ee0c91275a6cb9e9707</Anchor>
    <Abstract>Create an audio rate harmonic sawtooth oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSawUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_saw_unit.html</Path>
    <Anchor>ad7d4bdd281699619b76bdadfcb5d6582</Anchor>
    <Abstract>Create a control rate harmonic sawtooth oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HarmonicSquareUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HarmonicSquareUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_square_unit.html</Path>
    <Abstract>Harmonic square wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSquareUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_square_unit.html</Path>
    <Anchor>abdf9409fa8958b1bed53e08387131a5e</Anchor>
    <Abstract>Create an audio rate harmonic square wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSquareUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_square_unit.html</Path>
    <Anchor>a5fe0c0c4671d095c0cac7e273fbf47ec</Anchor>
    <Abstract>Create a control rate harmonic square wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HarmonicTriUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HarmonicTriUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_tri_unit.html</Path>
    <Abstract>Harmonic triangle wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicTriUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_tri_unit.html</Path>
    <Anchor>ac556ff9735fee3d49698ff6ac188f31b</Anchor>
    <Abstract>Create an audio rate harmonic triangle wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicTriUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_tri_unit.html</Path>
    <Anchor>a1576449cdd604163d3250a7ff3268e81</Anchor>
    <Abstract>Create a control rate harmonic triangle wave oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HighShelfUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HighShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_high_shelf_unit.html</Path>
    <Abstract>High-shelving (treble) filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HighShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_high_shelf_unit.html</Path>
    <Anchor>a023ca460b028b1eb37d00ba6dad02cc2</Anchor>
    <Abstract>Create a high-shelving filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HighShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_high_shelf_unit.html</Path>
    <Anchor>a76007a1caaefa175688abf198bfa2b28</Anchor>
    <Abstract>Create a control rate high-shelving filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HPFP1Unit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_p1_unit.html</Path>
    <Abstract>One-pole high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_p1_unit.html</Path>
    <Anchor>afbc10d5508f3e966d51056afe5558eb9</Anchor>
    <Abstract>Create a one-pole high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_p1_unit.html</Path>
    <Anchor>aec057b7a4341f9de22aa49ffd2fec4f9</Anchor>
    <Abstract>Create a control rate one-pole high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_unit.html</Path>
    <Abstract>Butterworth 2nd-order high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_unit.html</Path>
    <Anchor>a5b3f8ba6a66f310b98f890526a4e4e45</Anchor>
    <Abstract>Create a simple Butterworth 2nd-order high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_unit.html</Path>
    <Anchor>aa49588487c9e2590475ca6ed7688ada8</Anchor>
    <Abstract>Create a simple control rate Butterworth 2nd-order high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IFFTChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Abstract>IFFT channel. </Abstract>
    <DeclaredIn>plonk_IFFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Anchor>a5f2d55e7faff589f8d347768498c1275</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_IFFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Anchor>a1c13244fb3866511d3be24422d28b553</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_IFFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IFFTUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>IFFTUnit</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_unit.html</Path>
    <Abstract>IFFT Unit. </Abstract>
    <DeclaredIn>plonk_IFFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImpulseChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Abstract>Impulse generator. </Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Anchor>abb40e3c00eb14cafc6f17ad06164fe04</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Anchor>a5c0c95a84db6b4b4a948bce690e30ec3</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImpulseUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ImpulseUnit</Scope>
    </TokenIdentifier>
    <Path>class_impulse_unit.html</Path>
    <Abstract>An impulse generator. </Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ImpulseUnit</Scope>
    </TokenIdentifier>
    <Path>class_impulse_unit.html</Path>
    <Anchor>a5c7ba37dda0e16e65c78fef22e96b917</Anchor>
    <Abstract>Create an audio rate impulse oscillator. </Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ImpulseUnit</Scope>
    </TokenIdentifier>
    <Path>class_impulse_unit.html</Path>
    <Anchor>ad3a3b2cc50ad80d373d4b4a84066f783</Anchor>
    <Abstract>Create a control rate impulse oscillator. </Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputDictionary</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Abstract>For storing named Dynamic objects. </Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputDictionary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>aa9195863f264f8f6862e80477c03ea83</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>acbb83df5e4fa32283a471aaf591ae550</Anchor>
    <Abstract>Find the minimum Unit block size in this dictionary. </Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>a1c246911ba287f20fb7128eedadb0566</Anchor>
    <Abstract>Find the maximum Unit block size in this dictionary. </Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>a2f1736b42993b530ae0000070506f520</Anchor>
    <Abstract>Returns this dictionary with all the units containing only a single channel. </Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>aa21b83d48d840409efb41c7c6c551bb4</Anchor>
    <Abstract>Find the maximum number of channels in this dictionary (i.e., in unit, units and busses). </Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a1d86bdbd4c09c1f8df5ad17162bb6ada</Anchor>
    <Abstract>Creates an empty dictionary. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ab31d318b9c8288cfe441035b6136839b</Anchor>
    <Abstract>Creates a dictionary initialise with an array of key/value pairs. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>afc6c389dfa64984c8afb22d67fc0c538</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValues</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a2b7ad3dfd1e62023c5fc063e9f31802f</Anchor>
    <Abstract>Returns the array of values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getKeys</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a83ed3edd33080fbc502ea7da5e0047a3</Anchor>
    <Abstract>Returns the array of keys. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPairs</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a0bb89703d9eecc0b0fe2d596daeab015</Anchor>
    <Abstract>Returns an array of the key/value pairs. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a6ee81b793caf6c652e9d6545ce848a13</Anchor>
    <Abstract>Put an item into the dicionary associated with the specified key. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a83c2739092b4a8d164b5c8d5575801d2</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a9d093afdbe6f6b7cdceadfae562c7e8d</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a41988ece0789b19039c7367a2abb3e72</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a873f52238cab2d0bcc35595d18081797</Anchor>
    <Abstract>Return a value at the specified key. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>aee8b8fb99e32739a8c9f55a81c6ca01b</Anchor>
    <Abstract>Remove and return an item at the specified key. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keyForValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ac15f5b7945d4fc918e098015f11c0136</Anchor>
    <Abstract>Return the key for a particular value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a17ce658ebb6fe914bb044e60a3c5ae6d</Anchor>
    <Abstract>Get a key at a particular index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a0f61cc9a425100dd854816641258cc8a</Anchor>
    <Abstract>Get a key at a particular index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ae92215cec3ad9533f2aa85d761504945</Anchor>
    <Abstract>Get a value at a particular index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>af1abde84ed749710596e8130a2c75bd9</Anchor>
    <Abstract>Get a value at a particular index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a4af4232a588a2777343008309a2d1faf</Anchor>
    <Abstract>Get the number of items stored in the dictionary. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a63c0c7e86f5935ea9ae4dce27be28355</Anchor>
    <Abstract>Get the number of items stored in the dictionary. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>Dictionary&lt; Dynamic, int &gt;</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a57cd3afaeee69cab52b38b1a34e9da5c</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputTaskChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Abstract>Defer a unit&amp;#39;s processing to a separate task, thread, process or core. </Abstract>
    <DeclaredIn>plonk_TaskChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Anchor>a1a11c0b4ea2a4825e762578f22aa1607</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_TaskChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Anchor>a18f21154bc65945c3b0845f8236f453e</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_TaskChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputTaskUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>InputTaskUnit</Scope>
    </TokenIdentifier>
    <Path>class_input_task_unit.html</Path>
    <Abstract>Defer a unit&amp;#39;s processing to a separate task, thread, process or core. </Abstract>
    <DeclaredIn>plonk_TaskChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Int24</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Int24</Scope>
    </TokenIdentifier>
    <Path>class_int24.html</Path>
    <Abstract>An emulated 24-bit integer type. </Abstract>
    <DeclaredIn>plonk_Int24.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IOSAudioHostBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Abstract>An audio host for the iOS platform. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHostName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>adb926aecd3a29a8cb4db79956d3fe4b2</Anchor>
    <Abstract>Get the name of the audio host. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNativeHostName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>a90b3bb9a49cc5e1a550cef2cc2b4a00d</Anchor>
    <Abstract>Get the name of the native host audio API. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>a2af67d9b2e1b202d0f4cc2b812985e02</Anchor>
    <Abstract>Get the name of the audio input device. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>a94def7411b86a04c19b96493e624b53c</Anchor>
    <Abstract>Get the name of the audio output device. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCpuUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>a557d35294ade9a93f5eee219cbb738e5</Anchor>
    <Abstract>Get the current CPU usage for the DSP loop. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>a28861ae204fa3052dfed309e81e07a2e</Anchor>
    <Abstract>Start the host. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_audio_host_base.html</Path>
    <Anchor>a1884e4e4535fdb6215ed03aa98376256</Anchor>
    <Abstract>Stop the host. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioHostBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a9d258693a850ff3916ff2a800dd1d99e</Anchor>
    <Abstract>Constructor. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~AudioHostBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>abec35a069c21d0a696213484a3f32817</Anchor>
    <Abstract>Destructor. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a436cf4142284601cf572d80ada7b51af</Anchor>
    <Abstract>Determine whether the audio device is running. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIsPaused</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a80628815ab5569ebe59c990fdfa05f6a</Anchor>
    <Abstract>Determine whether the audio device is paused. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputUnit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a6cd8a8cc470b06328d8e2d701015d2d9</Anchor>
    <Abstract>Get a reference to the output unit. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a311e87228b807a08fb9415c115405da3</Anchor>
    <Abstract>Get the number of audio inputs. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>af95509ffb33d36f2c44c7a5059048fdd</Anchor>
    <Abstract>Get the number of audio outputs. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredHostSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ac84aa04a6798b2eec554f8da83e6da22</Anchor>
    <Abstract>Get the current preferred sample rate for the host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredHostBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aa3d6f27e1279813d7882f8acefe5357a</Anchor>
    <Abstract>Get the current preferred block size for the host. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredHostSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a77ff52e60c0b1203f1135d902e59a3df</Anchor>
    <Abstract>Set the host&amp;#39;s preferred sample rate. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredHostBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>abef9f7e9f80e0a1eba09cf857938b401</Anchor>
    <Abstract>Set the host&amp;#39;s preferred block size. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredGraphBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a50f2963c1f1e927f53549355dbb37449</Anchor>
    <Abstract>Get the current preferred block size for the graph. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredGraphBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aa330a3a0c13ebf45cdc5eebf797ead62</Anchor>
    <Abstract>Set the graph&amp;#39;s preferred block size. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a97e22b16e99cf8c2b3c3223441e9ceea</Anchor>
    <Abstract>Set the number of audio inputs required. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a3b86efabd19949082d704f54aa1362db</Anchor>
    <Abstract>Set the number of audio inputs required. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOtherOptions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a5233dc06e3164004226e8ff61f4ab6eb</Anchor>
    <Abstract>Get other (normally platform dependent) options. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a032ebd726ac376f5b99ebd74948ba32c</Anchor>
    <Abstract>Get the input buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ac7aab8a036a1e7c8f398a678867eb4a0</Anchor>
    <Abstract>Get the input buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a6324afb86b6f59ad6ed75eef5e5032b5</Anchor>
    <Abstract>Get the output buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a53b0048b4954e2b314696db270812a3a</Anchor>
    <Abstract>Get the output buffers. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>constructGraph</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aecd49bc3c60a304a69cf2476b47035ba</Anchor>
    <Abstract>This must be implemented by your application. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setIsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a822c844b24b89b97ed0e5b88ac032362</Anchor>
    <Abstract>Set a flag to indicate the audio host is running. </Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IOSUtilities</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_utilities.html</Path>
    <Abstract>Some utilties for the iOS platform. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pathInDirectory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_utilities.html</Path>
    <Anchor>a527e2254988795a2f5163b0def9524b3</Anchor>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Bundle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_utilities.html</Path>
    <Anchor>a8b9bd72133c0b4d4d2748b605ce79b45ab557f0412ff59686461da57d88798efe</Anchor>
    <Abstract>In the &lt;MyApp&gt;.app/ bundle, files can be placed here during compilation in Xcode. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Documents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_utilities.html</Path>
    <Anchor>a8b9bd72133c0b4d4d2748b605ce79b45ac23f9cc01ea7519ec25d10405927f8b1</Anchor>
    <Abstract>The application&amp;#39;s Documents directory, files here will be backed up during iTunes sync...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Temporary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_i_o_s_utilities.html</Path>
    <Anchor>a8b9bd72133c0b4d4d2748b605ce79b45a3cd58bb1fce12edae26bedc1a6ce7d68</Anchor>
    <Abstract>The application&amp;#39;s tmp directory, NB this is cleared when the device is restarted. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LagAsymUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LagAsymUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_asym_unit.html</Path>
    <Abstract>Exponential asymetrical lag filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LagAsymUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_asym_unit.html</Path>
    <Anchor>a599b374bf4be722dc3f5a834ad83ef1e</Anchor>
    <Abstract>Creates an exponential lag filter (one-pole low-pass filter). </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LagAsymUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_asym_unit.html</Path>
    <Anchor>a7d7a2ddd8fd8adae7c49e52d61ace480</Anchor>
    <Abstract>Creates a control rate exponential lag filter (one-pole low-pass filter). </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LagUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LagUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_unit.html</Path>
    <Abstract>Exponential lag filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LagUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_unit.html</Path>
    <Anchor>a56644135d9bf9335a3845b04d8686e45</Anchor>
    <Abstract>Creates an exponential lag filter (one-pole low-pass filter). </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LagUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_unit.html</Path>
    <Anchor>a86c6e0ff3332e320d299f489e3670832</Anchor>
    <Abstract>Creates a control rate exponential lag filter (one-pole low-pass filter). </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LinearPanChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Abstract>For linear panning across 2 channels. </Abstract>
    <DeclaredIn>plonk_LinearPanChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Anchor>af14fc76c8ae4f04f08ebf9b44ad2327e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_LinearPanChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Anchor>a811e07244c845d18609030292dfea398</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_LinearPanChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LinearPanUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LinearPanUnit</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_unit.html</Path>
    <Abstract>A linear panning unit. </Abstract>
    <DeclaredIn>plonk_LinearPanChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LockedValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LockedValue</Scope>
    </TokenIdentifier>
    <Path>class_locked_value.html</Path>
    <Abstract>A class that stores a value that is stored and retieved using a lock. </Abstract>
    <DeclaredIn>plonk_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LookupChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Abstract>Wavetable lookup generator. </Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Anchor>ae6618fec9e15761742dfd93b4ee15db7</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Anchor>a4493aef0c4620dae0046195976505673</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LookupUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LookupUnit</Scope>
    </TokenIdentifier>
    <Path>class_lookup_unit.html</Path>
    <Abstract>Wavetable lookup generator. </Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LookupUnit</Scope>
    </TokenIdentifier>
    <Path>class_lookup_unit.html</Path>
    <Anchor>a3c4bbe0bf913238c2b143d377ea96b43</Anchor>
    <Abstract>Create an audio rate signal player. </Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LookupUnit</Scope>
    </TokenIdentifier>
    <Path>class_lookup_unit.html</Path>
    <Anchor>a73e3fcfd63b98a1aac6cd2566605df23</Anchor>
    <Abstract>Create a control rate signal player. </Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LowShelfUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LowShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_low_shelf_unit.html</Path>
    <Abstract>Low-shelving (bass) filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LowShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_low_shelf_unit.html</Path>
    <Anchor>ab76033b4e3e79ba397b163f49f951ea0</Anchor>
    <Abstract>Create a low-shelving filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LowShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_low_shelf_unit.html</Path>
    <Anchor>a8abaa708d322cf710dd9b5158177378d</Anchor>
    <Abstract>Create a control rate low-shelving filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LPFP1Unit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_p1_unit.html</Path>
    <Abstract>One-pole low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_p1_unit.html</Path>
    <Anchor>a5f564eb64188ae26e9bb4becaaf4e789</Anchor>
    <Abstract>Create a one-pole low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_p1_unit.html</Path>
    <Anchor>a7a672ed7daefc43579140af8091b1c3f</Anchor>
    <Abstract>Create control rate a one-pole low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_unit.html</Path>
    <Abstract>Butterworth 2nd-order low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_unit.html</Path>
    <Anchor>ab68f9c65805da1f60b4491c1e7c9443c</Anchor>
    <Abstract>Create a simple Butterworth 2nd-order low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_unit.html</Path>
    <Anchor>a4567ee2529e67739617c2f0a76290f1e</Anchor>
    <Abstract>Create a simple control rate Butterworth 2nd-order low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Math</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Math</Scope>
    </TokenIdentifier>
    <Path>class_math.html</Path>
    <Abstract>Some useful maths constants. </Abstract>
    <DeclaredIn>plonk_Constants.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MixerUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Abstract>Mixer. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Anchor>ac6358840aff51693d2061dcab5f72c07</Anchor>
    <Abstract>Create an audio rate channel mixer. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Anchor>a9a3e9346d5ed3cf4844a40052c8f8d3a</Anchor>
    <Abstract>Create an audio rate unit mixer. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Anchor>a415f72cec6230bd0e6ef971441abcd05</Anchor>
    <Abstract>Create an audio rate unit queue mixer. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MulAddChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Abstract>For applying mul and add in one go. </Abstract>
    <DeclaredIn>plonk_MulAddChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Anchor>a912e28a2954a604835e8a9a155e821a8</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_MulAddChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Anchor>a1643fb9deb7f4430ac611d665a04fc88</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_MulAddChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NotchUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>NotchUnit</Scope>
    </TokenIdentifier>
    <Path>class_notch_unit.html</Path>
    <Abstract>Notch filter (i.e, parametric mid-EQ). </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NotchUnit</Scope>
    </TokenIdentifier>
    <Path>class_notch_unit.html</Path>
    <Anchor>ab53abe7abb0bdb64c2aa23b0ec4a2a14</Anchor>
    <Abstract>Create a notch filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NotchUnit</Scope>
    </TokenIdentifier>
    <Path>class_notch_unit.html</Path>
    <Anchor>a9561f93ddf666186f4c13e2d9afbcb13</Anchor>
    <Abstract>Create a control rate notch filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NullChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>NullChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_null_channel_internal.html</Path>
    <Abstract>For generating 0 (null) specifically. </Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a98c447d3ffd4b8fd813c985198d3a439</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a68fdcf89e1ded9b6e7dfdded85f87c3d</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Abstract>Stores arrays of simple numerical values. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONKSMARTPOINTERCONTAINER_DEEPCOPY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df538b5c22eefca40bbda399509e4c8</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad2c4bf652ce698fbfcc6b48560e872f2</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aacb62580c08a9529ae7bdfd4776c4739</Anchor>
    <Abstract>Construct a NumericalArray by copying a NumericalArray of a different type. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a459feb8e3dd1be19321cf668e6e77cfa</Anchor>
    <Abstract>Construct a NumericalArray by copying a ObjectArray of a different type. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0a725c439fea0bf8682236cc41072dfd</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArrayConcatOperatorsDefine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3cc8f8828424cf547cc8e4e284022f42</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6526ef4710bf9cb3828653bd09a2323a</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec with optional null termination. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a27ecf9517575656716efd64c2421f5d5</Anchor>
    <Abstract>Construct a NumericalArray from a null terminated source array. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9a8b714189c179bba002e0db4552950d</Anchor>
    <Abstract>Construct an array with a single value. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7ff1f849a31b9ab9184b746b8b89bfb5</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5aacd1e9a3176d10404a76c655878438</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a61d87f05779d4a3a9b85afb5574bf30f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae3298d2a687a30eeb7652cb0ec126bd9</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7a24716ebdee03fce916ab6bde2e5d60</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abacad6e8e2de13ad5af6571fb3f433b3</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right arg...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abcfec6e86cacd479898f836192804cde</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right ...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3c7e4449d8772d09f4e4f36c413b4066</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a87d46086364127395c4beff4ab0cd39c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and ...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a256d96eef169e351f9345d372e2a7c51</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right ar...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a67d74aec7b53783d36417ace9aa3620e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91ffeaa64cbdf6f62ac77d2b544a8f52</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1d2d3be12e69972711e8f12b3dcd9590</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adf8bfcdb66171f2c350cbf747c658a95</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1a51fd9f5c92039d99ece4ba6aac6b8a</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab2031fddca7fa3693a5f9ccef0361c56</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6c31c06e3872a7958942e60d10f491a7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adc56e95e2852e09abf18c6e607d55ade</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a933fd24e227654ffe0b64c01b6440d9e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee6c34cb18fd039e430d3711526677c2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aca8b93c4417b2ae5844cb2e2c91f8b29</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab8ee250cd7f4a510243f2b48448ebd41</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a979f6464d7f9b7db0a9bba737f39a6f4</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;round&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1496f0fde2b5066fe31f23411cf250e0</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a01ef711d91ada45a56d696c972726967</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argumen...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5016395dbe692b01d8d71429afe320b1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7beaf5dddb8ec1e04df2eb269e8e1061</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5ca184a84b8909f43a7669426ab75bd9</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5bdb220b37c700a11abf90d410afc7c6</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a603012061cf5710c93ea0d55fcac56b6</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adda6459a7c3fb1e0a19d0bf73a0e69c3</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9b0679667eb305341a8a5dab2e229096</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac6080a3eaca1156ede2d6b0eac59c9a2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9f7d0bcd674c136a85445300f4bb4276</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad1f340506fc435e4d3d2a42fb43f2672</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa6e11ed620e2308086433f6853ffc87c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac3eaf1c0134a2c8d525c8e35ebaef9b1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac46c703d2717027f0811b7b16bee8b8d</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8707e834d0b2e7fbb97b1ec19f593d01</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a363ed95c60ea4fa94ac43eeed2a05e96</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9602ab8f6789daa697975ccbcebcba93</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a383f5895662731257f7f742792436cea</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a69713dff9d72be1fda6e08796445bd3c</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1aaee717bd826e57456592d1067ac255</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a50cfa7d7cd308b6b55f5bc72eca37676</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and ...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3be96208a3fa3c60d7cb6b019dcbe926</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a74cf71d43eabaf6934d92bbc37977813</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae527e5217f2a50a49278ab4351ec6df1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8f692ca7c9e4ccba4d97f062af7423d7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7bef88d67caf9e48b3abf0606c43114e</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3b3dcabdb4b69b1ac38aa93f38750ee4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a17c3b2cd81dbb5a993d2c3499b7b4b03</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a026e15b0b590d47f92524095ed825e7d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac2c36b167d73636ad52594fdd80c0e90</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa57acae179c9bca876150700ba12f960</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a194b90e09654651ace0ab7012dab6981</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad14c84d56ef65f05ebd687078129aa08</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8357800856bf40122000e000ac61603d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac8eb392cda2b876a629c28404a353b03</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a87fd3cb4ac296df1cded1620ef85095b</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3648f3bd140748a9c2eaa6e214f5bcc7</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afb2c8023836126cebe2e655a8dbe215f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aed37c1a614785fa7998b4b5df7dacabc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad08c949be5fc9f4a42166ed5abaece40</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afe76f6f8924310fea64b9af75a2aa153</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9d33035941641df6af32c30bcf998682</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a50e9f29e1c6ff8aac6865e0263c5a4ab</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac27715339d2a16c3c1559c3e13cedb15</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adc2d9e3dc19cc98ec9b9305c07044fd3</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a28b2d6897b787a132ee243fc31825c38</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;squared&amp;#39; function to this one. ...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9e15020fccbaa50ac21414abe19f3f93</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae9ca73d7cf0714284fd5c5c2784f51c4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2e8de1992b2fc1595fa555874640932d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2f043f7110480dda022b0f31a75bdf68</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa2762bbe7728092d1c639ede955d2744</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>af5ec12838b228444f67ed02de8750049</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a137fbe32132c8a0ffc8483cee85a65d2</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35823ca2eb4cc149c5b5d5325a92f44f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a338da375ef16b007936baf38f1f3f15a</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a08d7acb162896bf5a16ac1a256ba917c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a773e7cabeffa9bb56db18109c02bcfdc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3c5cdbaaae5df820f8b739f3806db20a</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;distort&amp;#39; function to this one. ...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa91ee71738f92713e708be2867181ee3</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abfb8ad6d326dd5e8442c2eafcac2fffb</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a699c306c0700b6264dcdd9e151cfa7dd</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4f1171776c224c9b1370410469ac982c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a63e7070c30b5df16f1fef55cd8647c15</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a101ace1e49b4d50bc0f7c42be825ab2d</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>af8b9946ea130d57e18ff368333548c39</Anchor>
    <Abstract>Creates an empty array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f088cd226ecae84f2df495bf0947ec7</Anchor>
    <Abstract>Creates an array with a particular size/length. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae99f2e9c3d2b031f419d5a3a4a17381b</Anchor>
    <Abstract>Wraps an existing array in an ObjectArray. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1fa53ee2141b63883c68098b496a090c</Anchor>
    <Abstract>Copy constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae669045b3d6dfad956c989d9630c2f3c</Anchor>
    <Abstract>Create a copy of another array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab95b6ffd0f27b905554a17973137af9f</Anchor>
    <Abstract>Create an array with a single item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaadbed847983fc8fb2a46a9ce29ffb53</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6e8493adbcc71c1592875360bffaa6a7</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a03baa6c06a77a576a05e1898b9ccd19f</Anchor>
    <Abstract>Creates a deep copy of the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a57d2d868e31f8c0e2b21edb461c2f77e</Anchor>
    <Abstract>Sets a new size for the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2ab78a45b4be10cfd619f800bcd1d60f</Anchor>
    <Abstract>Sets the length of the array to zero. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6fb5345981765f2704f9a4e8dbc8f6c8</Anchor>
    <Abstract>Size is the actual number of elements of storage needed for the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sizeAllocated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abd7a4dcb6b92f01733a49ac887dcfd1d</Anchor>
    <Abstract>This is the memory allocated to the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a861101ff2f817b137a481fa4a62b41a3</Anchor>
    <Abstract>Length is the number of real elements of storage available. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memorySize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1ea3042b23181ecc74003379313dcc84</Anchor>
    <Abstract>Actual memory requirements of the array elements and the null terminator (if needed). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaa751e7a03cb2b3f8f067611ed1f1a41</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abf6b8c3cf474bd1c83a56e06be5d3f06</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const NumericalType *</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9058ab8b2528bb5c558c35b3a809c1b1</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator NumericalType *</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0a68d0a36a619621eaf328774f03f7a7</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNullTerminated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abfb405e23328df73fd7d35e9bbdf391f</Anchor>
    <Abstract>Returns whether this is a null terminated array or not. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNullTerminated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>adc8d49b21bb2b6b001e6a4f6bd440f1a</Anchor>
    <Abstract>Changes this array&amp;#39;s null terminator flag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>referTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae2236515507f1cfe0f9e44ecb63dabd4</Anchor>
    <Abstract>Force the internal array to refer to other data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aa15b17d07062a81fa7fbc0fb275d18af</Anchor>
    <Abstract>Adds an item in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f0f23ab21ae6bfe9e438686ac4ae7ed</Anchor>
    <Abstract>Adds several items in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6b2d22402553fb5e22ed7c2966d74de7</Anchor>
    <Abstract>Removes an item at the given index in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad675f23eada53adcadda78f096b3642d</Anchor>
    <Abstract>Places an item at the given index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a64873f1b21d3888d606f555da6a2014a</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0bc80ee77d245f592d75f480293937b6</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a01dda59cdcbad97e572fae969ec7e992</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a525a2021265a54a85212893f650f7deb</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad0ddd1b46e1b7ae32dd0e232ebcece5f</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3027a6cfd4eef94f604a7d446c244cfc</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a91eeab4b6f1f3117f3db0dc384ad3db4</Anchor>
    <Abstract>Returns a reference to an itemn at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ac3b781cca323ed0904e090983f888e36</Anchor>
    <Abstract>Returns a refernce to an itemn at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f8923e3ea4e9737e04a0b35100db841</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad4aaf1341f5ababca4afcc0830a7da1e</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a05befffe91bfd0e853230bc5df784f65</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7ce377d14442501a8fc34fc012a0c6ab</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a29533c8074caba9a86dc7a2482b759f6</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a5f76add3056a6a7d62c7ca46ae442fde</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad605ca1eed55acef9ac9d10fc03a54e4</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc4b30484f09212831b2de869ae9f9d7</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3e9751206cf260cda81d22a6e544d89e</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab10385febd06cc6fda96abb5b735a949</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>areAllEqual</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a76434f8adfca2a2241c39ad67dfa7566</Anchor>
    <Abstract>Determine if each item in the array is equal to the others. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3476b7debbb42f1277d7df5b0d591396</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a19bf576e39e283a2af2cb60d8726ae8b</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a768e3730d2076b1d5eade90b0593397e</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2424be9a3c5826f508b73e007dfe5b0a</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad87075a49fe1cea5bcdaf54f15873c4e</Anchor>
    <Abstract>Returns whether the array contains a particular item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f36d45789d499b691b59fb59294e1b3</Anchor>
    <Abstract>Returns whether the array contains one or more other items. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad2065d1c59f281fb17c78cce33f62b41</Anchor>
    <Abstract>Gets the index of a particular item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a48849d83a5c0c3e9f4968c8faab347da</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3766d14cdfac35751119147622f35322</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>from</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9efe2797629ae5f5ac32f4ff57212b04</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4d6c495b62d477184230022511cee67a</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae735443d708a74182544016f89523de2</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae0a86661df85c2aaf0954b236ed3fa50</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replace</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a596d19434b80e819291091dd81a9c4b4</Anchor>
    <Abstract>Perform a find and replace on the array and return the result. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItem</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a691f1805e81bbe042bcc07d84d7eb8e0</Anchor>
    <Abstract>Remove an item in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItems</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4c9d17a3269ab9904a4fb2219c367b6f</Anchor>
    <Abstract>Remove several items in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>group</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a88aeed1b448dddd7a668400b51f014cf</Anchor>
    <Abstract>Group this array into a 2D array with a particular group size. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1b9f73b45869002f410e320c68d8c068</Anchor>
    <Abstract>Split the array into a 2D array using delimiters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>splitSequence</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a664370848338525597ca379ce6da43de</Anchor>
    <Abstract>Split the array into a 2D array using a delimiting sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deinterleave</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae4f769c721e3b332257513b88e8ed748</Anchor>
    <Abstract>De-interleave an array into a 2D array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ada7cd40ff1de921243a1ba6d0a73fe5d</Anchor>
    <Abstract>Construct a NumericalArray that refers to some other data. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>newClear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35333c3e01ef69f3a2915165c2d3ab83</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with all items set to zero. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee42d54db01e66d26ee8128183dd0136</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) ramping from one value to another. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>series</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a59b2257afb948d77ebb88255ef6e6167</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a series. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>geom</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a30a41a8d2f38fa905f05b339d8e0f9a0</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a geometric series. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab98a6073517a23189d9f8ca7c64b1cef</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad18e1508241e68329259301ed990f219</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9249a9785c5168e6cd4a55aa4aa29c4b</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exprand</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91f325eeff8bd44e9774cf92b1bb438e</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with an exponential random distribution. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sineTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa474beef987896c1d5122828b433a958</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more sine tables. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abd89c7757fc3ea124480f8f47de2bbfc</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine tables...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae89ecb5b770c242fd6ed6393a8401bf5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine windows...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>triangleWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>acff98717b87ea00fdba7713044462f05</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more triangle windows...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bartlettWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df36fe372f06cf5b404a397f2046b46</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Bartlett windows...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hannWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1862a2a70951192dd5692a943ffea2ac</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more von Hann (Hanning) windows...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hammingWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9afba9977eb1067502609fb8d5820766</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Hamming windows...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>blackmanWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a86956d5e17e4f1f98aab634ee4b4a8e5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Blackman windows...</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1304973429a775ba7ab1bf7eb32e138a</Anchor>
    <Abstract>Creates an array by copying data from another source. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArrayNoCopy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad64074f04aec194d590476cce27c0b64</Anchor>
    <Abstract>Creates an array by using data from another source. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3b26fc025b8c7874d8dd9727cc430592</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>acfdcf984b61c960961710910fcf4b64e</Anchor>
    <Abstract>Returns an array with a given size. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyWithAllocatedSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc0c8de5e14b9b5257f072c26fe7a5b5</Anchor>
    <Abstract>Returns an empty array with a given size of allocated storage. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; NumericalType &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1d9bd9a6801bb1ed040c9b92a54571ba</Anchor>
    <Abstract>Collect a new array based on the contents of another array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArraySpec</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NumericalArraySpec</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array_spec.html</Path>
    <Abstract>For specificying the initial state of a NumericalArray. </Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalConverter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NumericalConverter</Scope>
    </TokenIdentifier>
    <Path>class_numerical_converter.html</Path>
    <Abstract>For rounding values from float/double to int types. </Abstract>
    <DeclaredIn>plonk_InlineMiscOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Abstract>This is the base class for arrays. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>af8b9946ea130d57e18ff368333548c39</Anchor>
    <Abstract>Creates an empty array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f088cd226ecae84f2df495bf0947ec7</Anchor>
    <Abstract>Creates an array with a particular size/length. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae99f2e9c3d2b031f419d5a3a4a17381b</Anchor>
    <Abstract>Wraps an existing array in an ObjectArray. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1fa53ee2141b63883c68098b496a090c</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6e8493adbcc71c1592875360bffaa6a7</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae669045b3d6dfad956c989d9630c2f3c</Anchor>
    <Abstract>Create a copy of another array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a03baa6c06a77a576a05e1898b9ccd19f</Anchor>
    <Abstract>Creates a deep copy of the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab95b6ffd0f27b905554a17973137af9f</Anchor>
    <Abstract>Create an array with a single item. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaadbed847983fc8fb2a46a9ce29ffb53</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a57d2d868e31f8c0e2b21edb461c2f77e</Anchor>
    <Abstract>Sets a new size for the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2ab78a45b4be10cfd619f800bcd1d60f</Anchor>
    <Abstract>Sets the length of the array to zero. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6fb5345981765f2704f9a4e8dbc8f6c8</Anchor>
    <Abstract>Size is the actual number of elements of storage needed for the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sizeAllocated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abd7a4dcb6b92f01733a49ac887dcfd1d</Anchor>
    <Abstract>This is the memory allocated to the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a861101ff2f817b137a481fa4a62b41a3</Anchor>
    <Abstract>Length is the number of real elements of storage available. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memorySize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1ea3042b23181ecc74003379313dcc84</Anchor>
    <Abstract>Actual memory requirements of the array elements and the null terminator (if needed). </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaa751e7a03cb2b3f8f067611ed1f1a41</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abf6b8c3cf474bd1c83a56e06be5d3f06</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const ObjectType *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9058ab8b2528bb5c558c35b3a809c1b1</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator ObjectType *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0a68d0a36a619621eaf328774f03f7a7</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNullTerminated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abfb405e23328df73fd7d35e9bbdf391f</Anchor>
    <Abstract>Returns whether this is a null terminated array or not. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNullTerminated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>adc8d49b21bb2b6b001e6a4f6bd440f1a</Anchor>
    <Abstract>Changes this array&amp;#39;s null terminator flag. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>referTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae2236515507f1cfe0f9e44ecb63dabd4</Anchor>
    <Abstract>Force the internal array to refer to other data. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aa15b17d07062a81fa7fbc0fb275d18af</Anchor>
    <Abstract>Adds an item in-place. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f0f23ab21ae6bfe9e438686ac4ae7ed</Anchor>
    <Abstract>Adds several items in-place. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6b2d22402553fb5e22ed7c2966d74de7</Anchor>
    <Abstract>Removes an item at the given index in-place. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad675f23eada53adcadda78f096b3642d</Anchor>
    <Abstract>Places an item at the given index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a64873f1b21d3888d606f555da6a2014a</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0bc80ee77d245f592d75f480293937b6</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a01dda59cdcbad97e572fae969ec7e992</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a525a2021265a54a85212893f650f7deb</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad0ddd1b46e1b7ae32dd0e232ebcece5f</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3027a6cfd4eef94f604a7d446c244cfc</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a91eeab4b6f1f3117f3db0dc384ad3db4</Anchor>
    <Abstract>Returns a reference to an itemn at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ac3b781cca323ed0904e090983f888e36</Anchor>
    <Abstract>Returns a refernce to an itemn at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f8923e3ea4e9737e04a0b35100db841</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad4aaf1341f5ababca4afcc0830a7da1e</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a05befffe91bfd0e853230bc5df784f65</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7ce377d14442501a8fc34fc012a0c6ab</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a29533c8074caba9a86dc7a2482b759f6</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a5f76add3056a6a7d62c7ca46ae442fde</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad605ca1eed55acef9ac9d10fc03a54e4</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc4b30484f09212831b2de869ae9f9d7</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3e9751206cf260cda81d22a6e544d89e</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab10385febd06cc6fda96abb5b735a949</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>areAllEqual</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a76434f8adfca2a2241c39ad67dfa7566</Anchor>
    <Abstract>Determine if each item in the array is equal to the others. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3476b7debbb42f1277d7df5b0d591396</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a19bf576e39e283a2af2cb60d8726ae8b</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a768e3730d2076b1d5eade90b0593397e</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2424be9a3c5826f508b73e007dfe5b0a</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad87075a49fe1cea5bcdaf54f15873c4e</Anchor>
    <Abstract>Returns whether the array contains a particular item. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f36d45789d499b691b59fb59294e1b3</Anchor>
    <Abstract>Returns whether the array contains one or more other items. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad2065d1c59f281fb17c78cce33f62b41</Anchor>
    <Abstract>Gets the index of a particular item. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a48849d83a5c0c3e9f4968c8faab347da</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3766d14cdfac35751119147622f35322</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>from</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9efe2797629ae5f5ac32f4ff57212b04</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4d6c495b62d477184230022511cee67a</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae0a86661df85c2aaf0954b236ed3fa50</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae735443d708a74182544016f89523de2</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a596d19434b80e819291091dd81a9c4b4</Anchor>
    <Abstract>Perform a find and replace on the array and return the result. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a691f1805e81bbe042bcc07d84d7eb8e0</Anchor>
    <Abstract>Remove an item in-place. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItems</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4c9d17a3269ab9904a4fb2219c367b6f</Anchor>
    <Abstract>Remove several items in-place. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>group</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a88aeed1b448dddd7a668400b51f014cf</Anchor>
    <Abstract>Group this array into a 2D array with a particular group size. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1b9f73b45869002f410e320c68d8c068</Anchor>
    <Abstract>Split the array into a 2D array using delimiters. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>splitSequence</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a664370848338525597ca379ce6da43de</Anchor>
    <Abstract>Split the array into a 2D array using a delimiting sequence. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deinterleave</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae4f769c721e3b332257513b88e8ed748</Anchor>
    <Abstract>De-interleave an array into a 2D array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3b26fc025b8c7874d8dd9727cc430592</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>acfdcf984b61c960961710910fcf4b64e</Anchor>
    <Abstract>Returns an array with a given size. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyWithAllocatedSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc0c8de5e14b9b5257f072c26fe7a5b5</Anchor>
    <Abstract>Returns an empty array with a given size of allocated storage. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1d9bd9a6801bb1ed040c9b92a54571ba</Anchor>
    <Abstract>Collect a new array based on the contents of another array. </Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectMemoryBase</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ObjectMemoryBase</Scope>
    </TokenIdentifier>
    <Path>class_object_memory_base.html</Path>
    <Abstract>Manage a custom memory allocation system. </Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectMemoryBase</Scope>
    </TokenIdentifier>
    <Path>class_object_memory_base.html</Path>
    <Anchor>ae64795a840be11636927a027e0270f0d</Anchor>
    <Abstract>Must implement, normally this starts a background thread. </Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMakeChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Abstract>Output overlapped block. </Abstract>
    <DeclaredIn>plonk_OverlapMakeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Anchor>ab8913b5fe465c107eb3f624aba21a403</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_OverlapMakeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Anchor>a13244ffc10dc738b477e6747b6b3ed0e</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_OverlapMakeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMakeUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMakeUnit</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_unit.html</Path>
    <Abstract>Create and overlapped processing stream. </Abstract>
    <DeclaredIn>plonk_OverlapMakeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMixChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Abstract>Output overlapped block. </Abstract>
    <DeclaredIn>plonk_OverlapMixChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Anchor>af4ff163dce14f074114ccd7117024d6e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_OverlapMixChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Anchor>a6e153f1f4d0405122824bae9c0c0eca2</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_OverlapMixChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMixUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMixUnit</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_unit.html</Path>
    <Abstract>Mix down an overlapped processing stream to a continuous one. </Abstract>
    <DeclaredIn>plonk_OverlapMixChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Abstract>Variable channel. </Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Anchor>af7648a2ef9c84e60303236904754a508</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Anchor>acd602c6e2d87ef06fdb54464ee9fe08f</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_param_unit.html</Path>
    <Abstract>Param unit. </Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_param_unit.html</Path>
    <Anchor>ac343f68e8e970fab0549ca49bc1a6f24</Anchor>
    <Abstract>Create audio rate parameter. </Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_param_unit.html</Path>
    <Anchor>a628bc46a451a32aaf89736941c220e77</Anchor>
    <Abstract>Create control rate parameter. </Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PatchChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Abstract>Patch channel. </Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Anchor>ad10afb19d875cc5db9f04967066f66ac</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Anchor>a7cc1ad5770449333576b1fa1cf539d18</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PatchUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PatchUnit</Scope>
    </TokenIdentifier>
    <Path>class_patch_unit.html</Path>
    <Abstract>Patch channel. </Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PatchUnit</Scope>
    </TokenIdentifier>
    <Path>class_patch_unit.html</Path>
    <Anchor>aba7614867247338e3dc88bc7a44c0a82</Anchor>
    <Abstract>Create control rate variable. </Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PauseChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PauseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_pause_channel_internal.html</Path>
    <Abstract>Pause. </Abstract>
    <DeclaredIn>plonk_PauseChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PauseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_pause_channel_internal.html</Path>
    <Anchor>ab2e5e301121c2cc015234cd227831627</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_PauseChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PauseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_pause_channel_internal.html</Path>
    <Anchor>a49cf59ac884274e219db6ce203732e70</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_PauseChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PauseUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PauseUnit</Scope>
    </TokenIdentifier>
    <Path>class_pause_unit.html</Path>
    <Abstract>Pause. </Abstract>
    <DeclaredIn>plonk_PauseChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PauseUnit</Scope>
    </TokenIdentifier>
    <Path>class_pause_unit.html</Path>
    <Anchor>a73e8d41c10124025824545b3451c99f1</Anchor>
    <Abstract>Create an audio rate pause. </Abstract>
    <DeclaredIn>plonk_PauseChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankF80</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankF80</Scope>
    </TokenIdentifier>
    <Path>struct_plank_f80.html</Path>
    <Abstract>Storage for an 80-bit extended floating-point value in big endian format. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankI24</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankI24</Scope>
    </TokenIdentifier>
    <Path>struct_plank_i24.html</Path>
    <Abstract>Storage for a 24-bit integer. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankPascalString255</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankPascalString255</Scope>
    </TokenIdentifier>
    <Path>struct_plank_pascal_string255.html</Path>
    <Abstract>Storage for a 255 character Pascal string. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankUI24</Scope>
    </TokenIdentifier>
    <Path>struct_plank_u_i24.html</Path>
    <Abstract>Storage for a 24-bit unsigned integer. </Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLAudioHost</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Abstract>An Objective-C audio host for the iOS platform. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a4632229b1b2bf8910f552147b4b125ce</Anchor>
    <Abstract>Start the host running. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a0340697ab1516d826ca775e70fe2cf77</Anchor>
    <Abstract>Stop the host running. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pauseHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae9cdfdda5e395619dacd125d57f9f6ce</Anchor>
    <Abstract>Pause the host. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resumeHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a0ba3696e30efda50e25e1388a8bfb8cc</Anchor>
    <Abstract>Resume the host. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>delegate</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a1f05ecdc163b39e2737c6a3b9c3c6d21</Anchor>
    <Abstract>The delegate that contains the constructGraph method. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hostName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>af3a6a192ba27ba46a9a2a42020ef039b</Anchor>
    <Abstract>The host name - always &quot;iOS&quot;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nativeHostName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae1f9428528fa57ef31ad54ec4ead601e</Anchor>
    <Abstract>The native host name - currently always &quot;RemoteIO&quot;. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a49667880f969d2d7a4d225f213e61d5f</Anchor>
    <Abstract>The name of the input device. May be &quot;Default Input&quot; on the simulator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a801abb70ea4f0e485f3d6dab29e00133</Anchor>
    <Abstract>The name of the output device. May be &quot;Default Output&quot; on the simulator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cpuUsage</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ac52aba0de2bc5fe5e917a27d3e146bdd</Anchor>
    <Abstract>The current CPU usage of the DSP loop. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRunning</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a2e2383bea16877af6d26e8e9be8b371b</Anchor>
    <Abstract>Is the host running? </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isPaused</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae15f5c4b8b6209324f1c399c935d10fe</Anchor>
    <Abstract>Is the host paused? </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wasInterrupted</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a2d3a8c487d55b19d3ef04de2f8b1cdea</Anchor>
    <Abstract>Was the host interrupted? </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputUnit</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a6eb8fe1b9aea5fdc9743c2a50397d0e4</Anchor>
    <Abstract>The output unit of the host. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numInputs</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a2d99079f809dd7669d0a818cd0fe9292</Anchor>
    <Abstract>The number of audio inputs, only set this BEFORE sending the startHost message. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numOutputs</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae95c772181f43c44e71a5f064f732e5e</Anchor>
    <Abstract>The number of audio outputs, only set this BEFORE sending the startHost message. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preferredHostBlockSize</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a597a74efc968d07e81fe7a0a933cadc1</Anchor>
    <Abstract>The preferred host block size, only set this BEFORE sending the startHost message. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preferredGraphBlockSize</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>adff565711c798f69e0ef7a9d6e25215c</Anchor>
    <Abstract>The preferred graph block size, only set this BEFORE sending the startHost message. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preferredHostSampleRate</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a797691d1aee1e61a85f942ab16a38976</Anchor>
    <Abstract>The preferred sample rate, only set this BEFORE sending the startHost message. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLAudioHostDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>intf</Type>
      <Scope>PLAudioHostDelegate</Scope>
    </TokenIdentifier>
    <Path>protocol_p_l_audio_host_delegate-p.html</Path>
    <Abstract>A protocol for a PLAudioHost delegate. </Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkBufferF</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlinkBufferF</Scope>
    </TokenIdentifier>
    <Path>struct_plink_buffer_f.html</Path>
    <Abstract>Stores a buffer of floats. </Abstract>
    <DeclaredIn>plink_Process.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ProcessInfo</Scope>
    </TokenIdentifier>
    <Path>class_process_info.html</Path>
    <Abstract>Holds information about the Unit graph. </Abstract>
    <DeclaredIn>plonk_ProcessInfo.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTimeStamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ProcessInfo</Scope>
    </TokenIdentifier>
    <Path>class_process_info.html</Path>
    <Anchor>adc09432bb787204aba36f4a971bd7526</Anchor>
    <Abstract>Get the current time stamp. </Abstract>
    <DeclaredIn>plonk_ProcessInfo.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setTimeStamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ProcessInfo</Scope>
    </TokenIdentifier>
    <Path>class_process_info.html</Path>
    <Anchor>a4c77916d8b6321081f6067d8ee6149a3</Anchor>
    <Abstract>Sets the current time stamp. </Abstract>
    <DeclaredIn>plonk_ProcessInfo.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProxyOwnerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ProxyOwnerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_proxy_owner_channel_internal.html</Path>
    <Abstract>Where true multiple-input-multiple-output units are needed This is where all outputs depend on all in...</Abstract>
    <DeclaredIn>plonk_ProxyOwnerChannelInternal.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a0d5725cc71173dcff25b08f992acf1ea</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>aa4e59e6ac19208c22de024fe2bda39bc</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QueueChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Abstract>Play a queue of units. </Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Anchor>a5e52fb9beb9631660ee1df9dc29dfee1</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Anchor>a65fb950a9857c5122989d398d415f92e</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QueueMixerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Abstract>Mix a queue of units to a multichannel unit. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Anchor>a025b5b45d96b05fe4c139af1d411c54e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Anchor>a68a539d431e6bcf30cd5a50c9a8bcea6</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QueueUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>QueueUnit</Scope>
    </TokenIdentifier>
    <Path>class_queue_unit.html</Path>
    <Abstract>Queue unit. </Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>QueueUnit</Scope>
    </TokenIdentifier>
    <Path>class_queue_unit.html</Path>
    <Anchor>a4b89e6423f89433a5c249cf15044e4cd</Anchor>
    <Abstract>Create an audio rate block generator. </Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReblockChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Abstract>Reblock. </Abstract>
    <DeclaredIn>plonk_ReblockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Anchor>a7f399f1b720f937f09a6f2b0d0adc32e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ReblockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Anchor>aaa994ae5fd92233b56e83e5ce9f7f18b</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ReblockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReblockUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ReblockUnit</Scope>
    </TokenIdentifier>
    <Path>class_reblock_unit.html</Path>
    <Abstract>Re-buffer to a different block size. </Abstract>
    <DeclaredIn>plonk_ReblockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ResampleChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Abstract>Resampler. </Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Anchor>a2a182bc90151b6d4f69423c236ebca5d</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Anchor>a00bf891ff70c4d8c61191abfe1935c2a</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ResampleUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ResampleUnit</Scope>
    </TokenIdentifier>
    <Path>class_resample_unit.html</Path>
    <Abstract>Resampler. </Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ResampleUnit</Scope>
    </TokenIdentifier>
    <Path>class_resample_unit.html</Path>
    <Anchor>a1e44d840d6a2df2284399153f22db86c</Anchor>
    <Abstract>Create an audio rate sample rate converter. </Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RHPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>RHPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_h_p_f_unit.html</Path>
    <Abstract>Resonant high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RHPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_h_p_f_unit.html</Path>
    <Anchor>a5f73cc66566357fbbae8cce7db9d8f3f</Anchor>
    <Abstract>Create a resonant high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RHPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_h_p_f_unit.html</Path>
    <Anchor>a02062b36e8a2567b3b1574adcba74105</Anchor>
    <Abstract>Create a control rate resonant high-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RLPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>RLPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_l_p_f_unit.html</Path>
    <Abstract>Resonant low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RLPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_l_p_f_unit.html</Path>
    <Anchor>a4bb648a0368c953e1f57c6247e4233a6</Anchor>
    <Abstract>Create a resonant low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RLPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_l_p_f_unit.html</Path>
    <Anchor>aaea275203569c624284d737e209ca360</Anchor>
    <Abstract>Create a control rate resonant low-pass filter. </Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RNG</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Abstract>Random number generator. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>seed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aa131d14f6a74afc136ca32103adca4d7</Anchor>
    <Abstract>Seed this random number generator. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniformInt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aeecbdccb6e1cf814fcfb61f2ea789a67</Anchor>
    <Abstract>Generate a random integer. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a6e56870f2b86b5f2c65c89bb182e452a</Anchor>
    <Abstract>Generate a uniformly distributed random integer between 0 and max-1. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a8ec9105d96c21cff1cf9c98df9e383b6</Anchor>
    <Abstract>Generate a uniformly distributed random integer between min and max-1. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a271c0ff3841d39e898561bb1ffd51450</Anchor>
    <Abstract>Generate a uniformly distributed random integer between 0 and max-1. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aedd795e97f744c788e357388ec57c64c</Anchor>
    <Abstract>Generate a uniformly distributed random integer between min and max-1. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniformFloat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a2dc3b8cc59dbdff953b7cf09434a360c</Anchor>
    <Abstract>Generate a uniformly distributed random float between 0 and 1. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a4f798468273cd1b1bcbb6ae56b17cd79</Anchor>
    <Abstract>Generate a uniformly distributed random float between 0 and max. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a3ad52daf4592a6a361897920f71a2ef7</Anchor>
    <Abstract>Generate a uniformly distributed random float between min and max. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniformDouble</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a9b84bf032396bd8ca213db2786d4d41c</Anchor>
    <Abstract>Generate a uniformly distributed random double between 0 and 1. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a04952e6c6cc1a9b0261fff0fa85e7313</Anchor>
    <Abstract>Generate a uniformly distributed random double between 0 and max. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a35f7bcb937a43e0c3bae77437875d6f1</Anchor>
    <Abstract>Generate a uniformly distributed random double between min and max. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exponential</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a7c587706ed3daa38b0a0c27146da1c67</Anchor>
    <Abstract>Generate a exponentially distributed random float between min and max. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exponential</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a05bf1021e9ff83eea90b7acefa143b2a</Anchor>
    <Abstract>Generate a exponentially distributed random double between min and max. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>global</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aa44a6fbe95ea8b66e3f7280389cf3a75</Anchor>
    <Abstract>Get the global random number generator. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>audio</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>ac15818ab04c2f5c3299e92d4e85e6b78</Anchor>
    <Abstract>Get the audio thread random number generator. </Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Abstract>A specialised Variable&lt;double&gt; for handling sample rates. </Abstract>
    <DeclaredIn>plonk_SampleRate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>aad9ead2daa5f892adbc9714d4050c35e</Anchor>
    <Abstract>To catch a potential programming error. </Abstract>
    <DeclaredIn>plonk_SampleRate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>a51720e5ae3c25ef2be86a9101ceed410</Anchor>
    <Abstract>Create a SampleRate from a double. </Abstract>
    <DeclaredIn>plonk_SampleRate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>a9002522c416be044d0ef395f46f556f5</Anchor>
    <Abstract>Create a SampleRate from a DoubleVariable. </Abstract>
    <DeclaredIn>plonk_SampleRate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>adcf18a11f0e4b15260a2fd7f36c6a2e2</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_SampleRate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aaee8f7b83d0852076b6251679289dcde</Anchor>
    <Abstract>Default constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc64133e0e95c4c3f3fa55c9edbe77e1</Anchor>
    <Abstract>Initialised with a specific internal. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae28f084e871562a27b62ae420d0f82dc</Anchor>
    <Abstract>Copy constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a03775764169975aa6bdd58cd5e729700</Anchor>
    <Abstract>Initialised with a specific value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a23024f58133373d58666fbe1325a950e</Anchor>
    <Abstract>Initialised with a pattern/sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a086d7da52f4416ea5814c4ec06e67768</Anchor>
    <Abstract>Initialised with a pattern/sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab51b36e8035550e747a7d612551816e0</Anchor>
    <Abstract>Create a Variable that converts from one type to another. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a607f32d2dfcdfeef6d5ea68d42328136</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5c2bed144a52f71a5ff057cc70e2490a</Anchor>
    <Abstract>A convenience for setValue(). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a039e7aa6f46e5115f8a835612a7607f5</Anchor>
    <Abstract>Returns the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValuePtr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae001f8395a0aac15d7b663fd48f9190f</Anchor>
    <Abstract>Returns the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator double</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4b62e9398f59e797f196f291023b9ec8</Anchor>
    <Abstract>Returns the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a972257a7d4905e8a6ba879934b17a5fd</Anchor>
    <Abstract>Returns the next value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValue</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae00152b8b3b8151421857deea2dc02f7</Anchor>
    <Abstract>Sets the current value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>binary</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6f0b057793e46b0d507d3289759d3fdd</Anchor>
    <Abstract>Builds a binary operation from two source Variables. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unary</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a0f335dbaa25a63de85abe98822f0ed</Anchor>
    <Abstract>Builds a unary operation from a source Variable. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa68a9b3bed392f5c0653edbe1121d704</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a033c3627b51039f5954622e189228fd3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a96c3c016f3ae35c028ac56e5fdcc3948</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af616ff1720bb62c5cdf38d99b65347d0</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abe8eb76afbc9a1333c93c76b4ffc47a5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4a100f4394a7b50a039e816934320a5d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab3aad47f5d35845de82bdcc23cebadeb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a70df26faaaba6fba941b7309ef63e759</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a117662f99ba5006e975a296e36c3272a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and the ri...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab1632233c3e21db6b7c0cad3c6dfccd0</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a29ca1669dc169d0474a3ebe069f44415</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac0b9acb346941b6c3b0e1905dc7125dc</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2813ae66a082bb4bb35cf55624c1373d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6677f06ba42fa81dfa9d25510e9f48ed</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae38887e43624c752febab4c7a5f83ba4</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a010e5ea46c6bd6dabcfba7469de1eadb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a155b826972cc4231b632050b6c91ef53</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac163622355c742768be010e1ff92a6a1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1ad67bd1ced8bb985499cd30dde40dd7</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>added8094a984f8614c6283ed1fd2bc91</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9aa7fa7eca31ecc4250f3820a710223e</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7e1863e95635b70172259e64e936a370</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a56af338b3e7e6f4753a61e0f31918949</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;round&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8db05fd3d96b322c9b9ec9bb91e7780c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a96247f9e282807c9cd8947550293a25c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa92fc450dad45deb2abb39bdd52ffaa3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a238cef7603e8d0d415e3f7daf0bb32ac</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afc5eae44d9318aafcbff7570e752411b</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0de9c9e3bfab9f39d393af00ef8bb3dc</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abf6e2cc24577ff2fcd2d00e46894e7e1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac4716adbc550382141748e51651388c3</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa6ba9c04c94a5d8cfbb86135792c4066</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab248631c5e92ab5e8328409bbaa382c2</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8daac18d512be9ffda57f5841a117419</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8d25fc97924496cee6266341ab8bb060</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac87257b81e06b9c667ec693f2eff1727</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3cd7209371976db10771558c44d53b70</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0318a28a8d6e1558bcb3062bc4c0c7df</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a746e9bef06f6957a423abe18f63f539c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4476c58b465cee6df36ca4bb62363fc5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a474f5e8f941787e3fc3c69e01b4e935f</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5cc80091d0fb77dc676a69d055883bcb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad9ebbe4f1df6e9c3bb3a235261a65070</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9294ea3c179b72ec3df293f7d98eb2c6</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a53d337065b2658d74b200285097b8f09</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0cabd713245207a11cc5b6eb800d78cc</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a21c0c28e5ddb449b1f13c9442e3980</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab529838d787722400b03f83e7911f2d3</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae57b2ee912fab03207de0aab994d7c53</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc1fdb679811567fb8fba82241def51e</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and the ri...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a857d2e28f6b8c67802773dcf7d73942a</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0f638daa507070519be46d206f8ff30f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5dd813b0fd9b0ad412a9104b439ba0dc</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5e3e78231ddccb73fc55311932d8fb8e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a927ebf29a03105d958b653ba4f638045</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac9e340dc450ac5da2d63dcae019189e4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad37a53370b744ed217547bcdc966f746</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a47d81bb38a371b5838095fe7a9db33a4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3ca439cdaaef249bda5bb4656e64aa4b</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a11fc366fdbf6af4f4f820ae8e15ae93f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4a774315b8ebef5ff656104afd0aa8b0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a511c687ecead8fd322a71bb61a78c546</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1a67a72574226c9928ef0a243d88e9b4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>acae49e93412ff41badc4619a22acd6c5</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab60e3b698985ac6ce498a648218d258f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab267f7758e724b9059651176699f1993</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>adeeba19e7c51d87b5f64e30255c461f0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6b5feb083a416628daa9b20529136ccf</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae5af611a700e5ad9b1c52dc18623bc87</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a73ef7254575856f8a4d7f7206f609f0e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a73d3d45c4b54b431c70674c5449801f0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;squared&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5d7d33dd4d80978564a571d428c912b4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7e092b4ae2a1ac06855e39d42d165015</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa51a0bbf36eecaa4247510afc0c82dd6</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9f934eaa82ff690293a391535a77fe6d</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9e4e2b77a3e6b5c9658d0e6d08f47b5e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af618ee51529ef7f028245f7a3f93dea4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae703472fce347e00e50c786bb5b8faf2</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a17a859fa38ca289f1741ff7bf3e6c3e3</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac7eecf837c73bb80330648a681c4a763</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afc95585b298035aba9819a543f429d0f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab331f4d9b978e2273d253b961ba78fb1</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8c585a15ab2ab4d1e555cb31cda73115</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;distort&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a87ecc4996f67a1eb13dbb4913a9d2f09</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afebaf666d804900a9d430733ba60f5ac</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac06acbf768ec112154e48881b551181c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afa7cc3ee279465c2e6dcaade5524cb93</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a44f9ee14363eb19a3a31b462be733fd7</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a885a985740d002802d1d0fcf8a82c403</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>Variable&lt; double &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac6051f1df5e6fa73a0ea5a9c015ee901</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SawChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Abstract>Sawtooth wave generator. </Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Anchor>afa02ff454704b669f313f71cf56f800e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Anchor>a518b15242470c04baa97d3609fe0f4c0</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SawUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SawUnit</Scope>
    </TokenIdentifier>
    <Path>class_saw_unit.html</Path>
    <Abstract>A non-bandlimted sawtooth oscillator. </Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SawUnit</Scope>
    </TokenIdentifier>
    <Path>class_saw_unit.html</Path>
    <Anchor>ac227416ad5260b17557db86b03762e5d</Anchor>
    <Abstract>Create an audio rate sawtooth oscillator. </Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SawUnit</Scope>
    </TokenIdentifier>
    <Path>class_saw_unit.html</Path>
    <Anchor>abe23c3c05371f372fea7606b83e02eee</Anchor>
    <Abstract>Create a control rate sawtooth oscillator. </Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SchmidtChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Abstract>Schmidt. </Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Anchor>a71b2d1dc1997d6997ffa5d52357e42f6</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Anchor>a3c29e4e3e5985788a83f98b45e609cce</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SchmidtUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SchmidtUnit</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_unit.html</Path>
    <Abstract>Schmidt trigger. </Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SchmidtUnit</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_unit.html</Path>
    <Anchor>a738f51b6fe1f6505317d18f6eeadb955</Anchor>
    <Abstract>Create an audio rate sample rate converter. </Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalPlayChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Abstract>Signal player generator. </Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Anchor>ac82529da94ea92bcbf2f2f3586f7247a</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Anchor>a31f7ddf13402b8e25051e364c27094e9</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalPlayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalPlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_unit.html</Path>
    <Abstract>Signal player generator. </Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalPlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_unit.html</Path>
    <Anchor>a57e8b75bed5b361f7038ab2369903aa2</Anchor>
    <Abstract>Create an audio rate signal player. </Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalPlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_unit.html</Path>
    <Anchor>a44b523a0bde794fa71f9a3c4de48251b</Anchor>
    <Abstract>Create a control rate signal player. </Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalReadChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Abstract>Signal reader generator. </Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Anchor>a9990807fc1acf723d9160bf1335e68b3</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Anchor>a765f31588371c84e239c8d842a45db74</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalReadUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_unit.html</Path>
    <Abstract>Signal reader generator. </Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_unit.html</Path>
    <Anchor>abf4999952f592e16a89ae4929f5004bb</Anchor>
    <Abstract>Create an audio rate signal player. </Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_unit.html</Path>
    <Anchor>aea696eb86b0658cbb567ffe19e4f92da</Anchor>
    <Abstract>Create a control rate signal player. </Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SineUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SineUnit</Scope>
    </TokenIdentifier>
    <Path>class_sine_unit.html</Path>
    <Abstract>Sine oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SineUnit</Scope>
    </TokenIdentifier>
    <Path>class_sine_unit.html</Path>
    <Anchor>a3a5dee949336bc3a5291179568a9805e</Anchor>
    <Abstract>Create an audio rate sine oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SineUnit</Scope>
    </TokenIdentifier>
    <Path>class_sine_unit.html</Path>
    <Anchor>a83bb481d279a888b7caec0df17b7ce8e</Anchor>
    <Abstract>Create a control rate sine oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SmartPointer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>SmartPointer</Scope>
    </TokenIdentifier>
    <Path>class_smart_pointer.html</Path>
    <Abstract>Reference counted pointer base class. </Abstract>
    <DeclaredIn>plonk_SmartPointer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SmartPointerContainerBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SmartPointerContainerBase</Scope>
    </TokenIdentifier>
    <Path>class_smart_pointer_container_base.html</Path>
    <Abstract>This manages a SmartPointer pointer. </Abstract>
    <DeclaredIn>plonk_SmartPointerContainer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TableChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Abstract>Wavetable oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Anchor>a98f6dabb8b87b7816338bb1c20ad2997</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Anchor>a6cc6c33141ba0735d2a9488db3c08d52</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TableUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TableUnit</Scope>
    </TokenIdentifier>
    <Path>class_table_unit.html</Path>
    <Abstract>Wavetable oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TableUnit</Scope>
    </TokenIdentifier>
    <Path>class_table_unit.html</Path>
    <Anchor>aef71a79ad5a9e86547deef6477508e5f</Anchor>
    <Abstract>Create an audio rate wavetable oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TableUnit</Scope>
    </TokenIdentifier>
    <Path>class_table_unit.html</Path>
    <Anchor>a9eddb6c7b178640c71cb56c95752fe48</Anchor>
    <Abstract>Create a control rate wavetable oscillator. </Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Abstract>A class for storing and manipulating text strings. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>ab3e26143fccc52699bcc5149cae852bc</Anchor>
    <Abstract>Creates an emply text string. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>a6a37381f3b9631eceb5623d577b0cc0c</Anchor>
    <Abstract>Creates a text string containing a single character. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>afc39d49ea9c32ffa54e76f6b37b0bce4</Anchor>
    <Abstract>Copy numerical values from another numerical array type to a new Text string. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>a77503c6e67b880d326a159f6699dd222</Anchor>
    <Abstract>Copy values from another array type to a new Text string. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>a01cf231250017a4ebe2ebaa353c220b5</Anchor>
    <Abstract>Create a Text string from a wide char string. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>aecda7c41ea1a41bcf09136bdb9ba321e</Anchor>
    <Abstract>Concatentate two Text strings into one. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aacb62580c08a9529ae7bdfd4776c4739</Anchor>
    <Abstract>Construct a NumericalArray by copying a NumericalArray of a different type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a459feb8e3dd1be19321cf668e6e77cfa</Anchor>
    <Abstract>Construct a NumericalArray by copying a ObjectArray of a different type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0a725c439fea0bf8682236cc41072dfd</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6526ef4710bf9cb3828653bd09a2323a</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec with optional null termination. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a27ecf9517575656716efd64c2421f5d5</Anchor>
    <Abstract>Construct a NumericalArray from a null terminated source array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9a8b714189c179bba002e0db4552950d</Anchor>
    <Abstract>Construct an array with a single value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONKSMARTPOINTERCONTAINER_DEEPCOPY</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df538b5c22eefca40bbda399509e4c8</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad2c4bf652ce698fbfcc6b48560e872f2</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArrayConcatOperatorsDefine</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3cc8f8828424cf547cc8e4e284022f42</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7ff1f849a31b9ab9184b746b8b89bfb5</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5aacd1e9a3176d10404a76c655878438</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a61d87f05779d4a3a9b85afb5574bf30f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae3298d2a687a30eeb7652cb0ec126bd9</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7a24716ebdee03fce916ab6bde2e5d60</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abacad6e8e2de13ad5af6571fb3f433b3</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right arg...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abcfec6e86cacd479898f836192804cde</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3c7e4449d8772d09f4e4f36c413b4066</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a87d46086364127395c4beff4ab0cd39c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a256d96eef169e351f9345d372e2a7c51</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right ar...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a67d74aec7b53783d36417ace9aa3620e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91ffeaa64cbdf6f62ac77d2b544a8f52</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1d2d3be12e69972711e8f12b3dcd9590</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adf8bfcdb66171f2c350cbf747c658a95</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1a51fd9f5c92039d99ece4ba6aac6b8a</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab2031fddca7fa3693a5f9ccef0361c56</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6c31c06e3872a7958942e60d10f491a7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adc56e95e2852e09abf18c6e607d55ade</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a933fd24e227654ffe0b64c01b6440d9e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee6c34cb18fd039e430d3711526677c2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aca8b93c4417b2ae5844cb2e2c91f8b29</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab8ee250cd7f4a510243f2b48448ebd41</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a979f6464d7f9b7db0a9bba737f39a6f4</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;round&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1496f0fde2b5066fe31f23411cf250e0</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a01ef711d91ada45a56d696c972726967</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5016395dbe692b01d8d71429afe320b1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7beaf5dddb8ec1e04df2eb269e8e1061</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa6e11ed620e2308086433f6853ffc87c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5ca184a84b8909f43a7669426ab75bd9</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac3eaf1c0134a2c8d525c8e35ebaef9b1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abfb8ad6d326dd5e8442c2eafcac2fffb</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5bdb220b37c700a11abf90d410afc7c6</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac46c703d2717027f0811b7b16bee8b8d</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a603012061cf5710c93ea0d55fcac56b6</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8707e834d0b2e7fbb97b1ec19f593d01</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adda6459a7c3fb1e0a19d0bf73a0e69c3</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a363ed95c60ea4fa94ac43eeed2a05e96</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9b0679667eb305341a8a5dab2e229096</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3be96208a3fa3c60d7cb6b019dcbe926</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac6080a3eaca1156ede2d6b0eac59c9a2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a74cf71d43eabaf6934d92bbc37977813</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9f7d0bcd674c136a85445300f4bb4276</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae527e5217f2a50a49278ab4351ec6df1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad1f340506fc435e4d3d2a42fb43f2672</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8f692ca7c9e4ccba4d97f062af7423d7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9602ab8f6789daa697975ccbcebcba93</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a383f5895662731257f7f742792436cea</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a69713dff9d72be1fda6e08796445bd3c</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1aaee717bd826e57456592d1067ac255</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a50cfa7d7cd308b6b55f5bc72eca37676</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7bef88d67caf9e48b3abf0606c43114e</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3b3dcabdb4b69b1ac38aa93f38750ee4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a17c3b2cd81dbb5a993d2c3499b7b4b03</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a026e15b0b590d47f92524095ed825e7d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac2c36b167d73636ad52594fdd80c0e90</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa57acae179c9bca876150700ba12f960</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a194b90e09654651ace0ab7012dab6981</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad14c84d56ef65f05ebd687078129aa08</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8357800856bf40122000e000ac61603d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac8eb392cda2b876a629c28404a353b03</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a87fd3cb4ac296df1cded1620ef85095b</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3648f3bd140748a9c2eaa6e214f5bcc7</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afb2c8023836126cebe2e655a8dbe215f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aed37c1a614785fa7998b4b5df7dacabc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad08c949be5fc9f4a42166ed5abaece40</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afe76f6f8924310fea64b9af75a2aa153</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9d33035941641df6af32c30bcf998682</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a50e9f29e1c6ff8aac6865e0263c5a4ab</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac27715339d2a16c3c1559c3e13cedb15</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adc2d9e3dc19cc98ec9b9305c07044fd3</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a28b2d6897b787a132ee243fc31825c38</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;squared&amp;#39; function to this one. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9e15020fccbaa50ac21414abe19f3f93</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae9ca73d7cf0714284fd5c5c2784f51c4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2e8de1992b2fc1595fa555874640932d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2f043f7110480dda022b0f31a75bdf68</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa2762bbe7728092d1c639ede955d2744</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>af5ec12838b228444f67ed02de8750049</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a137fbe32132c8a0ffc8483cee85a65d2</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35823ca2eb4cc149c5b5d5325a92f44f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a338da375ef16b007936baf38f1f3f15a</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a08d7acb162896bf5a16ac1a256ba917c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a773e7cabeffa9bb56db18109c02bcfdc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3c5cdbaaae5df820f8b739f3806db20a</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;distort&amp;#39; function to this one. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa91ee71738f92713e708be2867181ee3</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a699c306c0700b6264dcdd9e151cfa7dd</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4f1171776c224c9b1370410469ac982c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a63e7070c30b5df16f1fef55cd8647c15</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a101ace1e49b4d50bc0f7c42be825ab2d</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>af8b9946ea130d57e18ff368333548c39</Anchor>
    <Abstract>Creates an empty array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f088cd226ecae84f2df495bf0947ec7</Anchor>
    <Abstract>Creates an array with a particular size/length. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae99f2e9c3d2b031f419d5a3a4a17381b</Anchor>
    <Abstract>Wraps an existing array in an ObjectArray. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1fa53ee2141b63883c68098b496a090c</Anchor>
    <Abstract>Copy constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae669045b3d6dfad956c989d9630c2f3c</Anchor>
    <Abstract>Create a copy of another array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab95b6ffd0f27b905554a17973137af9f</Anchor>
    <Abstract>Create an array with a single item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaadbed847983fc8fb2a46a9ce29ffb53</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6e8493adbcc71c1592875360bffaa6a7</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a03baa6c06a77a576a05e1898b9ccd19f</Anchor>
    <Abstract>Creates a deep copy of the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a57d2d868e31f8c0e2b21edb461c2f77e</Anchor>
    <Abstract>Sets a new size for the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2ab78a45b4be10cfd619f800bcd1d60f</Anchor>
    <Abstract>Sets the length of the array to zero. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6fb5345981765f2704f9a4e8dbc8f6c8</Anchor>
    <Abstract>Size is the actual number of elements of storage needed for the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sizeAllocated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abd7a4dcb6b92f01733a49ac887dcfd1d</Anchor>
    <Abstract>This is the memory allocated to the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a861101ff2f817b137a481fa4a62b41a3</Anchor>
    <Abstract>Length is the number of real elements of storage available. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memorySize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1ea3042b23181ecc74003379313dcc84</Anchor>
    <Abstract>Actual memory requirements of the array elements and the null terminator (if needed). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaa751e7a03cb2b3f8f067611ed1f1a41</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abf6b8c3cf474bd1c83a56e06be5d3f06</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const Char *</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9058ab8b2528bb5c558c35b3a809c1b1</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator Char *</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0a68d0a36a619621eaf328774f03f7a7</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNullTerminated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abfb405e23328df73fd7d35e9bbdf391f</Anchor>
    <Abstract>Returns whether this is a null terminated array or not. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNullTerminated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>adc8d49b21bb2b6b001e6a4f6bd440f1a</Anchor>
    <Abstract>Changes this array&amp;#39;s null terminator flag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>referTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae2236515507f1cfe0f9e44ecb63dabd4</Anchor>
    <Abstract>Force the internal array to refer to other data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aa15b17d07062a81fa7fbc0fb275d18af</Anchor>
    <Abstract>Adds an item in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f0f23ab21ae6bfe9e438686ac4ae7ed</Anchor>
    <Abstract>Adds several items in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6b2d22402553fb5e22ed7c2966d74de7</Anchor>
    <Abstract>Removes an item at the given index in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad675f23eada53adcadda78f096b3642d</Anchor>
    <Abstract>Places an item at the given index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a64873f1b21d3888d606f555da6a2014a</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0bc80ee77d245f592d75f480293937b6</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a01dda59cdcbad97e572fae969ec7e992</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a525a2021265a54a85212893f650f7deb</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad0ddd1b46e1b7ae32dd0e232ebcece5f</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3027a6cfd4eef94f604a7d446c244cfc</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a91eeab4b6f1f3117f3db0dc384ad3db4</Anchor>
    <Abstract>Returns a reference to an itemn at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ac3b781cca323ed0904e090983f888e36</Anchor>
    <Abstract>Returns a refernce to an itemn at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f8923e3ea4e9737e04a0b35100db841</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad4aaf1341f5ababca4afcc0830a7da1e</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a05befffe91bfd0e853230bc5df784f65</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7ce377d14442501a8fc34fc012a0c6ab</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a29533c8074caba9a86dc7a2482b759f6</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a5f76add3056a6a7d62c7ca46ae442fde</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad605ca1eed55acef9ac9d10fc03a54e4</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc4b30484f09212831b2de869ae9f9d7</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3e9751206cf260cda81d22a6e544d89e</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab10385febd06cc6fda96abb5b735a949</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>areAllEqual</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a76434f8adfca2a2241c39ad67dfa7566</Anchor>
    <Abstract>Determine if each item in the array is equal to the others. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3476b7debbb42f1277d7df5b0d591396</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a19bf576e39e283a2af2cb60d8726ae8b</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a768e3730d2076b1d5eade90b0593397e</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2424be9a3c5826f508b73e007dfe5b0a</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad87075a49fe1cea5bcdaf54f15873c4e</Anchor>
    <Abstract>Returns whether the array contains a particular item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f36d45789d499b691b59fb59294e1b3</Anchor>
    <Abstract>Returns whether the array contains one or more other items. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad2065d1c59f281fb17c78cce33f62b41</Anchor>
    <Abstract>Gets the index of a particular item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a48849d83a5c0c3e9f4968c8faab347da</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3766d14cdfac35751119147622f35322</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>from</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9efe2797629ae5f5ac32f4ff57212b04</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4d6c495b62d477184230022511cee67a</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae735443d708a74182544016f89523de2</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae0a86661df85c2aaf0954b236ed3fa50</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replace</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a596d19434b80e819291091dd81a9c4b4</Anchor>
    <Abstract>Perform a find and replace on the array and return the result. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItem</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a691f1805e81bbe042bcc07d84d7eb8e0</Anchor>
    <Abstract>Remove an item in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItems</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4c9d17a3269ab9904a4fb2219c367b6f</Anchor>
    <Abstract>Remove several items in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>group</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a88aeed1b448dddd7a668400b51f014cf</Anchor>
    <Abstract>Group this array into a 2D array with a particular group size. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1b9f73b45869002f410e320c68d8c068</Anchor>
    <Abstract>Split the array into a 2D array using delimiters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>splitSequence</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a664370848338525597ca379ce6da43de</Anchor>
    <Abstract>Split the array into a 2D array using a delimiting sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deinterleave</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae4f769c721e3b332257513b88e8ed748</Anchor>
    <Abstract>De-interleave an array into a 2D array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>ab00905939be3c3f26e0f82f386eeb994</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ada7cd40ff1de921243a1ba6d0a73fe5d</Anchor>
    <Abstract>Construct a NumericalArray that refers to some other data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>newClear</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35333c3e01ef69f3a2915165c2d3ab83</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with all items set to zero. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee42d54db01e66d26ee8128183dd0136</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) ramping from one value to another. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>series</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a59b2257afb948d77ebb88255ef6e6167</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a series. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>geom</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a30a41a8d2f38fa905f05b339d8e0f9a0</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a geometric series. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab98a6073517a23189d9f8ca7c64b1cef</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad18e1508241e68329259301ed990f219</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9249a9785c5168e6cd4a55aa4aa29c4b</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exprand</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91f325eeff8bd44e9774cf92b1bb438e</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with an exponential random distribution. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sineTable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa474beef987896c1d5122828b433a958</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more sine tables. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineTable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abd89c7757fc3ea124480f8f47de2bbfc</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine tables...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae89ecb5b770c242fd6ed6393a8401bf5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>triangleWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>acff98717b87ea00fdba7713044462f05</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more triangle windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bartlettWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df36fe372f06cf5b404a397f2046b46</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Bartlett windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hannWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1862a2a70951192dd5692a943ffea2ac</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more von Hann (Hanning) windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hammingWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9afba9977eb1067502609fb8d5820766</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Hamming windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>blackmanWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a86956d5e17e4f1f98aab634ee4b4a8e5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Blackman windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1304973429a775ba7ab1bf7eb32e138a</Anchor>
    <Abstract>Creates an array by copying data from another source. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArrayNoCopy</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad64074f04aec194d590476cce27c0b64</Anchor>
    <Abstract>Creates an array by using data from another source. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3b26fc025b8c7874d8dd9727cc430592</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>acfdcf984b61c960961710910fcf4b64e</Anchor>
    <Abstract>Returns an array with a given size. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyWithAllocatedSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc0c8de5e14b9b5257f072c26fe7a5b5</Anchor>
    <Abstract>Returns an empty array with a given size of allocated storage. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; Char &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1d9bd9a6801bb1ed040c9b92a54571ba</Anchor>
    <Abstract>Collect a new array based on the contents of another array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Abstract>A utility class for reading and writing text files. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ad2d429d0e838d57d0cfc67f515827266</Anchor>
    <Abstract>Creates a null object. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a338f6cd042794975435204eb09c8d70c</Anchor>
    <Abstract>Creates a text file reader from the given path. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a758c59029fef81422df1d747f730d60a</Anchor>
    <Abstract>Creates a text file reader or writer from the given path. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a377010f70ad4889d8f2af5674d6d7bd9</Anchor>
    <Abstract>Creates a text file reader from the given path. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>acea2dce80700b409b77213fe7930af50</Anchor>
    <Abstract>Creates a text file reader or writer from the given path. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a942ffe062ee7edb9bdf36ed155f94e80</Anchor>
    <Abstract>Creates a multiple text file reader from the array of files. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a17d14dc424d9ec39adc10b42646ea4d3</Anchor>
    <Abstract>Creates a multiple text file reader with a queue of files. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ae7cdb4aff8ed65558d466a1146f7814f</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a7cede5491f516bd03068a084f631bd4f</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readLine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>abbca8bc350d2ce6ab3541699b38d1ce7</Anchor>
    <Abstract>Attempts to read a line of text from the file. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ad5353add58119fb2440f8a4edfb6f063</Anchor>
    <Abstract>Gets the position of the file stream. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a6ea96222664bb14c0e1779cdb4449951</Anchor>
    <Abstract>Sets the position of the file stream. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a889d157a1b45b2a29d81d557d80d2b15</Anchor>
    <Abstract>Sets the position of the file stream to the end of the file. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a4aa83da8810343bcf358e3030fea8043</Anchor>
    <Abstract>Determines if the file stream is positioned at its end. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>abeffe2b0173f871db094055d48fac24c</Anchor>
    <Abstract>Write a numerical value as text to the file. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a0db9bca3f47cdfa9891acc6ade853104</Anchor>
    <Abstract>Write a string of text to the file. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>abe8abc3a8ad09e5e92e0ceb99b0284aa</Anchor>
    <Abstract>Write a string of text to the file. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeLine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a0f55fc093d50394bc8a70c8ec28b38f7</Anchor>
    <Abstract>Write a string of text to the file and move to a new line. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeLine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ac3edbd65e0883d410931c89979564921</Anchor>
    <Abstract>Write a string of text to the file and move to a new line. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a2507ae955c30b88a59e35a42125b89f3</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Threading</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Abstract>Crossplatform threading support. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sleep</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Anchor>af06e4d7a02ac3054e17b01ae78e39684</Anchor>
    <Abstract>Sleeps the current thread. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yield</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Anchor>a064c003b9a820cabb3768f7466d4d05a</Anchor>
    <Abstract>Yield the current thread. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCurrentThreadID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Anchor>a9453710636ee4e1b579bd1153b00c25c</Anchor>
    <Abstract>Get the calling thread ID. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Threading::Thread</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Abstract>The Thread class itself. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wait</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a69a1d2b26ec63699833c4b3c86719fb4</Anchor>
    <Abstract>Waits for the thread to exit. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>aa09e7addc297931a3dab8740e88b624f</Anchor>
    <Abstract>Returns true if the thread is running, otherwise false. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setShouldExit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>af7b4f2a7a1cd0fac3734f3873dfa96c9</Anchor>
    <Abstract>Signals that the thread should exit. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setShouldExitAndWait</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>afac6cb66c5ab59a6a3f371dbea00e898</Anchor>
    <Abstract>Signals that the thread should exit then waits for it to exit. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getShouldExit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a8f420000728f97481fda9c4be5388c3e</Anchor>
    <Abstract>Returns true if the thread has been signalled to exit, otherwise false. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>ae8f792258076e7a3d886cf3eca777b8c</Anchor>
    <Abstract>Get this thread&amp;#39;s ID. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>run</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a30d723c645d98a76e58f692d5ac26b32</Anchor>
    <Abstract>The run() function: you must implement this in your sublcass. </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sleep</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a6e52ef55ffcba982eb270909564f607e</Anchor>
    <Abstract>A shortcut for Threading::sleep() </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yield</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>afd1de33dbda00617731d7b5498af1b88</Anchor>
    <Abstract>A shortcut for Threading::yield() </Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TimeStamp</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>TimeStamp</Scope>
    </TokenIdentifier>
    <Path>class_time_stamp.html</Path>
    <Abstract>Measures time. </Abstract>
    <DeclaredIn>plonk_TimeStamp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TriggerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Abstract>Trigger. </Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Anchor>a1a55d552225c1cb49f1ee853a4043a76</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Anchor>a6a3d7ce54aed80f5d9b02443f75a4f18</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TriggerUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TriggerUnit</Scope>
    </TokenIdentifier>
    <Path>class_trigger_unit.html</Path>
    <Abstract>Trigger detects signal transitions from zero or less to greater than zero. </Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TriggerUnit</Scope>
    </TokenIdentifier>
    <Path>class_trigger_unit.html</Path>
    <Anchor>a3115477c07a49fc541762cfb5c22e03f</Anchor>
    <Abstract>Create an audio rate sample rate converter. </Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Abstract>For converting sample types. </Abstract>
    <DeclaredIn>plonk_TypeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Anchor>a3f4dcc3838ba83cd831700effd8e589b</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_TypeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Anchor>a20a312fb5082db30c8da2d2c496f3399</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_TypeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeCode</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Abstract>Used to determine information about some types. </Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Anchor>a7d75ea0be6d23e91a066990cb9fdfbfe</Anchor>
    <Abstract>Returns a type code as a text string. </Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Anchor>a882ebce18e7cf390007a0057ffc8cc18</Anchor>
    <Abstract>Used for sample types to determine the minimum / maximum peaks. </Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEpsilon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Anchor>a21390bb1249b064604b42b7a3bffe669</Anchor>
    <Abstract>Used for sample types to determine the smallest non-zero value. </Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeUnitBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TypeUnitBase</Scope>
    </TokenIdentifier>
    <Path>class_type_unit_base.html</Path>
    <Abstract>Convert from one sample type to another. </Abstract>
    <DeclaredIn>plonk_TypeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeUtility</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TypeUtility</Scope>
    </TokenIdentifier>
    <Path>class_type_utility.html</Path>
    <Abstract>A utility for finding out information about certain other classes and types. </Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnaryOpChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Abstract>For applying unary operators. </Abstract>
    <DeclaredIn>plonk_UnaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Anchor>a3039b550f438857d191d9239cc4ded00</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_UnaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Anchor>a3822514b9d1e5d9228219490725ec809</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_UnaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Abstract>A Unit is effectively an array of Channel objects. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa4e6e1e271ce9b2bd88f2fed61a85ce3</Anchor>
    <Abstract>Default constructor. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab51068fdaa593550f896912d0f8e157a</Anchor>
    <Abstract>This creates a Unit with a single Channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac4834eeccc1f4e6d0477f838f1d7e7d4</Anchor>
    <Abstract>Constant Unit constructor. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4e2f4c54281985ab99cf23141c93f6be</Anchor>
    <Abstract>Multichannel Constant Unit constructor. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1e7f8e7dee9ee7885b16a3950646134c</Anchor>
    <Abstract>Copy constructor from the base array type. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7d7469eeee1b574d5299762f8a3d7036</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac5d6ddf8691c78944d448529f37006bb</Anchor>
    <Abstract>Assignment operator from a single channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae9d0d472add7bdcb4aec4baf35c52cc8</Anchor>
    <Abstract>Assignment operator from the base array type. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aab0d06b9df0c6d0a56f469b2ee572c09</Anchor>
    <Abstract>Assignment operator from an array of channels. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const ChannelType &amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a203bfcd4f21588a5420aceac999bb98e</Anchor>
    <Abstract>Cast to a single channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator ChannelType &amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ade9f6a54cd6d44cc0da8efe5b849119e</Anchor>
    <Abstract>Cast to a single channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1dd0d41795ab69cfa25400704756e7b0</Anchor>
    <Abstract>Resamples this unit to a different sample rate and/or block size. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a625bf06d1eaaa4ef63f5182b4e920c63</Anchor>
    <Abstract>Resamples this unit to a different sample rate and/or block size. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a22cfa757eda1d3f2d3e47575133343b4</Anchor>
    <Abstract>Resamples this unit to the default control rate sample rate and block size. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad1b20b39a0059b5a57e2ad9854e34208</Anchor>
    <Abstract>Resamples this unit to the default control rate sample rate and block size. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a63fad077c90ec084384004295be2063c</Anchor>
    <Abstract>Mixes this unit down to a single channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mixBarrier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1e3c137a67daebbcb3624f1a8fea1dd7</Anchor>
    <Abstract>Mixes this unit down to a single channel with and auto-deletion prevention barrier. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>overlapMake</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af1d059efb4426bdec02fb49347a2ea7b</Anchor>
    <Abstract>Create an overlapping process from this unit&amp;#39;s contrinuous stream. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>overlapZeroPad</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3a95883d0b225147292781b5df03d265</Anchor>
    <Abstract>Create an overlapping process from this unit&amp;#39;s contrinuous stream, zero-padding the overlapping secti...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>overlapMix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab3a20c72aae6c5f580937fd580e52c78</Anchor>
    <Abstract>Mix down overlapping process to a continuous stream. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>binary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0042238356ece3ad7e1be72ef27113f2</Anchor>
    <Abstract>Templated binary operator Unit creator. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1e52ca63c54e269169329bce05be18f1</Anchor>
    <Abstract>Templated unary operator Unit creator. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab052c1ec2539f409f1379320873eff0f</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af2a85881811fd4c9be963f58f5dc11c8</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5885b9ef55ccb6f7a2d3df10087f4a8b</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4ddc4405c901c4e9968f17b0afdd0104</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2b25cc7bf3082df746491e462b984c91</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6a925356bb8acb6c03c2ac60376e6a06</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a56b7e5aafd6a5266d95fd8741cd74625</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4ccec6389889403141bd25ba68dd807d</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right argum...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad767c710f7e5df250ccf5910abda9ad5</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and the ri...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae4b30318e4aa1282a63bb2368056c5ce</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad6a6a0117d65930f2398d663ef245c52</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the right...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae1ecc2a1b8d40c478160ed03431c3e37</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6ba2432cc74be9298bd3c192b0143ed9</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afa0eddd28600a7506a9863481d4c1e02</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a89818ec0f5f61878246fc0d4ddafcb95</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6ac2e0177e4eaf2b02a5414d530b0636</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7e05dc9ddb8d98f295ff418e1094c5e2</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6638a368e6f0df3c379f82c9190e2264</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aefc89ea78ceeb1e83bcb40a097f21644</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af7ebf0e1621ed8177cde441336981c5b</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa8430d0a729ddb8767c3909d2a0778b7</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aaa5346ea25bfcbfdc9ba43da8f4417e1</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>acb25c31e47b9e179fdaadb8254dbf50c</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;round&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a15da9bddabae30862c86c6ee2a6f93f6</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a423c5be6d0f0fa29cb8eca3a35f08c1e</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a85a30f565d338f86fdc555ebd6678e86</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right argum...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5bd27af142179dbbbf5507da3e4ab346</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8f680233e55a7ba67ed8c8475bb8aef9</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a280f35446e14b9ac48ed22741ab3d0cc</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abe1e3e06c5a435cd532db02d1d80e090</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a078da189ce93ab2881bb6a53d85b3538</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9752ada891e7efb5c88d15b01ac5f9d9</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a94afba408716d587d6cf12e37024b009</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9daec161d641878241b0501b89626321</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a38bdd3ebbe0da2cef2d98f9419bbaccb</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aed29971a7e336624ec283b8aea7ae733</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a21eca510d279bf205db60fff1a1671ee</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1bca0a42db02c4b659b6d7e84cde4413</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad75c33bf1e8ff58e39761cba64a200ef</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adb1b2d48ee62e21f344cf1ddcc378227</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2f3d2cbefdee581c5b565849279f1e9f</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adc9051b37e209a36a5ee65b995ecf1ae</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a84448d84d430f6ff3871fc1a3cc3a169</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>addecffa735bd1e88cf970ee9bcf32f10</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0bb863b857c84b2b3378a16dc41b9819</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and the ri...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a01e83ef6d9a8fbce2bbaf4368dfe7f67</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aef472e03be11bd3d7786654a33d42fd5</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4a4ce12e10ebac340010385c405675b8</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad8f52f67776413d47810d7a9e809a36a</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aec5ddf3addd712e66ff662f457366027</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0f7e305a249dd9a0e31e391cb5eb3f1a</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2788fc4e482eab46ad17c9d91433bd1e</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac72c920734e9d64fd0a1a7082df44238</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a69d0ece28fe2d9fe115a4361a4996f92</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8f9a48b3cd169ca8e8ad17f4c2234f6a</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a73964135b98f652a722b115acb12b057</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad504c6d0f8c95720ebeff4ac5dbbb288</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afff0f17a1b49a052cf30260dd7a1e044</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aea6f49edee9e6a7d1dcb6256d77df7cf</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a08422917536e61a22b369d853a9ae13c</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adc6a3c6c4e204f4053d66cb17b570d22</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af64c616f5e21a6e4f80edd36dfb334ac</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a68f17f212696d3e02ecb4b56d556ea39</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a572a7cd773f0e0b413b370aa96048402</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a840a7cc718662b9c922507946af5f307</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad2f1bdb6b56245bfc8ddae1c7fcd54d4</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3aee4ba06f965526cc3b11e438ded1bc</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa0f600539f62c713477ee9739c355965</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7fe90bf9e03c5597db511f3ba5d7e566</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a88dc7898f6f01f1a1ff0446c93e83efc</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;squared&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae6a9810556803ee5daa7326c0f47abdc</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8a54ff308552dba1df2bef2389ebacb0</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2d90cd62ad34cbcc1c4a3f7784cf5166</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7161ff753f7a04a60994ec68f7f54b97</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a38074493175d8525f06aad00a63bdd38</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5f855c83fae6c395b2aff51e3e17927b</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a81213ab4e1da9d6c82058bc33489ba2d</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7974aea02ce7cc157ce0406d90812f1f</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adf98b27e6ef0925e19094732ec6c8309</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5483477b5b2a8b4fa51787d0ef59b384</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac07ef4531c536fb2b6d15af57e58eb28</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a507015430a178d65d7b013fcffdc248f</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;distort&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adf81c44cadd686bf41a922848609f915</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5b05047acd3e87fd683dbe389748348b</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac04e2cbbb78a24bf76ad4595c9768f42</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a80a17114fa02e0e65d39948d0b11b470</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linlin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5ab7510fa83f52623906cc83bf63c78b</Anchor>
    <Abstract>Linear to linear mapping. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linlin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af3a9d10ea83d73084891df83d51b737f</Anchor>
    <Abstract>Linear to linear mapping assuming the input is in the range -1...+1. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linexp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9e3d7d1a992ea71b021d90f3d94b13a3</Anchor>
    <Abstract>Linear to exponential mapping. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linexp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0620becf8b88b66fced7091d10c0a464</Anchor>
    <Abstract>Linear to exponential mapping assuming the input is in the range -1...+1. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linsin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a65e355dabd58e7726208cf7797543e72</Anchor>
    <Abstract>Linear to sinusoidal mapping. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linsin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4f4629c645bb808b827be5909630d305</Anchor>
    <Abstract>Linear to sinusoidal mapping assuming the input is in the range -1...+1. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linwelch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a01770462fa02af0eff9887e0984beae8</Anchor>
    <Abstract>Linear to Welch curve mapping. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linwelch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa20ee1dc14ff032a9160a2b3a3a5e62c</Anchor>
    <Abstract>Linear to Welch curve mapping assuming the input is in the range -1...+1. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>explin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aff94de786645c1abaafe7b368650e04a</Anchor>
    <Abstract>Exponential to linear mapping. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator,</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6926f7a29b3c0aeca299c649d885abee</Anchor>
    <Abstract>Create a array of units by concatenation. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setLabel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a29c48bc96d194d72dc3ad84cb073aeb0</Anchor>
    <Abstract>Enables a custom name to be set. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5348d12d89a91a5e11fbf4553c0c8941</Anchor>
    <Abstract>Gets the number of channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a928f9a4fad63d345d9b3e90f8bd9dcd6</Anchor>
    <Abstract>Returns a unit with the single channel specified. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>acf1e90172ac84b85aef55db6b8d4a9a0</Anchor>
    <Abstract>Returns a unit with the single channel specified. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannelObject</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8ca1bcd73705f78b91cb6a136020e7a9</Anchor>
    <Abstract>Returns a single channel object. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannelObject</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2452b3ea3c53923fbd928c6f2ae12808</Anchor>
    <Abstract>Returns a single channel object. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a51d3e16937b30c0469661261e6acb42d</Anchor>
    <Abstract>Returns a unit with the single channel specified. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afd08e14c94c1e344a05b957308caa472</Anchor>
    <Abstract>Returns a unit with the single channel specified. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a336e560bdcb43adae1b83f1dc9f3d114</Anchor>
    <Abstract>Set a particular channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa7027499885c3206dee0b8b95f6e4fa2</Anchor>
    <Abstract>Get the minimum block size in the array of channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a357165ca134a47f7204169b469e80b00</Anchor>
    <Abstract>Get the maximum block size in the array of channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9542a967a9def34c260145c8bb475ed2</Anchor>
    <Abstract>Get the block size of a specific channel in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9cee8690b55ba3b627eb5c741ae4d54c</Anchor>
    <Abstract>Set the block size of all channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlockSizes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a35982dd645c434bef7a8461082d44943</Anchor>
    <Abstract>Get an array of block sizes for the channels in the unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>affc5ede3dc74cbb4cb3ad72ddb444975</Anchor>
    <Abstract>Get the minimum sample rate in the array of channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a293fb73766388495d285208bfd9ce0c3</Anchor>
    <Abstract>Get the maximum sample rate in the array of channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0071179b779aa552a9f6c1a934f838cb</Anchor>
    <Abstract>Get the sample rate of a specific channel in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae6b374388db6dd4125bd22350b765187</Anchor>
    <Abstract>Set the sample rate of all channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRates</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa1a2d7ba651df9c86dc3bb2403bc489b</Anchor>
    <Abstract>Get an array of sample rates for the channels in the unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9025cf358eda7c4888626656f081fd06</Anchor>
    <Abstract>Get the output buffer of a specific channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a401bc1c15bb82bb21d6f076ba4e6248d</Anchor>
    <Abstract>Get the output buffer of a specific channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aca4f91139d383494f22dee321fcfed25</Anchor>
    <Abstract>Get a pointer to the raw samples of a specific channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a953d44d83a62849443aec51b26448dad</Anchor>
    <Abstract>Get a pointer to the raw samples of a specific channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae536f226a7adeba7103ebc68e89da75e</Anchor>
    <Abstract>Set the output buffer of a specific channel to use an external buffer. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5971dc08c2dc28db827df3b7ea671e94</Anchor>
    <Abstract>Set the output buffers of this unit&amp;#39;s channels to use external buffers. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa2edc2a47274a791976db5fced43f713</Anchor>
    <Abstract>Get the current value of a specific channel in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aefa808ea716f79cd9066174e1245244a</Anchor>
    <Abstract>Returns true if this unit contains only a single null channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a68e84d5e4230e63d2350bed2eaa3b726</Anchor>
    <Abstract>Returns false if this unit contains only a single null channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConstant</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a02ab2f43d443613a1210d3c66bbcbda3</Anchor>
    <Abstract>Returns true if this unit contains only a single constant channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotConstant</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8652a2bc8cf41a817ade97402f4f828f</Anchor>
    <Abstract>Returns false if this unit contains only a single constant channel. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsToProcess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a162b0450f9e1a29a2c39c9a53e36f0ad</Anchor>
    <Abstract>Returns true if this unit needs to process for the given timestamp. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shouldBeDeletedNow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a026098ae8d5955481a1fa91eafe68a27</Anchor>
    <Abstract>Returns true if this unit (i.e., one of its channels) needs to be deleted becasue it has...</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a157402ccb4b9282f2870394a48dc6caf</Anchor>
    <Abstract>Process a specific channel in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0b69c2c88f25b4289ba2ac4ed01bebba</Anchor>
    <Abstract>Process all channels in this unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aacb62580c08a9529ae7bdfd4776c4739</Anchor>
    <Abstract>Construct a NumericalArray by copying a NumericalArray of a different type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a459feb8e3dd1be19321cf668e6e77cfa</Anchor>
    <Abstract>Construct a NumericalArray by copying a ObjectArray of a different type. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0a725c439fea0bf8682236cc41072dfd</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6526ef4710bf9cb3828653bd09a2323a</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec with optional null termination. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a27ecf9517575656716efd64c2421f5d5</Anchor>
    <Abstract>Construct a NumericalArray from a null terminated source array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9a8b714189c179bba002e0db4552950d</Anchor>
    <Abstract>Construct an array with a single value. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONKSMARTPOINTERCONTAINER_DEEPCOPY</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df538b5c22eefca40bbda399509e4c8</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad2c4bf652ce698fbfcc6b48560e872f2</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArrayConcatOperatorsDefine</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3cc8f8828424cf547cc8e4e284022f42</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7ff1f849a31b9ab9184b746b8b89bfb5</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5aacd1e9a3176d10404a76c655878438</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a61d87f05779d4a3a9b85afb5574bf30f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae3298d2a687a30eeb7652cb0ec126bd9</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7a24716ebdee03fce916ab6bde2e5d60</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abacad6e8e2de13ad5af6571fb3f433b3</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right arg...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abcfec6e86cacd479898f836192804cde</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3c7e4449d8772d09f4e4f36c413b4066</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a87d46086364127395c4beff4ab0cd39c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a256d96eef169e351f9345d372e2a7c51</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right ar...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a67d74aec7b53783d36417ace9aa3620e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91ffeaa64cbdf6f62ac77d2b544a8f52</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1d2d3be12e69972711e8f12b3dcd9590</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adf8bfcdb66171f2c350cbf747c658a95</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1a51fd9f5c92039d99ece4ba6aac6b8a</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab2031fddca7fa3693a5f9ccef0361c56</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6c31c06e3872a7958942e60d10f491a7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adc56e95e2852e09abf18c6e607d55ade</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a933fd24e227654ffe0b64c01b6440d9e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee6c34cb18fd039e430d3711526677c2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aca8b93c4417b2ae5844cb2e2c91f8b29</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab8ee250cd7f4a510243f2b48448ebd41</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a979f6464d7f9b7db0a9bba737f39a6f4</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;round&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1496f0fde2b5066fe31f23411cf250e0</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a01ef711d91ada45a56d696c972726967</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5016395dbe692b01d8d71429afe320b1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7beaf5dddb8ec1e04df2eb269e8e1061</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa6e11ed620e2308086433f6853ffc87c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5ca184a84b8909f43a7669426ab75bd9</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac3eaf1c0134a2c8d525c8e35ebaef9b1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abfb8ad6d326dd5e8442c2eafcac2fffb</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5bdb220b37c700a11abf90d410afc7c6</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac46c703d2717027f0811b7b16bee8b8d</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a603012061cf5710c93ea0d55fcac56b6</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8707e834d0b2e7fbb97b1ec19f593d01</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adda6459a7c3fb1e0a19d0bf73a0e69c3</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a363ed95c60ea4fa94ac43eeed2a05e96</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9b0679667eb305341a8a5dab2e229096</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3be96208a3fa3c60d7cb6b019dcbe926</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac6080a3eaca1156ede2d6b0eac59c9a2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a74cf71d43eabaf6934d92bbc37977813</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9f7d0bcd674c136a85445300f4bb4276</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae527e5217f2a50a49278ab4351ec6df1</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad1f340506fc435e4d3d2a42fb43f2672</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8f692ca7c9e4ccba4d97f062af7423d7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9602ab8f6789daa697975ccbcebcba93</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a383f5895662731257f7f742792436cea</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a69713dff9d72be1fda6e08796445bd3c</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1aaee717bd826e57456592d1067ac255</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a50cfa7d7cd308b6b55f5bc72eca37676</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a7bef88d67caf9e48b3abf0606c43114e</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3b3dcabdb4b69b1ac38aa93f38750ee4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a17c3b2cd81dbb5a993d2c3499b7b4b03</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a026e15b0b590d47f92524095ed825e7d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac2c36b167d73636ad52594fdd80c0e90</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa57acae179c9bca876150700ba12f960</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a194b90e09654651ace0ab7012dab6981</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad14c84d56ef65f05ebd687078129aa08</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8357800856bf40122000e000ac61603d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac8eb392cda2b876a629c28404a353b03</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a87fd3cb4ac296df1cded1620ef85095b</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3648f3bd140748a9c2eaa6e214f5bcc7</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afb2c8023836126cebe2e655a8dbe215f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aed37c1a614785fa7998b4b5df7dacabc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad08c949be5fc9f4a42166ed5abaece40</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afe76f6f8924310fea64b9af75a2aa153</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9d33035941641df6af32c30bcf998682</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a50e9f29e1c6ff8aac6865e0263c5a4ab</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac27715339d2a16c3c1559c3e13cedb15</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adc2d9e3dc19cc98ec9b9305c07044fd3</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a28b2d6897b787a132ee243fc31825c38</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;squared&amp;#39; function to this one. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9e15020fccbaa50ac21414abe19f3f93</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae9ca73d7cf0714284fd5c5c2784f51c4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2e8de1992b2fc1595fa555874640932d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2f043f7110480dda022b0f31a75bdf68</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa2762bbe7728092d1c639ede955d2744</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>af5ec12838b228444f67ed02de8750049</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a137fbe32132c8a0ffc8483cee85a65d2</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35823ca2eb4cc149c5b5d5325a92f44f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a338da375ef16b007936baf38f1f3f15a</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a08d7acb162896bf5a16ac1a256ba917c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a773e7cabeffa9bb56db18109c02bcfdc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3c5cdbaaae5df820f8b739f3806db20a</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;distort&amp;#39; function to this one. ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa91ee71738f92713e708be2867181ee3</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a699c306c0700b6264dcdd9e151cfa7dd</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4f1171776c224c9b1370410469ac982c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a63e7070c30b5df16f1fef55cd8647c15</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a101ace1e49b4d50bc0f7c42be825ab2d</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>af8b9946ea130d57e18ff368333548c39</Anchor>
    <Abstract>Creates an empty array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f088cd226ecae84f2df495bf0947ec7</Anchor>
    <Abstract>Creates an array with a particular size/length. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae99f2e9c3d2b031f419d5a3a4a17381b</Anchor>
    <Abstract>Wraps an existing array in an ObjectArray. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1fa53ee2141b63883c68098b496a090c</Anchor>
    <Abstract>Copy constructor. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae669045b3d6dfad956c989d9630c2f3c</Anchor>
    <Abstract>Create a copy of another array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab95b6ffd0f27b905554a17973137af9f</Anchor>
    <Abstract>Create an array with a single item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaadbed847983fc8fb2a46a9ce29ffb53</Anchor>
    <Abstract>Concatenate two arrays into one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6e8493adbcc71c1592875360bffaa6a7</Anchor>
    <Abstract>Assignment operator. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a03baa6c06a77a576a05e1898b9ccd19f</Anchor>
    <Abstract>Creates a deep copy of the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a57d2d868e31f8c0e2b21edb461c2f77e</Anchor>
    <Abstract>Sets a new size for the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2ab78a45b4be10cfd619f800bcd1d60f</Anchor>
    <Abstract>Sets the length of the array to zero. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6fb5345981765f2704f9a4e8dbc8f6c8</Anchor>
    <Abstract>Size is the actual number of elements of storage needed for the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sizeAllocated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abd7a4dcb6b92f01733a49ac887dcfd1d</Anchor>
    <Abstract>This is the memory allocated to the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a861101ff2f817b137a481fa4a62b41a3</Anchor>
    <Abstract>Length is the number of real elements of storage available. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memorySize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1ea3042b23181ecc74003379313dcc84</Anchor>
    <Abstract>Actual memory requirements of the array elements and the null terminator (if needed). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaa751e7a03cb2b3f8f067611ed1f1a41</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abf6b8c3cf474bd1c83a56e06be5d3f06</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const ChannelBase&lt; SampleType &gt; *</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9058ab8b2528bb5c558c35b3a809c1b1</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator ChannelBase&lt; SampleType &gt; *</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0a68d0a36a619621eaf328774f03f7a7</Anchor>
    <Abstract>Returns a pointer to the raw array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNullTerminated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abfb405e23328df73fd7d35e9bbdf391f</Anchor>
    <Abstract>Returns whether this is a null terminated array or not. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNullTerminated</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>adc8d49b21bb2b6b001e6a4f6bd440f1a</Anchor>
    <Abstract>Changes this array&amp;#39;s null terminator flag. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>referTo</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae2236515507f1cfe0f9e44ecb63dabd4</Anchor>
    <Abstract>Force the internal array to refer to other data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aa15b17d07062a81fa7fbc0fb275d18af</Anchor>
    <Abstract>Adds an item in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f0f23ab21ae6bfe9e438686ac4ae7ed</Anchor>
    <Abstract>Adds several items in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6b2d22402553fb5e22ed7c2966d74de7</Anchor>
    <Abstract>Removes an item at the given index in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad675f23eada53adcadda78f096b3642d</Anchor>
    <Abstract>Places an item at the given index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a64873f1b21d3888d606f555da6a2014a</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0bc80ee77d245f592d75f480293937b6</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a01dda59cdcbad97e572fae969ec7e992</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a525a2021265a54a85212893f650f7deb</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad0ddd1b46e1b7ae32dd0e232ebcece5f</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3027a6cfd4eef94f604a7d446c244cfc</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a91eeab4b6f1f3117f3db0dc384ad3db4</Anchor>
    <Abstract>Returns a reference to an itemn at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ac3b781cca323ed0904e090983f888e36</Anchor>
    <Abstract>Returns a refernce to an itemn at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f8923e3ea4e9737e04a0b35100db841</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad4aaf1341f5ababca4afcc0830a7da1e</Anchor>
    <Abstract>Returns a reference to an item at the specified index. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a05befffe91bfd0e853230bc5df784f65</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7ce377d14442501a8fc34fc012a0c6ab</Anchor>
    <Abstract>Returns the first item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a29533c8074caba9a86dc7a2482b759f6</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a5f76add3056a6a7d62c7ca46ae442fde</Anchor>
    <Abstract>Returns the last item in the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad605ca1eed55acef9ac9d10fc03a54e4</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc4b30484f09212831b2de869ae9f9d7</Anchor>
    <Abstract>Returns an item from the array chosen at random. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3e9751206cf260cda81d22a6e544d89e</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab10385febd06cc6fda96abb5b735a949</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>areAllEqual</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a76434f8adfca2a2241c39ad67dfa7566</Anchor>
    <Abstract>Determine if each item in the array is equal to the others. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3476b7debbb42f1277d7df5b0d591396</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a19bf576e39e283a2af2cb60d8726ae8b</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a768e3730d2076b1d5eade90b0593397e</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2424be9a3c5826f508b73e007dfe5b0a</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad87075a49fe1cea5bcdaf54f15873c4e</Anchor>
    <Abstract>Returns whether the array contains a particular item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f36d45789d499b691b59fb59294e1b3</Anchor>
    <Abstract>Returns whether the array contains one or more other items. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad2065d1c59f281fb17c78cce33f62b41</Anchor>
    <Abstract>Gets the index of a particular item. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a48849d83a5c0c3e9f4968c8faab347da</Anchor>
    <Abstract>Search for a particular sub sequence withing the array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3766d14cdfac35751119147622f35322</Anchor>
    <Abstract>Search for any items in a given array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>from</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9efe2797629ae5f5ac32f4ff57212b04</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4d6c495b62d477184230022511cee67a</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae735443d708a74182544016f89523de2</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae0a86661df85c2aaf0954b236ed3fa50</Anchor>
    <Abstract>Return a new array which is a subarray of this one. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replace</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a596d19434b80e819291091dd81a9c4b4</Anchor>
    <Abstract>Perform a find and replace on the array and return the result. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItem</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a691f1805e81bbe042bcc07d84d7eb8e0</Anchor>
    <Abstract>Remove an item in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItems</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4c9d17a3269ab9904a4fb2219c367b6f</Anchor>
    <Abstract>Remove several items in-place. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>group</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a88aeed1b448dddd7a668400b51f014cf</Anchor>
    <Abstract>Group this array into a 2D array with a particular group size. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1b9f73b45869002f410e320c68d8c068</Anchor>
    <Abstract>Split the array into a 2D array using delimiters. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>splitSequence</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a664370848338525597ca379ce6da43de</Anchor>
    <Abstract>Split the array into a 2D array using a delimiting sequence. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deinterleave</Name>
      <APILanguage>unknown</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae4f769c721e3b332257513b88e8ed748</Anchor>
    <Abstract>De-interleave an array into a 2D array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad918f5ddca5ca251ffa25864e0b742a4</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createFromInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af2abd695b7c1ffe4e611f442fa2f6677</Anchor>
    <Abstract>Primary means of creating Unit objects. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>proxiesFromInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0f18dcc14ac6735c7d88b4bcfbf8b4ed</Anchor>
    <Abstract>Primary means of creating Unit objects with proxies. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyMulAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0dd8ee932ba7f5da470c3616ad9eaba7</Anchor>
    <Abstract>Apply multiply and addition operators to another unit. </Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ada7cd40ff1de921243a1ba6d0a73fe5d</Anchor>
    <Abstract>Construct a NumericalArray that refers to some other data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>newClear</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35333c3e01ef69f3a2915165c2d3ab83</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with all items set to zero. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee42d54db01e66d26ee8128183dd0136</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) ramping from one value to another. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>series</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a59b2257afb948d77ebb88255ef6e6167</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a series. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>geom</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a30a41a8d2f38fa905f05b339d8e0f9a0</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a geometric series. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab98a6073517a23189d9f8ca7c64b1cef</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad18e1508241e68329259301ed990f219</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand2</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9249a9785c5168e6cd4a55aa4aa29c4b</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exprand</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91f325eeff8bd44e9774cf92b1bb438e</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with an exponential random distribution. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sineTable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa474beef987896c1d5122828b433a958</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more sine tables. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineTable</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abd89c7757fc3ea124480f8f47de2bbfc</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine tables...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae89ecb5b770c242fd6ed6393a8401bf5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>triangleWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>acff98717b87ea00fdba7713044462f05</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more triangle windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bartlettWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df36fe372f06cf5b404a397f2046b46</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Bartlett windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hannWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1862a2a70951192dd5692a943ffea2ac</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more von Hann (Hanning) windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hammingWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9afba9977eb1067502609fb8d5820766</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Hamming windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>blackmanWindow</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a86956d5e17e4f1f98aab634ee4b4a8e5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Blackman windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArray</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1304973429a775ba7ab1bf7eb32e138a</Anchor>
    <Abstract>Creates an array by copying data from another source. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArrayNoCopy</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad64074f04aec194d590476cce27c0b64</Anchor>
    <Abstract>Creates an array by using data from another source. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3b26fc025b8c7874d8dd9727cc430592</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>acfdcf984b61c960961710910fcf4b64e</Anchor>
    <Abstract>Returns an array with a given size. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyWithAllocatedSize</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc0c8de5e14b9b5257f072c26fe7a5b5</Anchor>
    <Abstract>Returns an empty array with a given size of allocated storage. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect</Name>
      <APILanguage>unknown</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray&lt; ChannelBase&lt; SampleType &gt; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1d9bd9a6801bb1ed040c9b92a54571ba</Anchor>
    <Abstract>Collect a new array based on the contents of another array. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitMixerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Abstract>Mix an array of units to a multichannel unit. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Anchor>a98f1d1e153c8ebf516b828cc7937a5ac</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Anchor>a9f40889dc26b61f8fa8340ce4d2d6f50</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Abstract>A template class for storing any variable type. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aaee8f7b83d0852076b6251679289dcde</Anchor>
    <Abstract>Default constructor. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc64133e0e95c4c3f3fa55c9edbe77e1</Anchor>
    <Abstract>Initialised with a specific internal. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae28f084e871562a27b62ae420d0f82dc</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a607f32d2dfcdfeef6d5ea68d42328136</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a03775764169975aa6bdd58cd5e729700</Anchor>
    <Abstract>Initialised with a specific value. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a23024f58133373d58666fbe1325a950e</Anchor>
    <Abstract>Initialised with a pattern/sequence. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a086d7da52f4416ea5814c4ec06e67768</Anchor>
    <Abstract>Initialised with a pattern/sequence. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab51b36e8035550e747a7d612551816e0</Anchor>
    <Abstract>Create a Variable that converts from one type to another. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5c2bed144a52f71a5ff057cc70e2490a</Anchor>
    <Abstract>A convenience for setValue(). </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a039e7aa6f46e5115f8a835612a7607f5</Anchor>
    <Abstract>Returns the current value. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValuePtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae001f8395a0aac15d7b663fd48f9190f</Anchor>
    <Abstract>Returns the current value. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator Type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4b62e9398f59e797f196f291023b9ec8</Anchor>
    <Abstract>Returns the current value. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a972257a7d4905e8a6ba879934b17a5fd</Anchor>
    <Abstract>Returns the next value. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae00152b8b3b8151421857deea2dc02f7</Anchor>
    <Abstract>Sets the current value. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>binary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6f0b057793e46b0d507d3289759d3fdd</Anchor>
    <Abstract>Builds a binary operation from two source Variables. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a0f335dbaa25a63de85abe98822f0ed</Anchor>
    <Abstract>Builds a unary operation from a source Variable. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa68a9b3bed392f5c0653edbe1121d704</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a033c3627b51039f5954622e189228fd3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a96c3c016f3ae35c028ac56e5fdcc3948</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af616ff1720bb62c5cdf38d99b65347d0</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abe8eb76afbc9a1333c93c76b4ffc47a5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4a100f4394a7b50a039e816934320a5d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab3aad47f5d35845de82bdcc23cebadeb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right argume...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a70df26faaaba6fba941b7309ef63e759</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right argum...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a117662f99ba5006e975a296e36c3272a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and the ri...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab1632233c3e21db6b7c0cad3c6dfccd0</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a29ca1669dc169d0474a3ebe069f44415</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the right...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac0b9acb346941b6c3b0e1905dc7125dc</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2813ae66a082bb4bb35cf55624c1373d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6677f06ba42fa81dfa9d25510e9f48ed</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae38887e43624c752febab4c7a5f83ba4</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a010e5ea46c6bd6dabcfba7469de1eadb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a155b826972cc4231b632050b6c91ef53</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac163622355c742768be010e1ff92a6a1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1ad67bd1ced8bb985499cd30dde40dd7</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>added8094a984f8614c6283ed1fd2bc91</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9aa7fa7eca31ecc4250f3820a710223e</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7e1863e95635b70172259e64e936a370</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a56af338b3e7e6f4753a61e0f31918949</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;round&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8db05fd3d96b322c9b9ec9bb91e7780c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a96247f9e282807c9cd8947550293a25c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argument...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa92fc450dad45deb2abb39bdd52ffaa3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right argum...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a238cef7603e8d0d415e3f7daf0bb32ac</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0de9c9e3bfab9f39d393af00ef8bb3dc</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa6ba9c04c94a5d8cfbb86135792c4066</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8daac18d512be9ffda57f5841a117419</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac87257b81e06b9c667ec693f2eff1727</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0318a28a8d6e1558bcb3062bc4c0c7df</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4476c58b465cee6df36ca4bb62363fc5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5cc80091d0fb77dc676a69d055883bcb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9294ea3c179b72ec3df293f7d98eb2c6</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afc5eae44d9318aafcbff7570e752411b</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abf6e2cc24577ff2fcd2d00e46894e7e1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab248631c5e92ab5e8328409bbaa382c2</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8d25fc97924496cee6266341ab8bb060</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3cd7209371976db10771558c44d53b70</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0cabd713245207a11cc5b6eb800d78cc</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a21c0c28e5ddb449b1f13c9442e3980</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab529838d787722400b03f83e7911f2d3</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae57b2ee912fab03207de0aab994d7c53</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and the r...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc1fdb679811567fb8fba82241def51e</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;&amp;#39; operator to this and the ri...</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a746e9bef06f6957a423abe18f63f539c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a474f5e8f941787e3fc3c69e01b4e935f</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&lt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad9ebbe4f1df6e9c3bb3a235261a65070</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a53d337065b2658d74b200285097b8f09</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&gt;=&amp;#39; operator to this and the right argument. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a857d2e28f6b8c67802773dcf7d73942a</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;move&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0f638daa507070519be46d206f8ff30f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;inc&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5dd813b0fd9b0ad412a9104b439ba0dc</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dec&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5e3e78231ddccb73fc55311932d8fb8e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;abs&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a927ebf29a03105d958b653ba4f638045</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log2&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac9e340dc450ac5da2d63dcae019189e4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;neg&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad37a53370b744ed217547bcdc966f746</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;reciprocal&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a47d81bb38a371b5838095fe7a9db33a4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sin&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3ca439cdaaef249bda5bb4656e64aa4b</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cos&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a11fc366fdbf6af4f4f820ae8e15ae93f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tan&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4a774315b8ebef5ff656104afd0aa8b0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;asin&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a511c687ecead8fd322a71bb61a78c546</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;acos&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1a67a72574226c9928ef0a243d88e9b4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;atan&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>acae49e93412ff41badc4619a22acd6c5</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sinh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab60e3b698985ac6ce498a648218d258f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cosh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab267f7758e724b9059651176699f1993</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tanh&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>adeeba19e7c51d87b5f64e30255c461f0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sqrt&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6b5feb083a416628daa9b20529136ccf</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae5af611a700e5ad9b1c52dc18623bc87</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log10&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a73ef7254575856f8a4d7f7206f609f0e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;exp&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a73d3d45c4b54b431c70674c5449801f0</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;squared&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5d7d33dd4d80978564a571d428c912b4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cubed&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7e092b4ae2a1ac06855e39d42d165015</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;ceil&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa51a0bbf36eecaa4247510afc0c82dd6</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;floor&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9f934eaa82ff690293a391535a77fe6d</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;frac&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9e4e2b77a3e6b5c9658d0e6d08f47b5e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sign&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af618ee51529ef7f028245f7a3f93dea4</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;m2f&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae703472fce347e00e50c786bb5b8faf2</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;f2m&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a17a859fa38ca289f1741ff7bf3e6c3e3</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;a2dB&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac7eecf837c73bb80330648a681c4a763</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dB2a&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afc95585b298035aba9819a543f429d0f</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;d2r&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab331f4d9b978e2273d253b961ba78fb1</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;r2d&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8c585a15ab2ab4d1e555cb31cda73115</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;distort&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a87ecc4996f67a1eb13dbb4913a9d2f09</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;zap&amp;#39; function to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac4716adbc550382141748e51651388c3</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;-&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afebaf666d804900a9d430733ba60f5ac</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac06acbf768ec112154e48881b551181c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afa7cc3ee279465c2e6dcaade5524cb93</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a44f9ee14363eb19a3a31b462be733fd7</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a885a985740d002802d1d0fcf8a82c403</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac6051f1df5e6fa73a0ea5a9c015ee901</Anchor>
    <Abstract>Get a weakly linked copy of this object. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable&lt; Type &amp; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Variable&lt; Type &amp; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable_3_01_type_01_6_01_4.html</Path>
    <Abstract>A variable container for objects. </Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WeakPointer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>WeakPointer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer.html</Path>
    <Abstract>Holds a weak reference to a SmartPointer. </Abstract>
    <DeclaredIn>plonk_WeakPointer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WeakPointerContainer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>WeakPointerContainer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer_container.html</Path>
    <Abstract>This stores a weak reference using a WeakPointer. </Abstract>
    <DeclaredIn>plonk_WeakPointerContainer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WeakPointerContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WeakPointerContainer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer_container.html</Path>
    <Anchor>aff51da46d7d9c2350a79ab0f98b7f977</Anchor>
    <Abstract>Copy constructor. </Abstract>
    <DeclaredIn>plonk_WeakPointerContainer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WeakPointerContainer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer_container.html</Path>
    <Anchor>a7cc4fd4a750be063bb921930ca43f6e0</Anchor>
    <Abstract>Assignment operator. </Abstract>
    <DeclaredIn>plonk_WeakPointerContainer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WhiteNoiseChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Abstract>White noise generator. </Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Anchor>a93efd067508f7a26ad718b730ad481d6</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Anchor>a023d363df62f27e5703ff9ceafd9ed57</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WhiteNoiseUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>WhiteNoiseUnit</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_unit.html</Path>
    <Abstract>A white noise generator. </Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>WhiteNoiseUnit</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_unit.html</Path>
    <Anchor>a11be90c63263fb248b8a8c359f19edf9</Anchor>
    <Abstract>Create an audio rate white noise generator. </Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>WhiteNoiseUnit</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_unit.html</Path>
    <Anchor>a7078022f458c95a5a92a9b5eb7959a98</Anchor>
    <Abstract>Create a control rate white noise generator. </Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZMulChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Abstract>Complex multiplication channel. </Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Anchor>a5004b9cb82e11cf72f468ff5126221d6</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value. </Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Anchor>a89487db29f0a522137935dc47b4e1911</Anchor>
    <Abstract>The DSP function. </Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZMulUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ZMulUnit</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_unit.html</Path>
    <Abstract>Complex multiplication Unit. </Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ZMulUnit</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_unit.html</Path>
    <Anchor>a5fd90e588b26d6f8b8b398bc989a595f</Anchor>
    <Abstract>Complex multiplication of signals. </Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONK_NAMESPACE::ForceErrorStruct</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLONK_NAMESPACE::ForceErrorStruct</Scope>
    </TokenIdentifier>
    <Path>struct_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_force_error_struct.html</Path>
    <Abstract>To help raise compiler errors when function prototypes change. </Abstract>
    <DeclaredIn>plonk_StandardHeader.h</DeclaredIn>
  </Token>
</Tokens>
