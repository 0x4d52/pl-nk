<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>deprecated</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>deprecated.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_classes.html</Path>
    <Abstract>Crossplatform atomic operation classes.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicMemoryBarrier</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_classes.html</Path>
    <Anchor>ga1d408b07d8283ec736827ab55b0c5a28</Anchor>
    <Abstract>A crossplatform read/write memory barrier.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicIClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Abstract>Atomic integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicIRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga183ad90f901951728767c264232e8769</Anchor>
    <Abstract>An opaque reference to the Plank AtomicI object (atomic 32-bit integer).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga084a140343047197fd8519bbb78af951</Anchor>
    <Abstract>Creates and initialises a Plank AtomicI object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga9772f673c27a18835f4a9f4a6137ce10</Anchor>
    <Abstract>Create a Plank AtomicI object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga904d8121b3e11bcf6a052c14bf212b53</Anchor>
    <Abstract>Initialise a Plank AtomicI object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gafaf53ffba0c9d4b8cf46a947b95c509b</Anchor>
    <Abstract>Deinitialise a Plank AtomicI object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga346d43867e1875c609c31eb8b8776e54</Anchor>
    <Abstract>Destroy a Plank AtomicI object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga2c42024a78b9aa3b72ae972e35ee97a1</Anchor>
    <Abstract>Get the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga5c45ee9a46a9aff5c99e275b1024e100</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga5f655ad301d5411b649dee356ecb3509</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gaa590426da43199c5ec0cc9f591f3ea49</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga05f7d84887eb5303d3b99f13f37865e2</Anchor>
    <Abstract>Swap the current value with a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga942e0a28b933585446ba7502810ed051</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga6bb09bc96a296c65f7cf14bf8e866eb5</Anchor>
    <Abstract>Set the current value to a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gaf65dbf801fb2db041522c7f7c016666b</Anchor>
    <Abstract>Add a value to the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gaca34eea11afeb3a7d4bd93703150045c</Anchor>
    <Abstract>Subtract a value from the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gadfc2f7f017bd771544523669e5d1fe93</Anchor>
    <Abstract>Increment the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>ga4d6336d36324351a2754b7399570d80c</Anchor>
    <Abstract>Decrement the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicI_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_i_class.html</Path>
    <Anchor>gac4d323d789cf87e182bbb698a31af3cb</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Abstract>Atomic long.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga1e845a046ff737f9dfe05a151177817c</Anchor>
    <Abstract>An opaque reference to the Plank AtomicL object (atomic long integer).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga9ab653eed56a9348e163e2cb9aeb1956</Anchor>
    <Abstract>Creates and initialises a Plank AtomicL object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gab81e467bc4edf35e4e73958f7c0ae939</Anchor>
    <Abstract>Create a Plank AtomicL object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gabbe48e2a35f12db2ebbf9e0577724e20</Anchor>
    <Abstract>Initialise a Plank AtomicL object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga58d95f319b226d74327e1fe5b2284ba5</Anchor>
    <Abstract>Deinitialise a Plank AtomicL object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gac69db6121b2e9f78079d8d317dbf9923</Anchor>
    <Abstract>Destroy a Plank AtomicL object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga65d89347daa3d09b596b832ba8f22686</Anchor>
    <Abstract>Get the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga983cb185dfec2d2c3007cf2ab64b3d96</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga04206b79f7d77ed5101e0c32948bae29</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gaa64abd293602ce72352a2122929a8896</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga5d7e1c25233e5ab3a30b326f83bab7ca</Anchor>
    <Abstract>Swap the current value with a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga39788b8a42bff1c04b141aa5cf5b54c5</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gac225d372bc45668ad6dcf828692b8863</Anchor>
    <Abstract>Set the current value to a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>gae3c1bab1c638a3fdac9cef65ef596a26</Anchor>
    <Abstract>Add a value to the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga03ad623f9ddc6c911993edcc1bc2f9dc</Anchor>
    <Abstract>Subtract a value from the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga804bb1772207f222064cf22151074d66</Anchor>
    <Abstract>Increment the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga838d7c26adffb74ff8b6e172f6339b72</Anchor>
    <Abstract>Decrement the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicL_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_class.html</Path>
    <Anchor>ga44a1ea800743af176cf5bf99cdd51e3e</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLLClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Abstract>Atomic long long.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicLLRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga4c5b247135d72b51b9a41f2fdc41b470</Anchor>
    <Abstract>An opaque reference to the Plank AtomicLL object (atomic 64-bit integer).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga8b49550306f7def01816d0f232937ce8</Anchor>
    <Abstract>Creates and initialises a Plank AtomicLL object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga168c9b8204e1ce8d0082f9373a0a68de</Anchor>
    <Abstract>Create a Plank AtomicLL object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga63c22ee75542d22de18c3ee8ea0d4f84</Anchor>
    <Abstract>Initialise a Plank AtomicLL object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga9cb0b8a45eef171e323cf574bf8bc845</Anchor>
    <Abstract>Deinitialise a Plank AtomicLL object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga35b05875e1e65bde4c1eada03e4fb6a1</Anchor>
    <Abstract>Destroy a Plank AtomicLL object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga493b452b5bd534d03a966ca6cf708cc2</Anchor>
    <Abstract>Get the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga21c5c939f54109d335bb9aea28f61ecd</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga189704ff261ff690596e29490e257b0a</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga617eb7d7112df3f7c9775e19c83c11f9</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>gac5ded8be43a35d8d4a1dcdce757dbe29</Anchor>
    <Abstract>Swap the current value with a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga3d9e54b1cf56edf3eb9240d5fa57cbd9</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>gad242081b1122017a8e1084b8c305dc4b</Anchor>
    <Abstract>Set the current value to a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga0b157acea69db19c8721116f174ea5d9</Anchor>
    <Abstract>Add a value to the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga00d526fd6f00f53813aa9801a5ca1571</Anchor>
    <Abstract>Subtract a value from the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga4e4f3455a71e33fc644ba3ec53928818</Anchor>
    <Abstract>Increment the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>gad3271497b9187e45e4c3e6ad6d049fb1</Anchor>
    <Abstract>Decrement the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicLL_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_l_l_class.html</Path>
    <Anchor>ga1f48b66801f8caefce3dfa09056a8246</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Abstract>Atomic float.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga780002eda1e06c2ee5450fbaadfbe3a0</Anchor>
    <Abstract>An opaque reference to the Plank AtomicF object (atomic float).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga44f26d7ec072baba8ad73503cc6f005f</Anchor>
    <Abstract>Creates and initialises a Plank AtomicF object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga00788db9d1e495cb26cf051fff3a95c6</Anchor>
    <Abstract>Create a Plank AtomicF object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga5a18d4cb7b7fa75deb81c7c70c123ce5</Anchor>
    <Abstract>Initialise a Plank AtomicF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gab8293227a3df4d0cc339736217d76516</Anchor>
    <Abstract>Deinitialise a Plank AtomicF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gae5c92f1c67bc1f91b04dfc9ba5ae12b4</Anchor>
    <Abstract>Destroy a Plank AtomicF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gae69e65313f4561b281b0b49a9d81b703</Anchor>
    <Abstract>Get the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga9cc956a0f0f415b9139fd26fcd765727</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gae1549c0bd40dbd33c02eb58920dbf44d</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga9cbfa8d926cbe08ebfe246c3dffa46f1</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga2b76a3dfa8078000fed1b1253502623a</Anchor>
    <Abstract>Swap the current value with a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gaf056e2d6a85119ac9afe494b1a1eefbc</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gad6e043e6608f376d8ddc37ef53c2537a</Anchor>
    <Abstract>Set the current value to a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga1da8d69174b16754afb44635acf6e22b</Anchor>
    <Abstract>Add a value to the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gac894318131c29763f938e54f46acf681</Anchor>
    <Abstract>Subtract a value from the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>gad2cd043f5b0dcf4c5f995b739514ea8c</Anchor>
    <Abstract>Increment the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga3fd0ab88e232fbf160162d7bd27bb2bb</Anchor>
    <Abstract>Decrement the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicF_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_f_class.html</Path>
    <Anchor>ga042b241707e814b5df4c2e5fceeae814</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicDClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Abstract>Atomic double.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicDRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gabe60fb3376736ef01c4806acb7625538</Anchor>
    <Abstract>An opaque reference to the Plank AtomicD object (atomic double).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga78ff9999cd68e3ba77a4ad5f63ebdf8a</Anchor>
    <Abstract>Creates and initialises a Plank AtomicD object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga05893946955095aad8f0ef6f3e66a687</Anchor>
    <Abstract>Create a Plank AtomicF object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga9752b2b8f5611240cb89e2175ab033bc</Anchor>
    <Abstract>Initialise a Plank AtomicD object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gaff18b997fc53d47280a9282692150622</Anchor>
    <Abstract>Deinitialise a Plank AtomicD object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga662d4e0f3429b559542e1e1c22e5d5cc</Anchor>
    <Abstract>Destroy a Plank AtomicD object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gaa5b42c20d0ee79dcc7531983b170f273</Anchor>
    <Abstract>Get the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga575b80f9858ebe0e3ae657a9bcfc457a</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga9aa42118322617be68b12220e8ea161e</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga7fb457d231451ad47fcb8991a1677d1f</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga66f8779266de552bfb1c3ff1fccc1864</Anchor>
    <Abstract>Swap the current value with a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga0489b7f3a14cbc830ded341fccdd06b1</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga3dad9256d5fb27f15148ca77bfe8fce0</Anchor>
    <Abstract>Set the current value to a new value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga1088772204b229c2f7aa0c9788e19090</Anchor>
    <Abstract>Add a value to the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga09bccdd8548e51735eb4cd8134563a8d</Anchor>
    <Abstract>Subtract a value from the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga57a14b4c79fd3fc522cc972e319a713d</Anchor>
    <Abstract>Increment the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>gacb13145f02f52ba7168bae6868a4c823</Anchor>
    <Abstract>Decrement the current value by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicD_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_d_class.html</Path>
    <Anchor>ga415d4543a2b14bec247b12e175340070</Anchor>
    <Abstract>Swap the current value with a new value if a specified old value is still the current value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Abstract>Atomic pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gac6ebd37367523407839a0f9a4fc5d9ea</Anchor>
    <Abstract>An opaque reference to the Plank AtomicP object (atomic pointer).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga91086b7040d5c5d0594cceb1d8c27550</Anchor>
    <Abstract>Creates and initialises a Plank AtomicP object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga6d7802aad6952b25b20709f0257e8165</Anchor>
    <Abstract>Create a Plank AtomicD object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gaaa6bfeaf83df3bc65925013e23b61415</Anchor>
    <Abstract>Initialise a Plank AtomicP object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga5e1f3fae6395b53d8dcee30ea05f0764</Anchor>
    <Abstract>Deinitialise a Plank AtomicP object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga48a4a79f0f042e2971afe827db1e5efd</Anchor>
    <Abstract>Destroy a Plank AtomicP object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga68f8298157fccc5a71a0785e37465a03</Anchor>
    <Abstract>Get the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga2e426d5cc548af7df01d1455c0709068</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga099f222754557748fe9db77db8428cfe</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gac1db0b657d75a4100cac3f3b8e454685</Anchor>
    <Abstract>Not used for this class.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gaf34822f085b42e6cf2c8a8bf2a33621c</Anchor>
    <Abstract>Swap the current pointer with a new pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga98e1591583586b6a0230381f68a860ae</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga956fba70602f11fa64747eeab5158bec</Anchor>
    <Abstract>Set the current pointer to a new pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga306a94df2dd34d91234ab9b73bffda4d</Anchor>
    <Abstract>Offset current pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga6c4c61a1de6e2f7999c6ff6912dbe4d7</Anchor>
    <Abstract>Offset current pointer in a negative direct.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>gaf79c17977d7445ff5fbf6ba58a34748f</Anchor>
    <Abstract>Increment the current pointer by 1 byte.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga20daf4da5c87a2d8e48405cc8c091dae</Anchor>
    <Abstract>Decrement the current pointer by 1 byte.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicP_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_class.html</Path>
    <Anchor>ga7bbfec08311361e425765d80d8ee4287</Anchor>
    <Abstract>Swap the current pointer with a new pointer if a specified old pointer is still current.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPXClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Abstract>Extended atomic pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAtomicPXRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga71e2a3899219aaf2d3b0b881a2613776</Anchor>
    <Abstract>An opaque reference to the Plank AtomicPX object (atomic pointer with an extended tag of data)...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga0e5a5c826870a0873b7f3df9a6c4e36d</Anchor>
    <Abstract>Creates and initialises a Plank AtomicPX object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga5a42522025f98175817ed47ce46117ed</Anchor>
    <Abstract>Create a Plank AtomicPX object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaa6f2b2252a2e09f2c70ee6127d207f81</Anchor>
    <Abstract>Initialise a Plank AtomicPX object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga7fb63860f41079032acd2d7cc55a8c3d</Anchor>
    <Abstract>Deinitialise a Plank AtomicPX object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gae12e8b323fd1c1c53186c1fe7e888764</Anchor>
    <Abstract>Destroy a Plank AtomicPX object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Get</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga38fdb0e5886f12bc6b0af2dc63ea97a3</Anchor>
    <Abstract>Get the current pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_GetUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga78bb8eeae596eed8f9dffec9c9a29f06</Anchor>
    <Abstract>Get the current value nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_GetExtra</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga8ef1d996c5a82187ca083cf0a622f1fa</Anchor>
    <Abstract>Get the current value of the extra &amp;quot;tag&amp;quot;.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_GetExtraUnchecked</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaa0f8af6f1ae892f3d63a126925ce8d9f</Anchor>
    <Abstract>Get the current value of the extra &amp;quot;tag&amp;quot; nonatomically.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_SwapAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga35c257d70c858f6502a431b120724d11</Anchor>
    <Abstract>Swap the current pointer with a new pointer and change the tag.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Swap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga3ba45d76543bfd43f75a2b3e38b4d505</Anchor>
    <Abstract>Swap the current pointer with a new pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_SwapOther</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga404ac946ec4ef0808e946c59de8fd474</Anchor>
    <Abstract>Swap over two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_SetAll</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga08aac7c5aa9335840e6333bdc5afaec1</Anchor>
    <Abstract>Set the current pointer to a new pointer and change the tag.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Set</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga5222fb0c24d3c106b08a027a28c09d81</Anchor>
    <Abstract>Set the current pointer to a new pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Add</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaa38739ce1ac0e46d846b62f049647681</Anchor>
    <Abstract>Offset current pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Subtract</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga99ec5244496ea32891ea98ab6ca1f34b</Anchor>
    <Abstract>Offset current pointer in a negative direct.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Increment</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gaafcb2adb46addf8492d17df015e28a42</Anchor>
    <Abstract>Increment the current pointer by 1 byte.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_Decrement</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>gafc026e3552e6a705f9eceb8612c38d10</Anchor>
    <Abstract>Decrement the current pointer by 1 byte.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtomicPX_CompareAndSwap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_atomic_p_x_class.html</Path>
    <Anchor>ga99de3470a8390069e982fb5f1cadbcf7</Anchor>
    <Abstract>Swap the current values with new values if specified old values are still current.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankBitwiseFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_bitwise_functions.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankEndianFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gae23643694e2e245ca44347c6192a8c52</Anchor>
    <Abstract>Swap the byte order of the unisgned short pointed to by bits.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gac75ceea748c47b6dfda8c357364e5da0</Anchor>
    <Abstract>Swap the byte order of the 24-bit int pointed to by bits.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga1d4306e552673586bbaaa76e97dfc9cd</Anchor>
    <Abstract>Swap the byte order of the unisgned int pointed to by bits.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga37d0f99842d745175394f7f4a378e82d</Anchor>
    <Abstract>Swap the byte order of the unisgned long long pointed to by bits.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga11766e40fbdf1bf99aab1b10805eccba</Anchor>
    <Abstract>Swap the byte order of the unisgned long pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gacbd1eb291c50b32d9798bb2ec3588063</Anchor>
    <Abstract>Swap the byte order of the short pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga1778a274a1b8c68d8066b40e59cbe265</Anchor>
    <Abstract>Swap the byte order of the int pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gac92e5c02813dd30dc9377f3f9ead4376</Anchor>
    <Abstract>Swap the byte order of the 24-bit int pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga064fa00018ad8477203f12e4babf39eb</Anchor>
    <Abstract>Swap the byte order of the long pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gae1c304d7d3a6a976febed64933563ccd</Anchor>
    <Abstract>Swap the byte order of the long long pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gac654560c74f2e97495eeee74e84502e1</Anchor>
    <Abstract>Swap the byte order of the float pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SwapEndianD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga7c9224f7d4c4e4f65adfe844a90345e5</Anchor>
    <Abstract>Swap the byte order of the double pointed to by data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gaad47ed6ec1112e62fbcf37d52bf3e8ba</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned short elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gac2a9bbe8bd68d2e4f0ad845302a35e41</Anchor>
    <Abstract>Swap the endianness of a vector of short elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga95ac1433588bc708224d63b722b8f5f8</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned 24-bit int elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga7604245ac9f66736a91b5021f3de2b37</Anchor>
    <Abstract>Swap the endianness of a vector of 24-bit int elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga6375760408bb72569315fd789584f54d</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned int elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga50132656767457518fb71a5fa1a16f8a</Anchor>
    <Abstract>Swap the endianness of a vector of int elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga13e357d6631b9249b071eed95bab3427</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned long elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga4a934295b74de6f927562b60ca42082c</Anchor>
    <Abstract>Swap the endianness of a vector of long elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>ga7c453b13e7b777fbff26687a54638069</Anchor>
    <Abstract>Swap the endianness of a vector of unsigned long long (64-bit) elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSwapEndianLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_endian_functions.html</Path>
    <Anchor>gafe44c27a16eb8deaa2ef6b98515715be</Anchor>
    <Abstract>Swap the endianness of a vector of long long (64-bit) elements.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankGUID</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_g_u_i_d.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankDynamicArrayClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Abstract>A dynamic array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankDynamicArrayRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga7ed3f04247baaec4f09394dee060950d</Anchor>
    <Abstract>An opaque reference to the Plank DynamicArray object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankDynamicArrayCompareFunction</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gae4efb9f0aa585778c10fd2696fc091e3</Anchor>
    <Abstract>Compare function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gacd75d8697297ad44f47d69594f6976dd</Anchor>
    <Abstract>Creates and intialises a Plank DynamicArray object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gabc45b142d8e106c0a4727df63b291c14</Anchor>
    <Abstract>Create a Plank DynamicArray object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga3207fd62b42b6ee9ebb0f50daf3d7ecb</Anchor>
    <Abstract>Initialise the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_InitWithItemSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gacab7680417ce92f64a02c0293b184345</Anchor>
    <Abstract>Initialise the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_InitWithItemSizeAndCapacity</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga78480d26cd03a22d4c9c55295705fc46</Anchor>
    <Abstract>Initialise the array with specified capacity.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga6bee60c8f55eb626e187331fbec4aa2a</Anchor>
    <Abstract>Denitialise the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga63ed4ec36b9f70f4ae773f561ce9a6a7</Anchor>
    <Abstract>Destroy a Plank DynamicArray object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_IsIndexInRange</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga0ac3ea147371d9f24c45d798383c7a72</Anchor>
    <Abstract>Determines if an index is in range for this array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gafd5c751e1deff283b1a1d3b9deb7c079</Anchor>
    <Abstract>Get the number of items stored in the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetItemSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga2ad1ad51985b6c22b4bfafc52629c7f6</Anchor>
    <Abstract>Get the size of a single item stored in the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetArray</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gaa9fa4d38189371ddd9d7952a2c331535</Anchor>
    <Abstract>Get the raw array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_AddItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gaa561452eee42c9d3516bd5f7f30e3099</Anchor>
    <Abstract>Add an item to the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_SetItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>gae8d22a2c6d1fbac22678651177c5130b</Anchor>
    <Abstract>Copies an item to the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_InsertItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga814b47d52dcad65d9281e0a2dc859634</Anchor>
    <Abstract>Inserts an item into the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_GetItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga64a79e5dd0613914b0f26179927fd3d2</Anchor>
    <Abstract>Retrieves an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_RemoveItem</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga5b8d82f0053a66f44af8980b87c308df</Anchor>
    <Abstract>Removes an item from the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_EnsureSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga5307c7c1534d366764e3d50da2ca8df3</Anchor>
    <Abstract>Ensures that the array is sufficient to hold a certain number of items.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Grow</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga877d22e866939a3311db08fa78799ccf</Anchor>
    <Abstract>Inreases the array&amp;#39;s capcity by a spefcified number of items.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DynamicArray_Purge</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_dynamic_array_class.html</Path>
    <Anchor>ga638b78468ffe31abf386279973441359</Anchor>
    <Abstract>Reduces the amount of memory the array uses to the minimum.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeDynamicArrayClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_dynamic_array_class.html</Path>
    <Abstract>A lock-free dynamic array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeLinkedListElementClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_linked_list_element_class.html</Path>
    <Abstract>A lock-free linked list element.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeQueueClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_queue_class.html</Path>
    <Abstract>A lock-free queue (FIFO).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LockFreeQueue_GetSize</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_free_queue_class.html</Path>
    <Anchor>gafb22446a30c9dee41214207fe01130a8</Anchor>
    <Abstract>NB the result of this could be invalid by the time it is returned in a multithreaded context...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockFreeStackClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_free_stack_class.html</Path>
    <Abstract>A lock-free stack (LIFO).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSharedPtrClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_shared_ptr_class.html</Path>
    <Abstract>A shared pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleLinkedListClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_linked_list_class.html</Path>
    <Abstract>A simple linked list.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleLinkedListElementClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_linked_list_element_class.html</Path>
    <Abstract>A simple linked list.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleMapClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Abstract>A simple map.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_ContainsKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>ga05d3f3511cd9f0b1b39343d041de0f2e</Anchor>
    <Abstract>Determines whether the map already contains a specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_SetKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>ga7124e2fb29ffbf06a24fb1618656de4b</Anchor>
    <Abstract>Sets a key to associate with a pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_GetKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>gaac6799dc7f0a0ad3a1df94a97a4c2ee0</Anchor>
    <Abstract>Get a pointer associated with the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SimpleMap_RemoveKey</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_simple_map_class.html</Path>
    <Anchor>ga2896af146e37c5235b4cf682eec0dde6</Anchor>
    <Abstract>Get a pointer associated with the specified key and remove it from the map.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSimpleStackClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_simple_stack_class.html</Path>
    <Abstract>A simple stack.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadLocalStorageClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_thread_local_storage_class.html</Path>
    <Abstract>Manages data that should be thread-local.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Abstract>A crossplatform synchronisation utiltiy.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankLockRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gac6f2239e7a2c081b75b56b203e4523ba</Anchor>
    <Abstract>An opaque reference to the Plank Lock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaa0b9a96a7e182cde6a10d6d5eb79258a</Anchor>
    <Abstract>Create and intitialise a Plank Lock object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga6216a61e4dd15f7760aff6d8d613385a</Anchor>
    <Abstract>Create a Plank Lock object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaaf69da53793e9f3030aa8e056b0680f0</Anchor>
    <Abstract>Initialise a Plank Lock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaed411625db60fe72726527819997abf9</Anchor>
    <Abstract>Deinitialise a Plank Lock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga1bd59e4b2602f1e9d23e46007a29c121</Anchor>
    <Abstract>Destroy a Plank Lock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Lock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gaec25a57c9cb58b31ab9486bc0aeb2392</Anchor>
    <Abstract>Obtain the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Unlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga8faa8bcbafc49baf83b9a07c0eaa893d</Anchor>
    <Abstract>Release the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_TryLock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>ga3ee574b6a39516bd5e0ea11c2645b58b</Anchor>
    <Abstract>Tries to obtain the lock but doesn&amp;#39;t block if this fails.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gac1baaa40c6b23a73b6194e13600f2e31</Anchor>
    <Abstract>Wait on the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Lock_Signal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_lock_class.html</Path>
    <Anchor>gad8176b9ce343ca5c6199d534ab4fd3e9</Anchor>
    <Abstract>Signal the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSpinLockClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Abstract>A crossplatform synchronisation utiltiy.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankSpinLockRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gaa6c4453d8ba74413dddfa2f8b9119e55</Anchor>
    <Abstract>An opaque reference to the Plank SpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gacd819cf09a959a071622fe65f22b3362</Anchor>
    <Abstract>Create and intitialise a Plank SpinLock object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gafeafac9c112c5549f3fab5b59374499e</Anchor>
    <Abstract>Create a Plank SpinLock object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga5d75e9b1fa9f36488d9663dbd5875a8c</Anchor>
    <Abstract>Initialise a Plank SpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gacb0f294146e4af176be3d61df4d09ea6</Anchor>
    <Abstract>Deinitialise a Plank SpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gaed4193c0bef50b032d8b5d58b8956643</Anchor>
    <Abstract>Destroy a Plank SpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Lock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga2e8c23c616b7b3575ce29946be6e9c0c</Anchor>
    <Abstract>Obtain the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Unlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga543a3b2530ad3e062abfd4d94426c92d</Anchor>
    <Abstract>Release the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_TryLock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga5a023f908e51f25daec070bb778d309c</Anchor>
    <Abstract>Tries to obtain the lock but doesn&amp;#39;t block if this fails.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>ga56a542840b0193d83226dea9df76b062</Anchor>
    <Abstract>Wait on the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SpinLock_Signal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_spin_lock_class.html</Path>
    <Anchor>gaf39b6a9530a70a8ecf846bfd4605cf15</Anchor>
    <Abstract>Signal the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Abstract>A crossplatform thread implementation.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gae37e4606c7f40ef7b6f2363fc3def081</Anchor>
    <Abstract>An opaque reference to the Plank Thread object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadID</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga8e4ce91496e1d22a26bac03aba31d9f3</Anchor>
    <Abstract>Thread ID.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadFunction</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gaea51d83e80774e4dd3ae98da1105eddc</Anchor>
    <Abstract>The Thread run function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSleep</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gae36320b30104e9ff93c9fd762e0add53</Anchor>
    <Abstract>Sleeps the calling thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadYield</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga7f201cf30774cf30ff06f006ad661d89</Anchor>
    <Abstract>Yield the calling thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadCurrentID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga961e5eee58364f31cfc4d28e97bdf249</Anchor>
    <Abstract>Get the thread ID of the calling thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga5d8b8d89d5e9d33d7ff2b76b89c9ba21</Anchor>
    <Abstract>Create and initialise a Plank Thread object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga24e217e0d1892f3cb4afdc4496ca1c09</Anchor>
    <Abstract>Create a Plank Thread object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga17502d8ff1c19cb2bd5d0e97155d5789</Anchor>
    <Abstract>Initialise a Plank Thread object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga6035c458003182397300f5b7e4085b60</Anchor>
    <Abstract>Deinitialise a Plank Thread object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga328bb5e57b769e08b1c43941a60a703c</Anchor>
    <Abstract>Destroy a Plank Thread object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_GetID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gab489859d981e8b61dc68e203abcc2960</Anchor>
    <Abstract>Get the thread ID.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetName</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga9d6e3dbef83ad7369bed1ee956266070</Anchor>
    <Abstract>Set the name of the thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetFunction</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gad1a2f4dda5278e78ce0147862450268b</Anchor>
    <Abstract>Set the thread run function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetUserData</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga1ba619bc81148a7ab5369bc1d4bcccb6</Anchor>
    <Abstract>Set a user data pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_GetUserData</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga1fb96725fd5710ec31e8308982ef3a6f</Anchor>
    <Abstract>Get the user data pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Start</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gaac35ad7b87f142c831f2fcd2842e927e</Anchor>
    <Abstract>Starts the Thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Cancel</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga4f30fcaae6853be24435b60e68f9fbcd</Anchor>
    <Abstract>Cancels the Thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gabce141a91ce41ceec730e292ec8b9c41</Anchor>
    <Abstract>Wait for the Thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_IsRunning</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga95318580d7b5e9d34b32d7b3adf811ce</Anchor>
    <Abstract>Determines if the Thread is still running.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_SetShouldExit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>ga11a80eb0b114468aa1b672c5a9f98d04</Anchor>
    <Abstract>Signals that the Thread should exit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Thread_GetShouldExit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_class.html</Path>
    <Anchor>gac68217524df0345ebb0f5e20c40e93e5</Anchor>
    <Abstract>Checks if the Thread has been asked to exit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadSpinLockClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Abstract>A crossplatform synchronisation utiltiy.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankThreadSpinLockRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga05d6a88d55bf6521caa21c6f98638a85</Anchor>
    <Abstract>An opaque reference to the Plank ThreadSpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gac7b1000f8262394a28b3777d8c7bdf94</Anchor>
    <Abstract>Create and intitialise a Plank ThreadSpinLock object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaca89e8c4781c5e06316f42e7099ff260</Anchor>
    <Abstract>Create a Plank ThreadSpinLock object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaa9ec2f1ebabbfbbba0e543e996339c9e</Anchor>
    <Abstract>Initialise a Plank ThreadSpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga4c4577b993ca331eb1a650ad9bb5f92d</Anchor>
    <Abstract>Deinitialise a Plank ThreadSpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gacd5f5428a6e03f3b94b1dbdd3f541613</Anchor>
    <Abstract>Destroy a Plank ThreadSpinLock object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Lock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaf9b7c65bead29e01d37b105a4bb6b141</Anchor>
    <Abstract>Obtain the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Unlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gaf88a98cfa171bf1ac5e813d510f1aab6</Anchor>
    <Abstract>Release the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_TryLock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga4fdc970f40ba083fdafe330703745894</Anchor>
    <Abstract>Tries to obtain the lock but doesn&amp;#39;t block if this fails.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Wait</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>gac3a845ddd197d23e70a7f537651e1d8d</Anchor>
    <Abstract>Wait on the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreadSpinLock_Signal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_thread_spin_lock_class.html</Path>
    <Anchor>ga9ad728685b9d12807d1a485fc318fc55</Anchor>
    <Abstract>Signal the lock.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFFTFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Abstract>A simple, cross-platform FFT processor for audio signals.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFFTFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga89d883ebc7fce22b9ab8345bfa66d9a7</Anchor>
    <Abstract>An opaque reference to the Plank FFTF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga64f618d491734a3bdde35081ad76b638</Anchor>
    <Abstract>Create and initialise a Plank FFTF object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga4d5a51ebb526b6da9e003faad7e2745e</Anchor>
    <Abstract>Create a Plank FFTF object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga3a6acb5eeebbb43e50a34b4970c0334c</Anchor>
    <Abstract>Initialise a Plank FFTF object with a default length (PLANKFFTF_DEFAULTLENGTH).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_InitWithLength</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga08189e7ca2694321a80f4bb3d7b29dfd</Anchor>
    <Abstract>Initialise a Plank FFTF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga97269b462bd67784918a0daef74a5e9e</Anchor>
    <Abstract>Deinitialise a Plank FFTF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga9a785765c0551f8c0add01eb4a8fe04b</Anchor>
    <Abstract>Destroy a Plank FFTF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Forward</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>gae8de8981be43638abe68f206f4e596ad</Anchor>
    <Abstract>Apply the FFT to the input and place the result in output.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Inverse</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga58f9deb1c96c5dc9313b302fc03f6289</Anchor>
    <Abstract>Apply the inverse-FFT to the input and place the result in output.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Length</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>gacba55adc5154dd0186cfc2d86e279de7</Anchor>
    <Abstract>Get the FFT size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_HalfLength</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>gab72a69072a99acdbaa71c599bd0aabe0</Anchor>
    <Abstract>Get half FFT size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FFTF_Temp</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_f_f_t_f_class.html</Path>
    <Anchor>ga283a3d98eb47fb4a25d5fc71739a7307</Anchor>
    <Abstract>Get a pointer to the internal temporary buffer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileCuePointClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_cue_point_class.html</Path>
    <Abstract>An audio file cue point reference.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileCuePoint_CreateSharedPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_cue_point_class.html</Path>
    <Anchor>gae944728f82cf815398bb8e8c68dc85d2</Anchor>
    <Abstract>Create a Plank AudioFileCuePoint object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileMetaDataClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Abstract>An audio file meta data container.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_CreateSharedPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga51bd122a72dbefa8794757eb8f5296a3</Anchor>
    <Abstract>Create a Plank AudioFileMetaData object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddCuePoint</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga375c660140b598242f3bc8ab21554acb</Anchor>
    <Abstract>Adds a cue point.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_FindCuePointWithID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga29a81159d3539113fc7c98a2aea249b1</Anchor>
    <Abstract>Remove a cue point.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_RemoveCuePointWithID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga7a9cd75ca79eaed36715d2ee4394c60c</Anchor>
    <Abstract>Remove a cue point.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_GetNextCueID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>gab5ce96e796df5beda8b85e975e743258</Anchor>
    <Abstract>Searches the metadata for the highest numbered cue ID and returns this with 1 added.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddRegion</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga379c0c8fd3759aefcaf5ff461b826e9d</Anchor>
    <Abstract>Adds a region.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_ConvertCuePointsToRegions</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga309200e1078bbcb7a68904b89114b04c</Anchor>
    <Abstract>Coverts cue points to regions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddLoopPoint</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga03ddc693b07ed6fb57ba5ee41ebe254e</Anchor>
    <Abstract>Adds a loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileMetaData_AddFormatSpecificBlock</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_meta_data_class.html</Path>
    <Anchor>ga135bdcab86656782c22f1453732036a8</Anchor>
    <Abstract>Adds a format specific block of data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileReaderClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Abstract>An audio file reader.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileReaderRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga7b9ce129b7bc8b2861faa3be49fe656a</Anchor>
    <Abstract>An opaque reference to the Plank AudioFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga8784ba3b844756be7837c8f8bd1ab7a2</Anchor>
    <Abstract>Create and initialise a Plank AudioFileReader object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga64b8041841db62479bd26a6ada614a94</Anchor>
    <Abstract>Create a Plank AudioFileReader object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga7efa09693c7ccea6568df64fe5cddbd5</Anchor>
    <Abstract>Initialise a Plank AudioFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga89cc49dad0e1b2cf3b0e3598733f52c1</Anchor>
    <Abstract>Deinitialise a Plank AudioFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga6d715deee494b0c2c13bf2ba636d5075</Anchor>
    <Abstract>Destroy a Plank AudioFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga5a6e10f2b61bfd8ab9f289a5a76e8f53</Anchor>
    <Abstract>Gets the underlying Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Open</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaa85d094267a8f606f6f82e9f40447bd6</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_OpenWithFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga23b611f1d461e3b2cf330430ffe4d2da</Anchor>
    <Abstract>Open from a file object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_Close</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaa2de7a4772b24bdacc792a38ccfcc971</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetFormat</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga3f14cbe2ba096761fb06d9dd7704e3e3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetEncoding</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga6ba1c8ba7650576efcc962f5aadc33df</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetBitsPerSample</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaf42f83e7a2f5b6c3a561e141335ff24c</Anchor>
    <Abstract>The result of this will be invalid if the file is a compressed format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetBytesPerFrame</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga085db5b740e6d508232ee5707fdf3b1e</Anchor>
    <Abstract>The result of this will be invalid if the file is a compressed format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetNumChannels</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga0b169539564da5e656f4843bca46d730</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetSampleRate</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gafc6121f2efff0f0696cd430b92697371</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetNumFrames</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga587eb8fe582eff2f31bcb787b23c29ce</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_SetFramePosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gaa2939b9a2b0d5fe60838d7f2490ef3d9</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_ResetFramePosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>gac726281037e5e992ba936fb24f807487</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_GetFramePosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga912a66e5adb97139b7ed5ace694e96d1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileReader_ReadFrames</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_reader_class.html</Path>
    <Anchor>ga79c6bb2ec1263570de5256598e376c34</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileRegionClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_region_class.html</Path>
    <Abstract>An audio file region reference.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileRegion_CreateSharedPtr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_region_class.html</Path>
    <Anchor>ga2f7050786b5b14598330a550397b3f95</Anchor>
    <Abstract>Create a Plank AudioFileRegion object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileWriterClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Abstract>An audio file writer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankAudioFileWriterRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga0443905cb8b979bb5e7cf68edfabf7d3</Anchor>
    <Abstract>An opaque reference to the Plank AudioFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga977ec0922644294aea3ed6be0536754a</Anchor>
    <Abstract>Create and intitialise a Plank AudioFileWriter object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>gae81c11ca2793bae61c247159438db94a</Anchor>
    <Abstract>Create a Plank AudioFileWriter object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga75b1e9d0eb60730587c8eda08a884f2c</Anchor>
    <Abstract>Inititalise a Plank AudioFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga451ab87a5455da84f80a3b754de4c8d7</Anchor>
    <Abstract>Deinitialise a Plank AudioFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>gac31cf7fba4e88acde197ff642f02e9b5</Anchor>
    <Abstract>Destroy a Plank AudioFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>gae27c3ac6a31d563bede50e9d22674629</Anchor>
    <Abstract>Gets the underlying Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AudioFileWriter_GetFormatInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_audio_file_writer_class.html</Path>
    <Anchor>ga009020d9179124eea96a710b06edbc5b</Anchor>
    <Abstract>Get format before open.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFileClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Abstract>A crossplatform file reading/writing utility.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_READ</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga58c5e1d5a7b1a826f055f4f4afa697a5</Anchor>
    <Abstract>Flag to identify &amp;#39;read&amp;#39; mode.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_WRITE</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga97b49043ad22933861f58b6055b402c9</Anchor>
    <Abstract>Flag to identify &amp;#39;write&amp;#39; mode.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_BINARY</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga740a67928b707cef8887cbf95002fd77</Anchor>
    <Abstract>Flag to identify &amp;#39;binary&amp;#39; mode.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_APPEND</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac5e888429c54d187fe6c3d4ae7aabb89</Anchor>
    <Abstract>Flag to identify &amp;#39;append&amp;#39; mode.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_NEW</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga6780b0323fabdb2768c6195a070d4ecf</Anchor>
    <Abstract>Flag to identify &amp;#39;new&amp;#39; mode.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_BIGENDIAN</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae8cee2fd2a05cca85533363920cda208</Anchor>
    <Abstract>Flag to identify big endian mode for binary files (otherwise it will be little endian).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_OWNMULTI</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf9b6225e790088d064215175430846cf</Anchor>
    <Abstract>Flag to identify that a multi file object should be owned by the File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_DYNAMICARRAYOWNED</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga31ae3a1fb4cc0df712aa68e3bb1d5885</Anchor>
    <Abstract>Flag to identify when in DynamciArray mode that the array is owned by this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_MASK</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga977a90e90ad400a6c6927d4ea1a4fe20</Anchor>
    <Abstract>Mode mask with all the mode flags except PLANKFILE_BIGENDIAN.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLANKFILE_ALL</Name>
      <APILanguage>c</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga007fd6edcef4c3e78f9822c446b65508</Anchor>
    <Abstract>Mode mask with all the mode flags.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFileRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga7a3834c3811eceffb81213155fd14e59</Anchor>
    <Abstract>An opaque reference to the Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FileErase</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga9010c7fcd068f755105a30409cfda8a7</Anchor>
    <Abstract>Delete a file with the given path form the filesystem.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf3d641d92bc5a937e2d44127b690bf2e</Anchor>
    <Abstract>Create and initialise a Plank File object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa082f0286f7db42cb80a1d3a02ef0966</Anchor>
    <Abstract>Create a Plank File object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga28528f2257dadba6daf977160b706ccd</Anchor>
    <Abstract>Initialise a Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga38f26cb71c29db7e1a4e2b45f0d769ad</Anchor>
    <Abstract>Deinitialise a Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gab857b1acf9fae3d94d3c08bc4883a1fa</Anchor>
    <Abstract>Destroy a Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Open</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae559595e5fd9ae0c9516748b07e1102c</Anchor>
    <Abstract>Open a file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenTextRead</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga7c4ce239aeac329367be8ca3930e7a51</Anchor>
    <Abstract>Open a text file for reading and optionally writing.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenTextWrite</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4c3df13be9beaa2a4a75bf56ee09dc34</Anchor>
    <Abstract>Open a text file for writing and optionally reading.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryRead</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac0e2fb70c1f212c23860a3cefaeebf15</Anchor>
    <Abstract>Open a binary file for reading and optionally writing.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryWrite</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga660dbb16fe9917836248430fb355576c</Anchor>
    <Abstract>Open a binary file for writing and optionally reading.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryNativeEndianRead</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae80ca5d7e106be93f18cdc48d05fd895</Anchor>
    <Abstract>Open a binary file for reading and optionally writing in the native endian format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OpenBinaryNativeEndianWrite</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf777842917cc18433b3828ecc9537d41</Anchor>
    <Abstract>Open a binary file for writing and optionally reading in the native endian format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsBigEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf0125ef82c4af98c33534d25fa1aad9c</Anchor>
    <Abstract>Determine if a file object is in big endian format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsLittleEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga6be51df6cd1114dc7cd8d6704e6aec99</Anchor>
    <Abstract>Determine if a file object is in little endian format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsNativeEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaab3dd901ce039e26debe9e792492744b</Anchor>
    <Abstract>Determine if a file object is in the native endian format.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Close</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gad508ef1ca04986784eebd8f58e7fe5d7</Anchor>
    <Abstract>Close a file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa61247a2d83c3ab1fbc2bb0e18c7ad12</Anchor>
    <Abstract>Set the current position of the file read/write pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_OffsetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaea3b7367b42566c7e801fffc78fc56f8</Anchor>
    <Abstract>Offset the current position of the file read/write pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ResetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga71c0032e9f87f01510ed5cc12737d5ef</Anchor>
    <Abstract>Reset the current position of the file read/write pointer to the start of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetPositionEnd</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga0605466aa8e1ed3b806e09a3489f2c7d</Anchor>
    <Abstract>Set the current position of the file read/write pointer to the end of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsValid</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gafd6ac54a2bfee59aff3da84dc288536c</Anchor>
    <Abstract>Determine if a file object is valid.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_IsEOF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga334bb77095a53b4bc5a5d30e35e83250</Anchor>
    <Abstract>Determine if a file object read/write pointer has reached the end of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetEOF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga38986081f4e645e125378d898ab4aa08</Anchor>
    <Abstract>Sets the file object read/write pointer to the end of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_GetPosition</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac259f0da23f6ce83409e93371deb07a7</Anchor>
    <Abstract>Get the current position of the file read/write pointer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SetMode</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf7db745b9435d03b79a30479d2431312</Anchor>
    <Abstract>Reopen the file with a different mode (e.g, read/write/binary etc).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Read</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga3f6b4549317ddc62ca95d43cafb4f191</Anchor>
    <Abstract>Read an array of bytes from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga0c08e9720517a352698a7f27f45287f6</Anchor>
    <Abstract>Read one signed byte from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga06c37458676b12ff128f0bb28417d60d</Anchor>
    <Abstract>Read a short from the file (16-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga0bc77191531de3373c4c4a375fc59b87</Anchor>
    <Abstract>Read an int from the file (32-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga117e4cc8e3670c1b0f98b1eaa04cf7f6</Anchor>
    <Abstract>Read a 24-bit int from the file (i.e.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4758673a34464a71ad6b923ff1328c2e</Anchor>
    <Abstract>Read a long from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaffce2c63afa28bf408775a86b61d588d</Anchor>
    <Abstract>Read one unsigned byte from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gad456be7c79815fa8ef29a4cae5365371</Anchor>
    <Abstract>Read an unsigned short from the file (16-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gae3c80fd2b556c056ded0d31ff3d07db4</Anchor>
    <Abstract>Read an unsigned int from the file (32-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga9a6d94236a721891dbe505ae9d7a761a</Anchor>
    <Abstract>Read an unsigned 24-bit int from the file (i.e.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaed5a1d81b1d4ca59c6285375f776fbfe</Anchor>
    <Abstract>Read a long from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaf244d0e568c034926617726825f2e57d</Anchor>
    <Abstract>Read an unsigned 64-bit int from the file (i.e.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa95f3c6bf37685747b373455da60457c</Anchor>
    <Abstract>Read a float from the file (32-bit float).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga69ae9efd0b11c5e2118044675e99f303</Anchor>
    <Abstract>Read a double from the file (64-bit float).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_ReadLine</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga854f1f38dd0882255b21ce9131b16efc</Anchor>
    <Abstract>Read an array of bytes as text upto the next line ending (or the end of the file if sooner)...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_SkipBytes</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaaa3fb85b283c5c4f3b0bdd81035f00dd</Anchor>
    <Abstract>Skip over a number of bytes in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_Write</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga94fb1c8ba6c324f1e032ec55c74bf83b</Anchor>
    <Abstract>Write an array of bytes to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gab77b1864e3a13b3a269a9e9eff1bd8e7</Anchor>
    <Abstract>Write one signed byte to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4bdabdaf7cba10def430252ff5286417</Anchor>
    <Abstract>Write a short to the file (16-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4222dbbc8486e8dd2d67f7afd9e10128</Anchor>
    <Abstract>Write an int to the file (32-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga114a1629f0996ea44925fe69e212f364</Anchor>
    <Abstract>Write a 24-bit int to the file (i.e., 3 bytes).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteLL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaa8f23f4d4f62c1f2bc16c2db28652c7a</Anchor>
    <Abstract>Write a long to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUC</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga1211786a40a82960493585fec6f8cf88</Anchor>
    <Abstract>Write one unsigned byte to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUS</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga547d377121983dcfa573af98bd7a04ff</Anchor>
    <Abstract>Write an unsigned short to the file (16-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac232eadb468ceecfdac10225f320db2f</Anchor>
    <Abstract>Write an unsigned int to the file (32-bit int).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga4329d8c87cded92f8a20fd289df8948a</Anchor>
    <Abstract>Write an unsigned 24-bit int to the file (i.e., 3 bytes).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteUL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gad4f9aa825fb07dfcdab31cd471a10d76</Anchor>
    <Abstract>Write an unisigned long to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteULL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gaac61e8626ecaadcd40dc31dadaa6c148</Anchor>
    <Abstract>Write an unsigned 64-bit int to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac616b003e797c36cec2ce89cea88d6fb</Anchor>
    <Abstract>Write a float to the file (32-bit float).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gadeef54a7fd4811f363cc55ef3ba618d4</Anchor>
    <Abstract>Write a double to the file (64-bit float).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteString</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>ga32760bb91c90d10b3a241816d5b6d418</Anchor>
    <Abstract>Write string to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_File_WriteLine</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_file_class.html</Path>
    <Anchor>gac5c9f5593d89fa99365d80d76da43256</Anchor>
    <Abstract>Write line of text to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileReaderClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Abstract>A generic IFF/RIFF file reader helper.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileReaderRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gaf3f3fbf2849e73e0d7c0cee324713acd</Anchor>
    <Abstract>An opaque reference to the Plank IffFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gad8b686899f4ce9390290569e1774a11f</Anchor>
    <Abstract>Create and initialise a Plank IffFileReader object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga3f42bc71541ad07401d2e7e1d34fa2fa</Anchor>
    <Abstract>Create a Plank IffFileReader object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga1d3aa86bd74b5091bac3787bf63816b5</Anchor>
    <Abstract>Initialise a Plank IffFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gaafebab2c787458fc5adf793cb98e46b7</Anchor>
    <Abstract>Deinitialise a Plank IffFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga7326ad8d98497c015930167a772cd1ba</Anchor>
    <Abstract>Destroy a Plank IffFileReader object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gadfbf398a4a19991b47639c1d6a2ff245</Anchor>
    <Abstract>Gets the underlying Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Open</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga5ac68294a1adf847195937a1ba30d03e</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_OpenWithFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gae94810668da237376673a27032cd10ab</Anchor>
    <Abstract>Open from a file object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_Close</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gab10f618aa45bae084bf7940c0259ac58</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetMainID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gae8bbcc7f83cfaebbbb944af951d8a5ea</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetFormatID</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga334d748334889d8194ab05aa78476af9</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetMainLength</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga939b89df2a91581946031d814a59bbee</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_GetMainEnd</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga6b687552c44f6cbe6ad1b489831bc1eb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_IsBigEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga088184f65ec9225e61b889363b1a92cb</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_SetEndian</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gafe00a67e7166da700d577793f672991d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_SeekChunk</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>ga6c1fd9cd33b69781f17e0536c085abea</Anchor>
    <Abstract>Seek to the data of a particular chunk.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileReader_ParseChunkHeader</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_reader_class.html</Path>
    <Anchor>gaa73b554058ea1e0602ed273ea4958b00</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileWriterClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Abstract>A generic IFF/RIFF file writer helper.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankIffFileWriterRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga0d6081668c3925c23293e1cdb5a12992</Anchor>
    <Abstract>An opaque reference to the Plank IffFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga97aadfd2116c3c03b0f9b47af315d1fe</Anchor>
    <Abstract>Create and initialise a Plank IffFileWriter object and return an oqaque reference to it...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga9abb84d6bac7ce3f7ef47236dfafa246</Anchor>
    <Abstract>Create a Plank IffFileWriter object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>gaaa11aa4a252c1a0652b54b94317d4c5a</Anchor>
    <Abstract>Initialise a Plank IffFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga80973d46c4a2eda262f972b64281defb</Anchor>
    <Abstract>Deinitialise a Plank IffFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>gacb64daae92638c7e966f8f5fcc51d916</Anchor>
    <Abstract>Destroy a Plank IffFileWriter object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IffFileWriter_GetFile</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_iff_file_writer_class.html</Path>
    <Anchor>ga3ad9675af0d8fff53d497c9058204b85</Anchor>
    <Abstract>Gets the underlying Plank File object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankMultiFileClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_multi_file_class.html</Path>
    <Abstract>Holds references to multiple files.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MultiFileReader_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_multi_file_class.html</Path>
    <Anchor>ga89d2056c34ca6147fccbe7be878ba1e2</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankMathsFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MoveF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5c72c816a6aa7e691b5f822f303e2380</Anchor>
    <Abstract>Just returns the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MoveD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga754d66954713e2d287a4732bc9f3835c</Anchor>
    <Abstract>Just returns the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NegF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9c53f7694e05268362e4ce21f311a390</Anchor>
    <Abstract>Returns the negative of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NegD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gafab5e6f96a4ae2100219c17d4ab33d54</Anchor>
    <Abstract>Returns the negative of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga32c5e9ec697355c3e2a153b3f3950393</Anchor>
    <Abstract>Returns the absolute of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga3abed4819ea079935becaee097c1b131</Anchor>
    <Abstract>Returns the absolute of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log2F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabdd452e1518a66cf0d9fed691c8b47a0</Anchor>
    <Abstract>Returns the logarithm base 2 of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log2D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga63b2b10f119a9e85835cd1c52659db85</Anchor>
    <Abstract>Returns the logarithm base 2 of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ReciprocalF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1cb6feb8a8a34d3323b405650ef1e0ad</Anchor>
    <Abstract>Returns the reciprocal of the input argument (i.e, ).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ReciprocalD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gad86ace90fe2ea6f9a3fbd6d490411d94</Anchor>
    <Abstract>Returns the reciprocal of the input argument (i.e, ).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1fd0eec07e3e032eeec06f614a70754e</Anchor>
    <Abstract>Returns the sine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga05a9ada88f21fae3424b96bc702efbd9</Anchor>
    <Abstract>Returns the sine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CosF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8e0af6f1ad5d3b451566c295f3c0ad34</Anchor>
    <Abstract>Returns the cosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CosD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga71e32eb4c3e8a7135f7028a16fb8b55d</Anchor>
    <Abstract>Returns the cosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaa9f0c2dd6ff1434bd8188b20142daf05</Anchor>
    <Abstract>Returns the tangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7c0d061f726b227dc80ef6fcc60399bf</Anchor>
    <Abstract>Returns the tangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AsinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga74148d65fe6c3a44826479200bfaa679</Anchor>
    <Abstract>Returns the arcsine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AsinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4e5d74f2d8fb5d8503c0d1378ff67528</Anchor>
    <Abstract>Returns the arcsine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AcosF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaaddd7a8373b601b9c085ac9a86046f75</Anchor>
    <Abstract>Returns the arcosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AcosD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaecd4def003a534923d1342fe11af5028</Anchor>
    <Abstract>Returns the arcosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gab9bb9726978a4930418eda07ec09afdd</Anchor>
    <Abstract>Returns the arctangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AtanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac9c8a17625345c474954b33c728fba4f</Anchor>
    <Abstract>Returns the arctangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinhF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaf682076757a71f9839db7734c9ce4f8f</Anchor>
    <Abstract>Returns the hyperbolic sine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SinhD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8070a645911752f5e9ac9561f913aef4</Anchor>
    <Abstract>Returns the hyperbolic sine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CoshF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga05dbce5d0a023eb6fa68d8458c0bbca7</Anchor>
    <Abstract>Returns the hyperbolic cosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CoshD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga93a00c44db3ff597f7a57869dfeedb6e</Anchor>
    <Abstract>Returns the hyperbolic cosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanhF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga913afa2be9670c3019619a5a43231370</Anchor>
    <Abstract>Returns the hyperbolic tangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_TanhD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga88ca17d57234ef605e2233a118aee8fe</Anchor>
    <Abstract>Returns the hyperbolic tangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrtF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1054c302ddd4838a762847abbf7e43f6</Anchor>
    <Abstract>Returns the square root of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrtD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1cc033112e9660b8647e74aa3a1b94ed</Anchor>
    <Abstract>Returns the square root of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LogF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga3411a481af05f50f2649bfcef48c223a</Anchor>
    <Abstract>Returns the natural logarithm of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LogD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga112778b49b391a2c444bd1bdd510dc09</Anchor>
    <Abstract>Returns the natural logarithm of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log10F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga721bcf745e7cb845b42cda978ad1c5cf</Anchor>
    <Abstract>Returns the logarithm base 10 of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Log10D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7f2cb185c8e2b8a6e17b150903cfb344</Anchor>
    <Abstract>Returns the logarithm base 10 of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ExpF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac90ae85b687ddfe982ab104787bb8a7f</Anchor>
    <Abstract>Returns the exponent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ExpD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gadaa32d432245768cf1cda0d0997a6308</Anchor>
    <Abstract>Returns the exponent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SquaredF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1ad89904e94262fa52d443da6674517b</Anchor>
    <Abstract>Returns the input argument squared.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SquaredD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga650925e99f01eb75c031f6beb7d20a92</Anchor>
    <Abstract>Returns the input argument squared.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CubedF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaedb66d437bc79576d43c11ba71486853</Anchor>
    <Abstract>Returns the input argument cubed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CubedD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac862753d321c0959563fc250e5cfbf5f</Anchor>
    <Abstract>Returns the input argument cubed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CeilF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaea7073a4052c7a04dced96c85ddac579</Anchor>
    <Abstract>Returns the input argument rounded up to the next highest integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_CeilD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga022a4169851f70d61d18090f1ed33de3</Anchor>
    <Abstract>Returns the input argument rounded up to the next highest integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FloorF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gae60d4c966db6b253f1493417ca06f18d</Anchor>
    <Abstract>Returns the input argument rounded down to the next lowest integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FloorD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga00d7b64487da47afe70db45db840e6cc</Anchor>
    <Abstract>Returns the input argument rounded down to the next lowest integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FracF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gab7f29542e87ca53fd5b4168b6597988b</Anchor>
    <Abstract>Returns the fractional part of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FracD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5176c934c987a71c7867af8179486472</Anchor>
    <Abstract>Returns the fractional part of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SignF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0f25776ceba9bc1831e062af5210df89</Anchor>
    <Abstract>Returns 0 if the input is 0, -1 if the input is negative or 1 if the input argument is positive...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SignD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga2c9f56b92320d80feb209b61bc899057</Anchor>
    <Abstract>Returns 0 if the input is 0, -1 if the input is negative or 1 if the input argument is positive...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_M2FF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8a90b2a033250976770d6dfbc26bf02c</Anchor>
    <Abstract>Returns the input argument converted from MIDI note numbers to frequency (in Hz).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_M2FD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4ed411f2c409aa5a64c96d6ce9529165</Anchor>
    <Abstract>Returns the input argument converted from MIDI note numbers to frequency (in Hz).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_F2MF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga2fbb504cd6f2549733f07d1fabda6e2b</Anchor>
    <Abstract>Returns the input argument converted from frequency (in Hz) to MIDI note numbers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_F2MD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4749786c700311a0593cba415177ef1e</Anchor>
    <Abstract>Returns the input argument converted from frequency (in Hz) to MIDI note numbers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_A2dBF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga50680a3c21e29807f2610a0967e16995</Anchor>
    <Abstract>Returns the input argument converted from linear amplitude to decibels where 0dB is an amplitude of 1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_A2dBD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga25500f8339961ab245fea970a454f001</Anchor>
    <Abstract>Returns the input argument converted from linear amplitude to decibels where 0dB is an amplitude of 1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_dB2AF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaaae6e51563bdb41422830414b91e029e</Anchor>
    <Abstract>Returns the input argument converted from decibels to linear amplitude where 0dB is an amplitude of 1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_dB2AD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga89d70c9e30576872fda245aa3ecad1dc</Anchor>
    <Abstract>Returns the input argument converted from decibels to linear amplitude where 0dB is an amplitude of 1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_D2RF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga55565fb50d812509e916d1a5bcd50ed3</Anchor>
    <Abstract>Returns the input argument converted from degrees to radians.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_D2RD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gad5e25003bbb6a68d7ee9ef6295647f5e</Anchor>
    <Abstract>Returns the input argument converted from degrees to radians.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_R2DF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaa294d009df41dd5a5c7ba1f2505ed49d</Anchor>
    <Abstract>Returns the input argument converted from radians to degrees.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_R2DD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaadfb3bf407a277817a4fd7ae67d84c70</Anchor>
    <Abstract>Returns the input argument converted from radians to degrees.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DistortF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac6733f9a979d84ed6ecdd4288e301b27</Anchor>
    <Abstract>Returns the input argument distorted.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DistortD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga52b93af939f6ca274d514b2ae3ee692b</Anchor>
    <Abstract>Returns the input argument distorted.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ZapF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga221e4008898dcbbc16265b267e399350</Anchor>
    <Abstract>Returns the input argument with infinities, NaNs and denormallised numbers removed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ZapD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga95dcdb9612f2e6349e9dc07c587562ce</Anchor>
    <Abstract>Returns the input argument with infinities, NaNs and denormallised numbers removed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AddF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga94049aff0b7b8e6710ecde60cd58be33</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AddD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga978ae5cc15df8c6bc50c6a9187de3f24</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SubF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga3195b8723443d971f4b67b6af5f13124</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SubD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0ece8fe3b61a411cd7f4f47e8e6708ac</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MulF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0586150351369c6450846b2fb4e99d31</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MulD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0f8928287a4a4fbfcff5b4843ba6f8e1</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DivF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7cd062d19d3e7c0d5d9c2ad218f016f3</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DivD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga4b48b69d14f582db2a0d2be7a0192cb0</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ModF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaeafd3ee471f776684b02b44acb6cfbb8</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ModD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6378931d67f09df9021038a3be54d538</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga423cca3e7ed31a33d06afb0053ee024a</Anchor>
    <Abstract>Returns minimum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga90c5aa20c29af981a057f2e215cb4aea</Anchor>
    <Abstract>Returns minimum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MaxF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga7d3f060f2bb9dbd233b679af4f6527b2</Anchor>
    <Abstract>Returns maximum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MaxD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga26735381f5a1fe41ad8ecbb576ad80f5</Anchor>
    <Abstract>Returns maximum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_PowF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga1636222e26b467dba7c062207545cdbd</Anchor>
    <Abstract>Returns a raised to the power b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_PowD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8a45dc6511a59d71dc2d06467b7f9965</Anchor>
    <Abstract>Returns a raised to the power b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5f99b2ef37521573669ae59e27be7e18</Anchor>
    <Abstract>Returns 1 if the inputs are equal otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gadce33f1551a89e982bfaae51c4769fb8</Anchor>
    <Abstract>Returns 1 if the inputs are equal otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsNotEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8dae0bad8a8e61635058baa7d5d124a7</Anchor>
    <Abstract>Returns 1 if the inputs are not equal otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsNotEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga94470c822ac243f74aff9fd153427154</Anchor>
    <Abstract>Returns 1 if the inputs are not equal otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga42224769b1d547f65d7afe530e24a782</Anchor>
    <Abstract>Returns 1 if the a is greater than b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gace2e7d74c4853140b481a4b09dff7bb8</Anchor>
    <Abstract>Returns 1 if the a is greater than b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanOrEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6135fc355e7b4ecf76afb9293c814f36</Anchor>
    <Abstract>Returns 1 if the a is greater than or equal to b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsGreaterThanOrEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga267b5f04240db101f50bbddf65c57409</Anchor>
    <Abstract>Returns 1 if the a is greater than or equal to b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga57a877dffa9aee83b54aebfa40c8e4c6</Anchor>
    <Abstract>Returns 1 if the a is less than b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0c2e0523e7d1dd182ba3011eaf3dcd06</Anchor>
    <Abstract>Returns 1 if the a is less than b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanOrEqualToF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga90cceb4d492e11827b62d42d50d65981</Anchor>
    <Abstract>Returns 1 if the a is less than or equal to b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_IsLessThanOrEqualToD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gacae863b2196244ac11f0575e635ee6a5</Anchor>
    <Abstract>Returns 1 if the a is less than or equal to b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_HypotF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaff17fbdad0951763b813ef99e1505ba0</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_HypotD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaf967c719bfec3b395ddf14598a2c71a7</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Atan2F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6398472a918e14aeb79f11a8948e6a24</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_Atan2D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaea36eb66a008077875488271614dc584</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SumSqrF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaddcbd7645d9348e061fe51e8739b1c28</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SumSqrD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6ae4b646a620622e2776915c82197c8d</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DifSqrF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gab3294d19a6d57a7937bc071891252efa</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_DifSqrD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9d0baaacc5e3c7b0d29c7b3c2107dbc7</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrSumF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga6cc65e053fabc3b4980b1bce2bd265b1</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrSumD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabd69fea93b359ded950ec2b2f174fffc</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrDifF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabbb0a26f6febc273c32beaa63d130491</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_SqrDifD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga03cfbc0e0273810105de847c874a6331</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsDifF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9d9d94b5f83f1b3c59e66fa7816943b6</Anchor>
    <Abstract>Returns the absolute difference between the input arguments.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_AbsDifD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac953475056afca0d56c2bf794921a61f</Anchor>
    <Abstract>Returns the absolute difference between the input arguments.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreshF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gac24bec6ed723b1850a02777c03d03837</Anchor>
    <Abstract>If a is less than b returns 0 otherwise return a.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ThreshD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaba2dbb4ba56bfd9897a0edb5198afd2b</Anchor>
    <Abstract>If a is less than b returns 0 otherwise return a.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MinL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gabb9c201de469f6d00c93435917f679f4</Anchor>
    <Abstract>Returns minimum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_MaxL</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga02f421f17ffa3e81132d9f6f53e1e3a5</Anchor>
    <Abstract>Returns maximum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLinF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga0cb780b46fff06a1191a4b706cafedc9</Anchor>
    <Abstract>Maps a value from one linear range to another.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLinD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaf9532dbb6977e6c82e472d935d4417f1</Anchor>
    <Abstract>Maps a value from one linear range to another.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLin2F</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gaeb1323a7e6eaa87bf38c63ef4aa71178</Anchor>
    <Abstract>Maps a value from one linear range to another.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinLin2D</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gad13b362539bd8501214b59aae195a7c2</Anchor>
    <Abstract>Maps a value from one linear range to another.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinExpF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga25ad3b6c27ea6b960aab0cd8b5b60c95</Anchor>
    <Abstract>Maps a value from a linear range to an exponential range.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinExpD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga83433f2f17eac8a7c470e1e1efa7fb20</Anchor>
    <Abstract>Maps a value from a linear range to an exponential range.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinInterpF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga8e3fdc2ff02fc552f809e47b09589dc0</Anchor>
    <Abstract>Perform linear interpolation on two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LinInterpD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga5e9388062730c6f12b19869dac4b7203</Anchor>
    <Abstract>Perform linear interpolation on two values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LookupF</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>ga9d73c041d343b113f13b8d981c880fe9</Anchor>
    <Abstract>Lookup a value in a table at the given index performing linear interpolation if necessary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_LookupD</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_maths_functions.html</Path>
    <Anchor>gafbfd838336b8d44fd4155621d1dc56ea</Anchor>
    <Abstract>Lookup a value in a table at the given index performing linear interpolation if necessary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankVectorMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_vector_macros.html</Path>
    <Abstract>Vector processing macros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankVectorFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Abstract>Vector processing functions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillF_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf264cdbe70928e87484c7ef7c7e770da</Anchor>
    <Abstract>Fills a vector with a constant.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearF_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga56913dd2881acd870e0bf0b81761f29a</Anchor>
    <Abstract>Fills a vector with zeros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampF_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6083cf8cd3b19b6617c85b81dac22355</Anchor>
    <Abstract>Fills a vector with a ramp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineF_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5af8b83ed87be0faee019340b9cc07a3</Anchor>
    <Abstract>Fills a vector with a line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6afd6f38943e06da5514a63e90c0faf9</Anchor>
    <Abstract>Applies the function pl_MoveF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab729d40e2054d2fb7181f18a608d160c</Anchor>
    <Abstract>Applies the function pl_IncF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga40879eea9b0e289225507473f339427e</Anchor>
    <Abstract>Applies the function pl_DecF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3e8bc51e352f9e56102e8a6f8e591369</Anchor>
    <Abstract>Applies the function pl_NegF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0da76047e2f5935ce69ec1b4084959b7</Anchor>
    <Abstract>Applies the function pl_AbsF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga138489a0a09ca5131c997c9bf2785020</Anchor>
    <Abstract>Applies the function pl_SquaredF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga14c2dd307d97ebea1a2b0a79a4f18f3f</Anchor>
    <Abstract>Applies the function pl_CubedF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga017d16bd185ae3cf9069e06cc9c2cf88</Anchor>
    <Abstract>Applies the function pl_SignF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3874b7ec8eb9d6daa7e57928ac093a9c</Anchor>
    <Abstract>Applies the binary operator function pl_AddF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga53fdeba08d131bafeee9e2217b79f77a</Anchor>
    <Abstract>Applies the binary operator function pl_AddF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga96c458ac80a73ae97d9836e7cdff6653</Anchor>
    <Abstract>Applies the binary operator function pl_AddF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9e7dc8aa04be89440e1440b3125cdffc</Anchor>
    <Abstract>Applies the binary operator function pl_SubF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad8935b522deb4e2baf1885c78ef3c5a2</Anchor>
    <Abstract>Applies the binary operator function pl_SubF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad545716dacb61f997567075c3a4a6720</Anchor>
    <Abstract>Applies the binary operator function pl_SubF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga09b89f66bb8148bc4d7f3ade8f12ab6b</Anchor>
    <Abstract>Applies the binary operator function pl_MulF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4d02adf1b7e3387b882aee06bf794bab</Anchor>
    <Abstract>Applies the binary operator function pl_MulF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga044d16cfcf2eda7978a038ca4a156144</Anchor>
    <Abstract>Applies the binary operator function pl_MulF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae6db0d03c2bb9e5a663ac3e1d4d3d76a</Anchor>
    <Abstract>Applies the binary operator function pl_DivF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga647b8c4642bc5c02b4b4ad7fca5434eb</Anchor>
    <Abstract>Applies the binary operator function pl_DivF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7fb4b91f3c0068e6b0805195a7899c34</Anchor>
    <Abstract>Applies the binary operator function pl_DivF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga579144bf7c19e2c3076ace200ffdf6c4</Anchor>
    <Abstract>Applies the binary operator function pl_ModF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad14414a6a6bfdce2cfa4b12194fac85b</Anchor>
    <Abstract>Applies the binary operator function pl_ModF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga621b50c48f2e6d362bd2b43496e98dff</Anchor>
    <Abstract>Applies the binary operator function pl_ModF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa31eb103c9cb1b7af8ec1d68940fc816</Anchor>
    <Abstract>Applies the binary operator function pl_MinF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa3a514ff8c829f3f0c34cc3cb8532fa9</Anchor>
    <Abstract>Applies the binary operator function pl_MinF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8dd296051688e3035e6d0f7dff95c2ab</Anchor>
    <Abstract>Applies the binary operator function pl_MinF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad8ee95f778cdfcd034e902fb81f7c885</Anchor>
    <Abstract>Applies the binary operator function pl_MaxF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2e548c19fcaaa84dc28e05af2b4cd88a</Anchor>
    <Abstract>Applies the binary operator function pl_MaxF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaabafa18c8dd0ec2c12e11b6f42cc2493</Anchor>
    <Abstract>Applies the binary operator function pl_MaxF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5cbc606bff150d3be2e698aac7dc5ce4</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacf88f51bb6a26c2d0a68e994d863711c</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaedb79426fa90a29103fce022679f32f4</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae9a46a8c1db7476211bdd6b44fb19d49</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToF() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga774c6a0e634df1f397516a6a805a4d6d</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga56a9fe4ef33f7d81a29e7aab0a1592c0</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6030e695b7b354d7c668506b6dd8777e</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanF() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3298d662a1a1002f1a911cf89576f12e</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7ff4eb184fe6458d583af93f5f5d72a3</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga34dbb414e4e85a5dc21cab04efb36e17</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToF() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5c70aa006400c76931250bdcccf52e37</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToF() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9563d0b877e5656f9e68dbe1f172b1c2</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToF() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafc1473081b72235572bbcb4180f85532</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gada27b912481be2974f2df10287c24cca</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga98ef2362c8ee3b97169746404863b0bb</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae336bfe2cf955934a4cee32d66b4817e</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToF() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5f64176207c3d68ae22cddb34d496266</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa9b4e616e12b4510ed11658d46985b6d</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga52cc262cb6455a1ccb4bb7d6a3b78467</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafaba968683dddc1cb6ee402811875181</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad5484d71a34bd278e75b8cecf45e7263</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaecd22cb5b339a05a83a47ce9a5eb303d</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab11b4161a9b842caf8431aa6e578f81</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8c6f0bc2d31739420492413ade319f84</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa44f0e93a59157dc2ed7a1a320606de3</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0cc252e1e632dd35bbb13d318f6bf51b</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3568d95bc0f3df06126f00db48d52385</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae247f0ca7d07614d80fb70fd4f3b20ab</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2229b5869509b5f0947e8927262f23b0</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga381554ead66ca6856122b66b1e9bf063</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa9d78883696faed1ffc7b1ed6cbb4bc8</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1c8da37fdfd80aebd9d1743a0da9b497</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3a66577c30fc72bd6eff2271f9c10b16</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3161963fd5d2e9453250a93f01226f5d</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae27592fcf9a6e2511f691e2b840340a9</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9bc9357afdaecf35a48a2819a1673ec5</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshF() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga440a2f45ad5a555ed44a4e227a132a2a</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad9877065544b3718d8d187d5f50cdf24</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf5c97c3f119c8f60b3ddde9eac596e38</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2e5e2f38c733b4356204d138b71f5848</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddF_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga08e933eccaf66c8adb57e9841657a6fb</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupF_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaddee28f3d1f630066c181c8a6ac97aea</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog2F_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6f8cf6b2f7fa17fb800ff0e1d5a2e167</Anchor>
    <Abstract>Applies the function pl_Log2F() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorReciprocalF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf552c917a97a8370eb14d70fa7fdbcd4</Anchor>
    <Abstract>Applies the function pl_ReciprocalF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8317e0ece295c3fe4c6ddcd0c9291b73</Anchor>
    <Abstract>Applies the function pl_SinF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCosF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2dc9e1a1005c50962f50b218bdd359f7</Anchor>
    <Abstract>Applies the function pl_CosF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0ff3f0a747f340ef59eb12ff9f5fa9ce</Anchor>
    <Abstract>Applies the function pl_TanF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAsinF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga40b4fd224d5c1df552bd36fd79e14d46</Anchor>
    <Abstract>Applies the function pl_AsinF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAcosF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4b0876ed78d4675a40aec91015020543</Anchor>
    <Abstract>Applies the function pl_AcosF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtanF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1c392fc9382aa520c8d73f30ce097361</Anchor>
    <Abstract>Applies the function pl_AtanF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinhF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1d025408ed6a1435023aa7837cbbce26</Anchor>
    <Abstract>Applies the function pl_SinhF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCoshF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae7fca130c7b57d8f99ba52546a3d401f</Anchor>
    <Abstract>Applies the function pl_CoshF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanhF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac8184fcb4e00b71d0e152a6cd441e611</Anchor>
    <Abstract>Applies the function pl_TanhF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrtF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac5eb6a022dcc12e47bb871209d94fa5b</Anchor>
    <Abstract>Applies the function pl_SqrtF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLogF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6154ea39d75e68b9e9d5330cb3625eec</Anchor>
    <Abstract>Applies the function pl_LogF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog10F_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5680198a0c9c769ad052a505769d8e65</Anchor>
    <Abstract>Applies the function pl_Log10F() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorExpF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2832cd0f9496ce0c593be00454cc1d56</Anchor>
    <Abstract>Applies the function pl_ExpF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCeilF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga624ee54e6e8bab7bd8f81997c07b7242</Anchor>
    <Abstract>Applies the function pl_CeilF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFloorF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga53d443eaba00cc8255d4d1dd7dc3de79</Anchor>
    <Abstract>Applies the function pl_FloorF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFracF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga772400768495fd4fd693256ad3c48f33</Anchor>
    <Abstract>Applies the function pl_FracF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorM2FF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga434579ecb8b69a86b3c1b5e19640d3e9</Anchor>
    <Abstract>Applies the function pl_M2FF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorF2MF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga346ccfb5366b8795fb98c20817553baf</Anchor>
    <Abstract>Applies the function pl_F2MF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorA2dBF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6d6a453af826e1347bbe6801068431e4</Anchor>
    <Abstract>Applies the function pl_A2dBF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectordB2AF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf55e4f2965d3427a503f26e3e3d22a40</Anchor>
    <Abstract>Applies the function pl_dB2AF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorD2RF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac4ffbe59182ba1514ccd8969ed780394</Anchor>
    <Abstract>Applies the function pl_D2RF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorR2DF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafdc0d266ab2c818ebf03503c1f1d0044</Anchor>
    <Abstract>Applies the function pl_R2DF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDistortF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab1abd9fad50bb7512458ef32c19399f3</Anchor>
    <Abstract>Applies the function pl_DistortF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorZapF_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6bd51dca6361c74850caf92244eefbf4</Anchor>
    <Abstract>Applies the function pl_ZapF() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadf3b8ea80497eeec187a20e7e2848ed7</Anchor>
    <Abstract>Applies the binary operator function pl_PowF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga483ff2d8bea2cdeec487db5efffa3d3a</Anchor>
    <Abstract>Applies the binary operator function pl_PowF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga96c1025337d92429c8734e175143f1f7</Anchor>
    <Abstract>Applies the binary operator function pl_PowF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotF_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabff48d9f05d09c6fc3024f2095a91630</Anchor>
    <Abstract>Applies the binary operator function pl_HypotF() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotF_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga939e06569593c806d533ea61e4b98327</Anchor>
    <Abstract>Applies the binary operator function pl_HypotF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotF_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf0893c32e31d72a7e91badc4abf62b3b</Anchor>
    <Abstract>Applies the binary operator function pl_HypotF() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2F_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga44812f3688888b573be8c9db069b936a</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2F() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2F_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaece9a054e73c28bd180580b0cd016018</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2F() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2F_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1570febbc25f8b9a3ef7ac8cc7af07ae</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2F() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillD_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3d51b6cf9010ce1fa63b9762249261a0</Anchor>
    <Abstract>Fills a vector with a constant.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearD_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa347eccfa116a68b56f8f5eee79e5707</Anchor>
    <Abstract>Fills a vector with zeros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampD_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac60fec7cc8a88e48270833135205ec12</Anchor>
    <Abstract>Fills a vector with a ramp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineD_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga81e869fd2297a6c57b5e3a312fc33b74</Anchor>
    <Abstract>Fills a vector with a line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga92916e1daf6e82d9404d525e42389b45</Anchor>
    <Abstract>Applies the function pl_MoveD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae1670474c385d41d06a26038f799c0fa</Anchor>
    <Abstract>Applies the function pl_IncD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga90167dde80a4ec5921626be554be8f1b</Anchor>
    <Abstract>Applies the function pl_DecD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad49e011e4ca3f76de0b8ec5c1d6d81e6</Anchor>
    <Abstract>Applies the function pl_NegD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaec21dab0c087e0b170745b2e3efd207b</Anchor>
    <Abstract>Applies the function pl_AbsD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac6d6857d70c11dac6815925aa5fbe258</Anchor>
    <Abstract>Applies the function pl_SquaredD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac92318b9550618c0eb61f5c6db28b6f0</Anchor>
    <Abstract>Applies the function pl_CubedD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga35254ed489bf9f5825bac6d353d80eac</Anchor>
    <Abstract>Applies the function pl_SignD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga12ef092e0c8e669d7762e69d0559e3a2</Anchor>
    <Abstract>Applies the binary operator function pl_AddD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae41675932ccb373a167cd2c83e3df768</Anchor>
    <Abstract>Applies the binary operator function pl_AddD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5a1316615dc2031b02b71424f44d657f</Anchor>
    <Abstract>Applies the binary operator function pl_AddD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa1ad270a88e18f6e9c8a51c450c3e41f</Anchor>
    <Abstract>Applies the binary operator function pl_SubD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1a28dc464696905e52db911b3f97566e</Anchor>
    <Abstract>Applies the binary operator function pl_SubD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab8ea462ef620ebc5dd512f0df2224508</Anchor>
    <Abstract>Applies the binary operator function pl_SubD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga49295bf725772df3865b0fe99be4552e</Anchor>
    <Abstract>Applies the binary operator function pl_MulD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1bc824231e441539c1ee7df8b50e0391</Anchor>
    <Abstract>Applies the binary operator function pl_MulD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf5e80360d5aae32ecddfba037c215af8</Anchor>
    <Abstract>Applies the binary operator function pl_MulD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1fa89f9180cd6811ec7a0eb94605b996</Anchor>
    <Abstract>Applies the binary operator function pl_DivD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa19c40021b63a0d14db1eddd9d0a037e</Anchor>
    <Abstract>Applies the binary operator function pl_DivD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga98a3a9eeb92bfa82aa1d7f6d12fbd89a</Anchor>
    <Abstract>Applies the binary operator function pl_DivD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gace2aecd293f599cf3e56551bf714bf9d</Anchor>
    <Abstract>Applies the binary operator function pl_ModD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad14a5010bd1ffa6a68aafee2545b5c79</Anchor>
    <Abstract>Applies the binary operator function pl_ModD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga63b81cfbb45a3881e871ef96d37628a4</Anchor>
    <Abstract>Applies the binary operator function pl_ModD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3267ac92b409d85e0f1195214d19bcf1</Anchor>
    <Abstract>Applies the binary operator function pl_MinD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga750a9c78d6f4857c73ab1ee9cdbd65ad</Anchor>
    <Abstract>Applies the binary operator function pl_MinD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga09f665f6b1bddb3bd7669410e10b3c02</Anchor>
    <Abstract>Applies the binary operator function pl_MinD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab73fa94aad3f3a9ea9b4281fa2a45637</Anchor>
    <Abstract>Applies the binary operator function pl_MaxD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafdcc887ab924c442c0496cd98cb8bf08</Anchor>
    <Abstract>Applies the binary operator function pl_MaxD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad687be0c0ca10457b0d9ea29d3e737c2</Anchor>
    <Abstract>Applies the binary operator function pl_MaxD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa6557cbdeb7309d19bb44c69a8b68ac5</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6b41819ebe1d49fbf7fcea593eea1585</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaced300febadf01a9bb061b2eb55b4c82</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4fb086ed252f0f5f8504088cf286ed35</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToD() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga427f715543dfb78fa061b1da9ae2f34c</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacc43628c757ac7fbf663ecf1d09aa5a7</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga742971fee5ae052c2cb95a9955cf7542</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanD() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5fb9c4d06a6d72de5ce40804ff346460</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga75e868cbab5a492e1daebf106fe89d64</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad5db5ae33ecc38702db1987d7f58003d</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToD() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga09d06ce6f60c7093743530f7340d0db3</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToD() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf1b670f32504cfee3765b6f7aec16a60</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToD() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga991f8dd0bbc5c9dfca56eb70e2139dfe</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7eb97b849367dd8a0b92c4e4cdffe983</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3f91ec7596d951ef68b47e277ef6c5ba</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga75601e89fa96c2711c9c1d762bd26633</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToD() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae14f26d0d6c23b301370264f5d2f5820</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga883e9677cffce2e7a385c048c0cf6051</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4bb7bd02652c307ae3f496df0354e8a3</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga79278b4c9dbf253e5179556919e9b35b</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadc42b9865fb1e2b4f33ec9da262b2092</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaac8f1f8d6c6d929b667f15dbe053831c</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga46775562a5d0bbd8d670bd7e95284783</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9d40bd884f8f805edebd3c59ca883a38</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga788004c04a717f469b0f1998d4f62067</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac9a2a0223d3af7c542c0fa570ce00a17</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5f56150d804d6952997e90fb803958e4</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4e737d98b7ad71c71432248a39c2ce16</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6f6940ac9a86f57efe4bce7400d9234b</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2001054b1fcbeee5191c265bcbaeea2c</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5778badb734f9dc6fab15eadd6e31bc7</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf7625f658d95e5bfaa275bcb24560575</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7fcc23c11a1a0ef8790d60c4be0ce4fd</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga57d7f27f996ba4e74be09197791e404d</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga87f14ff8770a1f823a4157bc40e1e5d6</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0ddd02df030d53aa2e7ef50e24d6aa84</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshD() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga14330dd55c25b72733f3ca804e440593</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4f1ffab901ada34b727346e72b700627</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac7ad2ae5fd9ec33bf7bbb4f1efaa4f5a</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2c953ed08f1a81c89806bdd6f8cf36c3</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddD_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab19f04fdfabafac14d7d57c621efa008</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupD_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadaaf12325ee661c80ccc2c3a227ddf5d</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog2D_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2f77253685ccd08349ad129a0bc09a23</Anchor>
    <Abstract>Applies the function pl_Log2D() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorReciprocalD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga88f1c17c13d19ff647a659e21164ec91</Anchor>
    <Abstract>Applies the function pl_ReciprocalD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab78a731a99877c501f2531b263ed0ff7</Anchor>
    <Abstract>Applies the function pl_SinD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCosD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5eb1030590f71b5165e3f72b6bd656e5</Anchor>
    <Abstract>Applies the function pl_CosD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga135af6226d8b96e81abaaba6f9cd0b06</Anchor>
    <Abstract>Applies the function pl_TanD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAsinD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaedae3e19d90c4a4cb5212edadcd76f76</Anchor>
    <Abstract>Applies the function pl_AsinD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAcosD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacac99df0db7dad5461861849601a0dc8</Anchor>
    <Abstract>Applies the function pl_AcosD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtanD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2dcc5850da8f410f63fb5c929a0f7e76</Anchor>
    <Abstract>Applies the function pl_AtanD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSinhD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaebafcf0bf05dade5b95bf6066808f623</Anchor>
    <Abstract>Applies the function pl_SinhD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCoshD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5853e6b3aff90d56b2d433da806d858f</Anchor>
    <Abstract>Applies the function pl_CoshD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorTanhD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga250f2e61d743622a1609f85839f9c4bb</Anchor>
    <Abstract>Applies the function pl_TanhD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrtD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga540c096f6e4382440007c878047f4f5d</Anchor>
    <Abstract>Applies the function pl_SqrtD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLogD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3b06f007387aeffb3ebd2214f5090fb8</Anchor>
    <Abstract>Applies the function pl_LogD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLog10D_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1a5902d66076b7527b8ca6a674fef22e</Anchor>
    <Abstract>Applies the function pl_Log10D() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorExpD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga346a791b777f3fb3ce4a8b5ab8dd0133</Anchor>
    <Abstract>Applies the function pl_ExpD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCeilD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga50da194cf31d82e931c3d2b3509934b3</Anchor>
    <Abstract>Applies the function pl_CeilD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFloorD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0fabcca5e7164c365cecccf20a2ad394</Anchor>
    <Abstract>Applies the function pl_FloorD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFracD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaeb35318b9e872a8d4d86d9c795d368b2</Anchor>
    <Abstract>Applies the function pl_FracD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorM2FD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga08b1418b75b12da60a96a514008a3e2d</Anchor>
    <Abstract>Applies the function pl_M2FD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorF2MD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga781a129439e1bb1dd0295a99085f3a84</Anchor>
    <Abstract>Applies the function pl_F2MD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorA2dBD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae0e337b7b89735618a1855ea91660bd9</Anchor>
    <Abstract>Applies the function pl_A2dBD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectordB2AD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7bb9f2cc273aaefa164d83f970e30380</Anchor>
    <Abstract>Applies the function pl_dB2AD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorD2RD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaba41fd68b23cb9bdd1cefb6c4b71c7a4</Anchor>
    <Abstract>Applies the function pl_D2RD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorR2DD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa22058ab0b84dd204cd0818f7eee4e71</Anchor>
    <Abstract>Applies the function pl_R2DD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDistortD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae1c81935d93b40e48a4986fc20c9e34b</Anchor>
    <Abstract>Applies the function pl_DistortD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorZapD_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabfeb5cce886741713f4db15d8e45530a</Anchor>
    <Abstract>Applies the function pl_ZapD() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3373906398e94de141273acb0d6390c9</Anchor>
    <Abstract>Applies the binary operator function pl_PowD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4b253f22b62b7117f6af0c31abfd6c07</Anchor>
    <Abstract>Applies the binary operator function pl_PowD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorPowD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9296c3251eb6571e43019400f83c765c</Anchor>
    <Abstract>Applies the binary operator function pl_PowD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotD_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga400b8712d0ef2f7222022e3030ab65d5</Anchor>
    <Abstract>Applies the binary operator function pl_HypotD() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotD_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadefa93b1fb00f994acaf717eb876f05b</Anchor>
    <Abstract>Applies the binary operator function pl_HypotD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorHypotD_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4beba0c36335d94c6c76b9a16aaee33f</Anchor>
    <Abstract>Applies the binary operator function pl_HypotD() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2D_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga89afb2f55dfc5f5a749799d78aa27693</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2D() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2D_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae9ae9c8c64cfe988951cbc4b51b81abf</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2D() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAtan2D_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadac799a76f6ffc595d2b0771279a48a4</Anchor>
    <Abstract>Applies the binary operator function pl_Atan2D() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillS_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6204b4bc6e4f4ff542b53f15c2c7a4a1</Anchor>
    <Abstract>Fills a vector with a constant.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearS_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf9ff12ccf9b8b66551abb12e0d11ec4f</Anchor>
    <Abstract>Fills a vector with zeros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampS_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6d653556d9a1ce44e17e7551dd2e5343</Anchor>
    <Abstract>Fills a vector with a ramp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineS_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5566bc4aebe7465359cac138ea6f45fd</Anchor>
    <Abstract>Fills a vector with a line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga00116a2ca2d53876d5c515da4c8c49df</Anchor>
    <Abstract>Applies the function pl_MoveS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga743930b4ab02ddcecf4cf1bec9520203</Anchor>
    <Abstract>Applies the function pl_IncS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaad38ea1bbf04597e2424451d97188304</Anchor>
    <Abstract>Applies the function pl_DecS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac062955a30c1d9c9b76cab1a485b8864</Anchor>
    <Abstract>Applies the function pl_NegS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae1e52d14bc1a34c68a948d47df95ec84</Anchor>
    <Abstract>Applies the function pl_AbsS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaad088f3ce9e39ee003b9f8cb4c9ebfb</Anchor>
    <Abstract>Applies the function pl_SquaredS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadc74c7a764866191b0fae31c1451b73f</Anchor>
    <Abstract>Applies the function pl_CubedS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignS_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6d7b93f02c29d5ff9792082a646d4736</Anchor>
    <Abstract>Applies the function pl_SignS() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad9786be679f3fd5e9129d92d5e642975</Anchor>
    <Abstract>Applies the binary operator function pl_AddS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5e3237fd95808bb48b6b79213a34df0e</Anchor>
    <Abstract>Applies the binary operator function pl_AddS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae42fe911bc599a2df82ffda402470e31</Anchor>
    <Abstract>Applies the binary operator function pl_AddS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga09a15a25c8664cc5fe93d6ba1612389c</Anchor>
    <Abstract>Applies the binary operator function pl_SubS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga443a68819fc7dd7ed74607f9ed917017</Anchor>
    <Abstract>Applies the binary operator function pl_SubS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5b5b085ec5b3116b23929d6665a18575</Anchor>
    <Abstract>Applies the binary operator function pl_SubS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab8fbe29a984ac0c0f14cbc2754fff47</Anchor>
    <Abstract>Applies the binary operator function pl_MulS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga824042c1cfc121c193b50054bc07bd41</Anchor>
    <Abstract>Applies the binary operator function pl_MulS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga47cbc0ea3f7025b6db2363260b65c376</Anchor>
    <Abstract>Applies the binary operator function pl_MulS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad8a8fa16ce64c707eda512adf98ba156</Anchor>
    <Abstract>Applies the binary operator function pl_DivS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae79755efdeaabd5524c1bd211e7241b1</Anchor>
    <Abstract>Applies the binary operator function pl_DivS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga55ac938ce09bf8512bc76261ccd29948</Anchor>
    <Abstract>Applies the binary operator function pl_DivS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae0f002b56f72128ed5b3c712261aa021</Anchor>
    <Abstract>Applies the binary operator function pl_ModS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga68a73151d459bd844bab8b31f2d51d2d</Anchor>
    <Abstract>Applies the binary operator function pl_ModS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8ffa4533c17c0e627d0ebbea66cff597</Anchor>
    <Abstract>Applies the binary operator function pl_ModS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5010e97ebb5584f80f165df0f311b46e</Anchor>
    <Abstract>Applies the binary operator function pl_MinS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaae33e469642fc0e60fdcb517c8fae142</Anchor>
    <Abstract>Applies the binary operator function pl_MinS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3a38e5ae72a77b438a13eb442fe1ee5e</Anchor>
    <Abstract>Applies the binary operator function pl_MinS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad339bb52af31adb0689e19a6c8723cd1</Anchor>
    <Abstract>Applies the binary operator function pl_MaxS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga77e7886046cd4656a0cceb8def0d7787</Anchor>
    <Abstract>Applies the binary operator function pl_MaxS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga66cd65b6f9e5f70ddecfc7b3eb40f9b0</Anchor>
    <Abstract>Applies the binary operator function pl_MaxS() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5bc51f492d94941c6f1c4313e06c8da1</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8d7f3f26ced00fc20e47e849a3eca607</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga877613416df450a45f2c48382b21d750</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7e074461824fde3c932fd4ad588937ea</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToS() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac5d7d59b906081c8205d652cf750ade5</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga65c91b478f8ed90e1eb256c3788e9f0b</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3c1571089e66fad788ede26e8a9a0f97</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanS() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga73dc7a3aa83c3cfb095761e96faf5ee6</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae638bb12613f562a45c12c41f9e5db50</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga170f7ff35e5f45c26e6064d642b31e1a</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToS() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga130276378ce6235bac6832232c4918f4</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToS() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa4939f89237d6a48266fca0ed0530fbc</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToS() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga86295dbb41c9f8706227160afff8e18a</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga73770af53fc9f3f36072b79a1e1c2092</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga02226c77b2e38a7b604ab35088fe44fc</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab46c18d16475d7e770109d15a5ac839a</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToS() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga335af27f1920b47ca0ff18aff400f6fa</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga129554dbe9192e52946f0c3392100848</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga664b0d780f7c80c58456c23a4b4e929b</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac2ba59d155faebe6b804d6ec19f2edc7</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga36b8ccb91a525c498337910ed46f4209</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga975403756ec11f5d943cbe8fe36cf3c6</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf7f331c1c85310658727ca0b11ae4dc1</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae3a4e19ec8abb3bac0e5bb6c887bb646</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga57aa99ce2436f21da79903a4a07dc436</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga399c7211375ae3834467f251dd5ab488</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0103ff955e2e6c710ca4ad2a250b51ea</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga747d3bc07b7274114b8c4af9847902d3</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad9115d3493fece5836583e6c55f91e5f</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8525e02a522821beb9cf0aeb472165f3</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaabdf55cdbfd0d85aafa52d763b91d91</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga422881deeb36ac85eadaaabeedbf2f4e</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga66b6ca82f4090130fcba7c21dc44730b</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2dc4f59cfde13de3c2e3e871e5d0517d</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshS() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshS_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabfe493153f9a7e7d04af461a18368010</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshS_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad54338b76e8465146cbf3269d8a405d3</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshS() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab60a1ee99ca08001622da70ed098ee1c</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad7642e45155d214535356262de614a08</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0dcb95b6f83778b7159a7896105144a1</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga15fe29c7893af841caa7a26db4f88f14</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddS_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacfef4b4020df252bed7ab3b0c2e7eda9</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupS_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga376c98f4e041eba57e3a8289c5e6d705</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillI_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga727178030fcd63f7a1be4dcc451f68bd</Anchor>
    <Abstract>Fills a vector with a constant.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearI_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1aff6ae666ee2aa04020c2d892d9f39d</Anchor>
    <Abstract>Fills a vector with zeros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampI_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga42061b10abbe6849bfac21fe6f1ce766</Anchor>
    <Abstract>Fills a vector with a ramp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineI_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga705d29301461f04ed2372724ad86281d</Anchor>
    <Abstract>Fills a vector with a line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga19a61afeeff8a96a1154b152cc75f68e</Anchor>
    <Abstract>Applies the function pl_MoveI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaecf5045346456bfbfc963dd6c062dd41</Anchor>
    <Abstract>Applies the function pl_IncI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga22b35ce5f323602c380b336f89be6081</Anchor>
    <Abstract>Applies the function pl_DecI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4ebcc3f3b711bebbf8dbcb99defdb676</Anchor>
    <Abstract>Applies the function pl_NegI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac64c304f1b44b88a8310659940f10331</Anchor>
    <Abstract>Applies the function pl_AbsI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga841881979086b4c05673571c4f7cd074</Anchor>
    <Abstract>Applies the function pl_SquaredI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab4882bdad6edc2a9466b146d4aa652e5</Anchor>
    <Abstract>Applies the function pl_CubedI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignI_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga03a44b0015a08f810263508243ad0d4e</Anchor>
    <Abstract>Applies the function pl_SignI() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa16f0901425e4e0c2eaae46865259846</Anchor>
    <Abstract>Applies the binary operator function pl_AddI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7c18f01544ca8513ff416f200ba6164c</Anchor>
    <Abstract>Applies the binary operator function pl_AddI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf8c145d6d4feb7e609e11c4ac858efb7</Anchor>
    <Abstract>Applies the binary operator function pl_AddI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga197e4812fddc0dc3e377b8fd4e3379c3</Anchor>
    <Abstract>Applies the binary operator function pl_SubI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga43bc0898fea297df059997f3143dee24</Anchor>
    <Abstract>Applies the binary operator function pl_SubI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4ef0fce8af0dedc828f9168e838c4ef6</Anchor>
    <Abstract>Applies the binary operator function pl_SubI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga960849b807b6166c4e8976b90e3c8b2e</Anchor>
    <Abstract>Applies the binary operator function pl_MulI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac136990a6cd21e5c31deeaa1852197e7</Anchor>
    <Abstract>Applies the binary operator function pl_MulI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga51687633d036d694c1114f91921401ea</Anchor>
    <Abstract>Applies the binary operator function pl_MulI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga176ad87d2d709beda7997cf183e2b5f6</Anchor>
    <Abstract>Applies the binary operator function pl_DivI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1f309dda40d4c58cdf9999fc2821ec5c</Anchor>
    <Abstract>Applies the binary operator function pl_DivI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad642e939f7f405d4aab58c731b7d5e7a</Anchor>
    <Abstract>Applies the binary operator function pl_DivI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga54343015ebbb345e738e5b28f917eaf3</Anchor>
    <Abstract>Applies the binary operator function pl_ModI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga994d471cd7f98bbda4c66492c1e651b2</Anchor>
    <Abstract>Applies the binary operator function pl_ModI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga21b7e290ac5222277869c93e78f000a2</Anchor>
    <Abstract>Applies the binary operator function pl_ModI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga16971d35d0936a4db500931541d87d21</Anchor>
    <Abstract>Applies the binary operator function pl_MinI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga5172fcc25519762ad7554e452e4bde5a</Anchor>
    <Abstract>Applies the binary operator function pl_MinI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadf7c1aadac9149ac376d63d127bb0045</Anchor>
    <Abstract>Applies the binary operator function pl_MinI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaea32edfdbcfc5403897bc33fe329bc97</Anchor>
    <Abstract>Applies the binary operator function pl_MaxI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga862debd0eee430139e5a902f00e30718</Anchor>
    <Abstract>Applies the binary operator function pl_MaxI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7780e6326d8ad2f84f8498772a948d33</Anchor>
    <Abstract>Applies the binary operator function pl_MaxI() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga12b5f5ed8f5faacb1698b02b0ced8803</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga85097a2dde0bb7f2a99f8c8a9db2017d</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabf54043e6451bc7d8186546bd9a24400</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf03ecaddf9f5540898ea025e0c608191</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToI() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8effb02c79b6654af2076feb714b643d</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae87c2ba26f4fd9ed769f73d9c70a604b</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3b93d6d5fecbb723deb872f42681a986</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanI() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga869265fec66535f6495bfca6ff0b4eeb</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6f40eefc4ad028776f5179adc23b781f</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabe386fb77c3733df1b72da24d39987ac</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToI() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab37bd644419a8dddf3e8e25ef1622a57</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToI() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga88785aac3d4d61bf59e3f5aba4ab1c6b</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToI() to an input vector and a scalar val...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga504386875fab2214b6520e995b71b3fc</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaa6ae8d351738646edd0e6683460ca86</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3633d60d514829d578e49362bb456d33</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1437a8cb597e5278da4821d0084483fe</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToI() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7248c7f18dc9e0c220408967056150bd</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga08535f65b8428eb8476773ab6381764e</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga57263ad8dd6105b4ebf699c72e07a343</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3df6f830ed2c6262d1b6ac212cd9f070</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2d43084d26270d2c6bec67a3a50bc39e</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga597e0e2f2269e3e58218fb983226aefc</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf2977751af751063b52f61035652ad65</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga43bb147fc87e3d0b648f38973ad3ec42</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf171b69a54ed5815ad05b8fbbe1d0e88</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0c4c875eb7802ab9b8bbfa291f516d91</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab7a5d8f72139d1f01490b6b5525e1da</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf50f17978fb3038f2de90158d52ba22d</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab2ddadabab887ab7242e6e38a1a9e571</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae801d743f02db4268e9897ba221372b5</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa745e212cf4396f83b2f018b15b9a370</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gace82d0dd1e6729ebc1afc36fe0ff24e5</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae318dbf31f82cd92919cb57ec9094b41</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae3434cc8929b73c8e577b15860607c9c</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshI() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshI_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0d56ca707caa7e03c034acd240cb8ef9</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshI_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9119d072c56a8dcd37299be9cc0cfcbb</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshI() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga4aaa634f9d9a0c565489c4d87bd0c2d4</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga03810df23c537596e82c9dc719c7b25c</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8adb8adb81422b2aaeb1f3b7b8a7beae</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gacf5b8d44f0f632e92508d099181ba954</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddI_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac94c1021ef7c7eae685f1dcc5d7cef5a</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupI_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gabb45f8a65457b0a774d4aaf3b01c963f</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorFillLL_N1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf84a0db5e5fef5eadf697cf07de13233</Anchor>
    <Abstract>Fills a vector with a constant.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorClearLL_N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa065357156fb3be7d3a8ada376387d9a</Anchor>
    <Abstract>Fills a vector with zeros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorRampLL_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab31c67648781b10b85c3b8aed2979034</Anchor>
    <Abstract>Fills a vector with a ramp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLineLL_N11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae2c3c99f8fbee8b93d48f299c87c3b77</Anchor>
    <Abstract>Fills a vector with a line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMoveLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae919da82c0ae9d389e57e742c0de4591</Anchor>
    <Abstract>Applies the function pl_MoveLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIncLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga13ec881fafbc63ad1c70efdf3950f25d</Anchor>
    <Abstract>Applies the function pl_IncLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDecLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf5de631557fcb8888f6af915ed8a6918</Anchor>
    <Abstract>Applies the function pl_DecLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorNegLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1fda3af654ab09d3838e9c5bf714c012</Anchor>
    <Abstract>Applies the function pl_NegLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga80fd85d072f3513072d491e0e98edfb8</Anchor>
    <Abstract>Applies the function pl_AbsLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSquaredLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga21096795df3eb840b95014154dd06075</Anchor>
    <Abstract>Applies the function pl_SquaredLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorCubedLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa7290240f91f9973839d794fa1a43af8</Anchor>
    <Abstract>Applies the function pl_CubedLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSignLL_NN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf3e9d4da884a902b4996935d9f0376fc</Anchor>
    <Abstract>Applies the function pl_SignLL() to each item in a vector.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae1d5279847128c7432cfa6f137cf91c7</Anchor>
    <Abstract>Applies the binary operator function pl_AddLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf68c0439b9f602c00d4dfd4cdfc9b50a</Anchor>
    <Abstract>Applies the binary operator function pl_AddLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAddLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3e823307e585dcbb01e2096a0dbf31d0</Anchor>
    <Abstract>Applies the binary operator function pl_AddLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac0b7da55fd7b38be08e742bf3e3023fe</Anchor>
    <Abstract>Applies the binary operator function pl_SubLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac56555f924384c51446f610e99ecf59a</Anchor>
    <Abstract>Applies the binary operator function pl_SubLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSubLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga864ff9f594555108deeb4c93db21df54</Anchor>
    <Abstract>Applies the binary operator function pl_SubLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0a5eb14af645d390eca7fb821c5e8de7</Anchor>
    <Abstract>Applies the binary operator function pl_MulLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga20621a1f0b38d5b2df604193d3543e8c</Anchor>
    <Abstract>Applies the binary operator function pl_MulLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab16f182cb89172200a782f63a6d2cbf5</Anchor>
    <Abstract>Applies the binary operator function pl_MulLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0167966039a5e7382af51977a938d754</Anchor>
    <Abstract>Applies the binary operator function pl_DivLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gadaa1e0e2d9937ca0e8559a94302b49dd</Anchor>
    <Abstract>Applies the binary operator function pl_DivLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDivLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga7da06947a2f5c7f9560fdaccbaedeac3</Anchor>
    <Abstract>Applies the binary operator function pl_DivLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gafe5b172f36f5dcad41b333136374096c</Anchor>
    <Abstract>Applies the binary operator function pl_ModLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga9b7221a44434f169a28ba01233187747</Anchor>
    <Abstract>Applies the binary operator function pl_ModLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorModLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf3489d1f12dc47168d411d5327db49b3</Anchor>
    <Abstract>Applies the binary operator function pl_ModLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga09090ecf8370a76224afb6c6d6f100a3</Anchor>
    <Abstract>Applies the binary operator function pl_MinLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga021f6b8f8cba03bfa196ceb0b924b746</Anchor>
    <Abstract>Applies the binary operator function pl_MinLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMinLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac92176b8931e56802485832a309eef92</Anchor>
    <Abstract>Applies the binary operator function pl_MinLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac46bf6babbe74e5bdb39d00c4399305a</Anchor>
    <Abstract>Applies the binary operator function pl_MaxLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0c9af5446cea35b78b61799b52531fbd</Anchor>
    <Abstract>Applies the binary operator function pl_MaxLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMaxLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa317765828b6f2ac5513f43199f9e548</Anchor>
    <Abstract>Applies the binary operator function pl_MaxLL() to an input vector and a scalar value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8b38f070771288c84d2abe662a43ed74</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga261be999c41717bae31ecd4cc204f3fc</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac55ebbe428b1f8a585fa7bbc88346655</Anchor>
    <Abstract>Applies the binary operator function pl_IsEqualToLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad7b6a85fe384903679ead8d6b1c372b0</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToLL() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga906550c07fdd9897abbd3d9d8e8617c6</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsNotEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga48345058d66d98c680c3b11ab55c4701</Anchor>
    <Abstract>Applies the binary operator function pl_IsNotEqualToLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaab0cf0886fd1c306973af56623196996</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanLL() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga1ee194bb35cb350379605f79f401593f</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa7b42f129ab4bf418e7993d979150699</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf7b2456843dd954b646fe8e0334577f8</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToLL() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga50181d615f41745f708047d4f8ce0b14</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToLL() to an input vector and a scalar va...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsGreaterThanOrEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga47ff8793050f5387e8e24320f75ef159</Anchor>
    <Abstract>Applies the binary operator function pl_IsGreaterThanOrEqualToLL() to an input vector and a scalar va...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab29d403f88a018cdc6a8ed7fb801ba16</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3b39658fb221c92c5617ce946262de2c</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaca5df71805cf447e6b511fa7823ae44b</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0f29b12f4df2237e9b833c97f04b1981</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToLL() to each item in two input vectors...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gad79b9f3693432646389e1ede8bee2fea</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorIsLessThanOrEqualToLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga988bda519b884018b312990b58c15e93</Anchor>
    <Abstract>Applies the binary operator function pl_IsLessThanOrEqualToLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf592a2d254c4eb8d213cb74ec8383e6f</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf034cde90191003fba90e423458cd4e6</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSumSqrLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaeef7ad1d58726bc9f3f06b276b3fa6f</Anchor>
    <Abstract>Applies the binary operator function pl_SumSqrLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab8b49243b28fc58e8c248e6082031348</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0e084dcf725051417d3377a9cac440cc</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorDifSqrLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga2e8cc617e97f46514200c452f9d6a8df</Anchor>
    <Abstract>Applies the binary operator function pl_DifSqrLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga41012ab6e39483bb96d38e66d0f1a26f</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga8322b53212bb0cf9d7ba000bb5c7c93d</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrSumLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga3708c0ebae86573f054ac6eb7e370143</Anchor>
    <Abstract>Applies the binary operator function pl_SqrSumLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6da0c2289b6dd4b948019b4f17c2abf1</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga268f7123d51dd3ddae1ed03bb1669dfb</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorSqrDifLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaa052fcfbb798651180f1e19bcaedd137</Anchor>
    <Abstract>Applies the binary operator function pl_SqrDifLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac82c15d6469caebac855c86c0a2468db</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab35ab2461f049daa25d495492d00d4ee</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorAbsDifLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga6408443ea095a5e09ef52f6176fde348</Anchor>
    <Abstract>Applies the binary operator function pl_AbsDifLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaaefcaea6937598439c1e27ff730e3b05</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshLL() to each item in two input vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshLL_NN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaeddba6d777b29b1a424122c495f48e8f</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorThreshLL_N1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gac52ca8882e12cc87a0973ad0f728db7b</Anchor>
    <Abstract>Applies the binary operator function pl_ThreshLL() to an input vector and a scalar value...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NNNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga589741aab3233ccabb9e7072147820a6</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NNN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaed08064190f52acea2c3a812b925c83c</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NNN1</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gae3284e0da05b20dff4f322cce0772771</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NN11</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>ga0a6c37f8ad3cf89475953b21a9a0a246</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorMulAddLL_NN1N</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gaf7fe17b73495151acf1ca13ff12a4570</Anchor>
    <Abstract>Applies the multiply and add operator to a set of vectors.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_VectorLookupLL_NnN</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_vector_functions.html</Path>
    <Anchor>gab03ed8477a6d6e9cf6583d2695ada1d7</Anchor>
    <Abstract>Generate a vector by using another vector as the indices into a lookup table.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralLayerFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Abstract>A neural layer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralLayerFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Anchor>gadd0cec9e248e081f0a99fe832413c7ea</Anchor>
    <Abstract>An opaque reference to the Plank NeuralLayerF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralLayerF_InitNumNodesAndPrevious</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Anchor>ga023d71b6299b257a3fda612ea8ca053e</Anchor>
    <Abstract>Initialise a Plank NeuralLayerF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralLayerF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_layer_f_class.html</Path>
    <Anchor>gaaf66a7e40088029f7ad7d155c3b1f7ec</Anchor>
    <Abstract>Deinitialise a Plank NeuralLayerF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNetworkFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Abstract>A neural network.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNetworkFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Anchor>ga41d21c0f8a17e595812cde801c5bfe3e</Anchor>
    <Abstract>An opaque reference to the Plank NeuralNetworkF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNetworkF_InitWithLayersAndRange</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Anchor>ga135ac7b822cb9feb3e4411717c677e03</Anchor>
    <Abstract>Initialise a Plank NeuralNetworkF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNetworkF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_network_f_class.html</Path>
    <Anchor>ga5c66264ad7b8d8b9ee43842cd5312dc4</Anchor>
    <Abstract>Deinitialise a Plank NeuralNetworkF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNodeFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Abstract>A neural node.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankNeuralNodeFRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>ga86ac3adc51083e916a5ad462b644dda0</Anchor>
    <Abstract>An opaque reference to the Plank NeuralNodeF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNodeF_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>gaa0b6aa8916062cd782bb4bbb739024cd</Anchor>
    <Abstract>Initialise a Plank NeuralNodeF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNodeF_InitWithNumWeights</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>gaf187313d2a95ebf61e486343bd3043b0</Anchor>
    <Abstract>Initialise a Plank NeuralNodeF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_NeuralNodeF_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_neural_node_f_class.html</Path>
    <Anchor>gaece3a6d5e6fcf42bdf085608a3bd0e52</Anchor>
    <Abstract>Deinitialise a Plank NeuralNodeF object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankModules</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_modules.html</Path>
    <Abstract>Plank modules....</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFundamentals</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_fundamentals.html</Path>
    <Abstract>Plank fundamentals.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_classes.html</Path>
    <Abstract>Plank classes...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_functions.html</Path>
    <Abstract>Plank functions...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankMiscFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Abstract>Plank misc functions...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertUIToUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>ga12d4aea1c2eccf219229930a7d7b2d1b</Anchor>
    <Abstract>Convert an unsigned 32-bit int into to an unsigned 24-bit int.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertUI24ToUI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>gaa379ad95d94bc0bac21cd19e41a13ba9</Anchor>
    <Abstract>Convert an unsigned 24-bit int into to an unsigned 32-bit int.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertIToI24</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>ga4cc22ee75977dccf974b63af39d9df5d</Anchor>
    <Abstract>Convert a 32-bit int into to a 24-bit int.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_ConvertI24ToI</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>ga849950922a5ac6275b060f7dccd3d7af</Anchor>
    <Abstract>Convert a 24-bit int into to a 32-bit int.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_FourCharCode</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_misc_functions.html</Path>
    <Anchor>gadf1a3d67636994e54900cb2cc1a3d54f</Anchor>
    <Abstract>Convert four characters to a int as used by IFF file formats to identify data chunks.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankInternalMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_internal_macros.html</Path>
    <Abstract>Plank internal macros...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankCoreConcepts</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_core_concepts.html</Path>
    <Abstract>An outline of the core concepts used in Plank.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankRNGClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Abstract>A simple, fast, cross-platform random number generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankRNGRef</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga4b77483ed0e59c1b55fb0b6682ef82cb</Anchor>
    <Abstract>An opaque reference to the Plank RNG object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_CreateAndInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga86aca40f3469cb412b633883f65f25dc</Anchor>
    <Abstract>Create and initialise a Plank RNG object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Create</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>gaf8c9d1bec2fe0ab8c5568e8917197209</Anchor>
    <Abstract>Create a Plank RNG object and return an oqaque reference to it.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Init</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga6daa15c83f5bb03d4eb8a843eb41f729</Anchor>
    <Abstract>Initialse a Plank RNG object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_DeInit</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga0349fc5f9b97046d43a8546d193827f2</Anchor>
    <Abstract>Deinitialse a Plank RNG object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Destroy</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>gabf41c3146297725bd10f022b0121927b</Anchor>
    <Abstract>Destroy a Plank RNG object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Seed</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga2bc680ab31e54bd5f950bfd874ba3317</Anchor>
    <Abstract>Seed a Plank RNG object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_Next</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga7366f413a659c0633e5ef89595a032cc</Anchor>
    <Abstract>Generate a random integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_NextInt</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga8f577823c323a83c0aa5418db3d79f0a</Anchor>
    <Abstract>Generate a random unsigned integer over a given range.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_NextFloat</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>ga6f3a1cd9c95780cbb782f3234c4e1150</Anchor>
    <Abstract>Generate a random float between 0 and 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pl_RNG_NextDouble</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plank_r_n_g_class.html</Path>
    <Anchor>gaf1d82fa1ba755fe6399767b9b88967b6</Anchor>
    <Abstract>Generate a random double between 0 and 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkModules</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_modules.html</Path>
    <Abstract>Plink modules....</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkFundamentals</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_fundamentals.html</Path>
    <Abstract>Plink fundamentals...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_classes.html</Path>
    <Abstract>Plink classes...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkInternalMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_internal_macros.html</Path>
    <Abstract>Plink internal macros...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkCoreConcepts</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_core_concepts.html</Path>
    <Abstract>An outline of the core concepts used in Plink.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkSawProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_saw_process_f_class.html</Path>
    <Abstract>A sawtooth generator process.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkTableProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_table_process_f_class.html</Path>
    <Abstract>A wavetable generator process.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkWhiteNoiseProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_white_noise_process_f_class.html</Path>
    <Abstract>A white noise generator process.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkBinaryOpMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_binary_op_macros.html</Path>
    <Abstract>Binary operator process macros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkBinaryOpProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_binary_op_process_f_class.html</Path>
    <Abstract>A binary operator processes.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkMulAddProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_mul_add_process_f_class.html</Path>
    <Abstract>A multply-add process.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkUnaryOpMacros</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_unary_op_macros.html</Path>
    <Abstract>Unary operator process macros.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkUnaryOpProcessFClass</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plink_unary_op_process_f_class.html</Path>
    <Abstract>A unary operator processes.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkBinaryOpFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Abstract>Binary arithmetic operator functions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga8aed5431429725b65a406ad5cd4c4d59</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;+&amp;#39; operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gae83e120cc4ef16930adcfa5225dd8e22</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;-&amp;#39; operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga19d5763435e67473c6d33bd68e8ab84b</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;*&amp;#39; operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga2d1760b9a86fa164a4138d8653375646</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;/&amp;#39; operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gac0c80e9bf4c33240c601bcae8a1fe11c</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;%&amp;#39; operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga823bdbe35ca18e968ecf8f78e0311a29</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;%&amp;#39; operator (float).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga37dd9cdd3f2b51b9e75ce468fc8f5383</Anchor>
    <Abstract>Convenient inline function for the &amp;#39;%&amp;#39; operator (double).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga4fede61eeb7c6df5cf700c59267ff483</Anchor>
    <Abstract>Returns 1 if the inputs are equal otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gab96605a7aafbad650ce77b525fa21426</Anchor>
    <Abstract>Returns 1 if the inputs are not equal otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga592c0921ce238e5178ae0e55a8ef80ba</Anchor>
    <Abstract>Returns 1 if the a is greater than b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gad044dff716c0cf73eab922c838a55829</Anchor>
    <Abstract>Returns 1 if the a is greater than or equal to b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga8b5df4a62179fe535aa6365f5a1b8c41</Anchor>
    <Abstract>Returns 1 if the a is less than b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gaf43825d912a328a5d349ba3c36fd75bf</Anchor>
    <Abstract>Returns 1 if the a is less than or equal to b otherwise returns 0.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gad11e580e7a49db13e0b8fcd6babc4841</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga8c0089d2d96d98ca8394950fc062f1f8</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga1ecf161d4fc9111638e590270e05163c</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga84eca012c2ffbe3375630ea38f38fd30</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gaa8816d0ec4c2bfd0de5603a9b6c9badc</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gabed19764b5f97b7ca5f6c29fb706ce23</Anchor>
    <Abstract>Returns .</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga01a457334184e3bbf13e3fbc60819a1a</Anchor>
    <Abstract>Returns the absolute difference between the input arguments.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga76b312f2fe7db734a1165f47a998f34c</Anchor>
    <Abstract>If a is less than b returns 0 otherwise return a.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gabf9e7fd23a39c53e897cf66aaf90a68a</Anchor>
    <Abstract>Returns minimum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gae9767f40737087f6253040a0aaee4146</Anchor>
    <Abstract>Returns maximum of a and b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga0efbcd57e8a17ef548e238ea9f35bc62</Anchor>
    <Abstract>Returns a raised to the power b.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>ga3edabf0b05f53c9399cd27330d6bbb04</Anchor>
    <Abstract>Returns the input argument squared.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_binary_op_functions.html</Path>
    <Anchor>gadd1d6f37c63b4d84d7ccec97ce802376</Anchor>
    <Abstract>Returns the input argument cubed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkMiscArithmeticFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Abstract>Miscellaneous arithmetic functions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga866b0e714cabbe22cf1d110c7e4ac5cf</Anchor>
    <Abstract>Returns minimum of a, b and c.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga02d2b04c0cf840df7095800c36a40c08</Anchor>
    <Abstract>Returns minimum of a, b, c and d.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>gafab0b7afa53a4ea09ed8b1c702fef079</Anchor>
    <Abstract>Returns maximum of a, b and c.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_misc_arithmetic_functions.html</Path>
    <Anchor>ga53da7dc27040df1b26257548d202912a</Anchor>
    <Abstract>Returns maximum of a, b, c and d.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkUnaryOpFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Abstract>Unary arithmetic operator functions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga06d0709c8d848fd8a378b06a3483ff11</Anchor>
    <Abstract>Returns the absolute of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gad5313447396d37207a9d8531fda5bc34</Anchor>
    <Abstract>Just returns the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gade67f9737af203712eb3750f6be0a033</Anchor>
    <Abstract>Increment by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gabffd643a6de922fc4b6fca4da69ae666</Anchor>
    <Abstract>Decrement by 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga6ada25a93b42c22935c7045ea5b2c7a5</Anchor>
    <Abstract>Returns the logarithm base 2 of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga599553e9c1629dba5ed1cf8f189bc2c4</Anchor>
    <Abstract>Returns the negative of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga3409b1ec9b0184b70f506b20d904e08a</Anchor>
    <Abstract>Returns the reciprocal of the input argument (i.e, ).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga731baf3de4ee31dbd113dc6dd30e03b9</Anchor>
    <Abstract>Returns the sine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaab9a616ae79e3254e55525c49ca0dfc2</Anchor>
    <Abstract>Returns the cosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga115f75881b696f375ed1503c9d9df9ec</Anchor>
    <Abstract>Returns the tangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga6cc0d4479a73f33ae482260da3d289c2</Anchor>
    <Abstract>Returns the arcsine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga018fb854e657a002746727f991b69e85</Anchor>
    <Abstract>Returns the arcosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaac91c8110b3619165da582eaed03d760</Anchor>
    <Abstract>Returns the arctangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaa8a751a153620f9ed886270064f8e8e3</Anchor>
    <Abstract>Returns the hyperbolic sine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga5c5e2f5e148871472711b32aee8875e2</Anchor>
    <Abstract>Returns the hyperbolic cosine of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga5d74e407f13c2b5df5b3909e6c61b3f2</Anchor>
    <Abstract>Returns the hyperbolic tangent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gae19ace5e774d8e4be6541f7da421b07d</Anchor>
    <Abstract>Returns the square root of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gae53dc6c1396bbeb7af2d1e428ecf533b</Anchor>
    <Abstract>Returns the natural logarithm of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga1deca0817cf680d015c518b306541d85</Anchor>
    <Abstract>Returns the logarithm base 10 of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gab29841e04677e978e08b70b8ca71d26d</Anchor>
    <Abstract>Returns the exponent of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gafa342560d0e1548479d7c925b1cd5471</Anchor>
    <Abstract>Returns the input argument rounded up to the next highest integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gabca294f6c49287f58c83d1762f63a634</Anchor>
    <Abstract>Returns the input argument rounded down to the next lowest integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga8574f6b212e32701381d2e070c8707b6</Anchor>
    <Abstract>Returns the fractional part of the input argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga44d7723c080a9bc8577e4e264db52549</Anchor>
    <Abstract>Returns 0 if the input is 0, -1 if the input is negative or 1 if the input argument is positive...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga181f59f1188049529a16a2cf5f508501</Anchor>
    <Abstract>Returns the input argument converted from MIDI note numbers to frequency (in Hz).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga3bbc54f534126badd26fbd42d57a1c82</Anchor>
    <Abstract>Returns the input argument converted from frequency (in Hz) to MIDI note numbers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gaecb823fdaad20c335c43527670afd1d7</Anchor>
    <Abstract>Returns the input argument converted from linear amplitude to decibels where 0dB is an amplitude of 1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga0a730e2e046bf1e584745ce86d4e834b</Anchor>
    <Abstract>Returns the input argument converted from decibels to linear amplitude where 0dB is an amplitude of 1...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga549ae4182588d64654a5f948c20017b6</Anchor>
    <Abstract>Returns the input argument converted from degrees to radians.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga7a02abc6cfbf80e5dd88f306ac5f2efc</Anchor>
    <Abstract>Returns the input argument converted from radians to degrees.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>ga988f86caa5764c14dd3d8612bd87d4f8</Anchor>
    <Abstract>Returns the input argument distorted.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>group___plonk_unary_op_functions.html</Path>
    <Anchor>gae8df018eed382aa92946ec1320864aa5</Anchor>
    <Abstract>Returns the input argument with infinities, NaNs and denormallised numbers removed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkModules</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_modules.html</Path>
    <Abstract>Plonk modules....</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkFundamentals</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_fundamentals.html</Path>
    <Abstract>Plonk fundamentals...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkUnitCategogies</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_unit_categogies.html</Path>
    <Abstract>Plonk units...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkContainerClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_container_classes.html</Path>
    <Abstract>Other Plonk container classes...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkOtherUserClasses</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_other_user_classes.html</Path>
    <Abstract>Other Plonk user classes...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkOtherUserFunctions</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_other_user_functions.html</Path>
    <Abstract>Other Plonk user functions...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkExtras</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_extras.html</Path>
    <Abstract>Plonk extra topics...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlonkCoreConcepts</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___plonk_core_concepts.html</Path>
    <Abstract>An outline of the core concepts used in Plonk.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>GeneratorUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___generator_units.html</Path>
    <Abstract>A list of all oscillator unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___filter_units.html</Path>
    <Abstract>A list of all filtering unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NoiseUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___noise_units.html</Path>
    <Abstract>A list of all noise/random-based unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___f_f_t_units.html</Path>
    <Abstract>Alist of FFT related UGens.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MathsUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___maths_units.html</Path>
    <Abstract>A list of all mathematical operator type unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnvelopeUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___envelope_units.html</Path>
    <Abstract>A list of all envelope type unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DelayUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Abstract>A list of all delay-based unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombLPFP1</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga3c05fa3e91b5971010a9bc5ec049312c</Anchor>
    <Abstract>A comb filter with a one-pole low-pass filter in the feedback loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombLPF</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga08d4f111a94ff880f375bef56b6e7b91</Anchor>
    <Abstract>A comb filter with a Butterworth low-pass filter in the feedback loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombHPFP1</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga360fee63dd6e4690e5706e4b01c52e78</Anchor>
    <Abstract>A comb filter with a one-pole high-pass filter in the feedback loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombHPF</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___delay_units.html</Path>
    <Anchor>ga9c454891d960c13bcea3a8f94c3cb00c</Anchor>
    <Abstract>A comb filter with a Butterworth high-pass filter in the feedback loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ControlUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___control_units.html</Path>
    <Abstract>A list of all control units classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SoundFileUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___sound_file_units.html</Path>
    <Abstract>A list of all soundfile-based unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConverterUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___converter_units.html</Path>
    <Abstract>A list of all converter unit classes and their brief descriptions.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ResampleLinear</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>group___converter_units.html</Path>
    <Anchor>ga11b096c5634678adfdf8fca02b1d30f2</Anchor>
    <Abstract>Resampler.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MiscUnits</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>group___misc_units.html</Path>
    <Abstract>A list of other various units.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AllpassDecayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AllpassDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_decay_unit.html</Path>
    <Abstract>An allpass delay setting the decay as a time to decay by 60dB.</Abstract>
    <DeclaredIn>plonk_DelayFormAllpassDecay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AllpassDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_decay_unit.html</Path>
    <Anchor>a65f97adc2d1d7e235f036337bdec7902</Anchor>
    <Abstract>Create an audio rate allpass delay.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AllpassFFFBUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AllpassFFFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_f_f_f_b_unit.html</Path>
    <Abstract>An allpass delay setting the feedforward and feeback coefficient directly.</Abstract>
    <DeclaredIn>plonk_DelayFormAllpassFFFB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AllpassFFFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_allpass_f_f_f_b_unit.html</Path>
    <Anchor>ab1dd6b0615dd91686bd65d63f4d4a42a</Anchor>
    <Abstract>Create an audio rate allpass delay.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArrayAllocator</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ArrayAllocator</Scope>
    </TokenIdentifier>
    <Path>class_array_allocator.html</Path>
    <Abstract>Default array de/allocation.</Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArrayAllocator&lt; Type * &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ArrayAllocator&lt; Type * &gt;</Scope>
    </TokenIdentifier>
    <Path>class_array_allocator_3_01_type_01_5_01_4.html</Path>
    <Abstract>Pointer array de/allocation.</Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ArrayAllocatorBuiltIn</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ArrayAllocatorBuiltIn</Scope>
    </TokenIdentifier>
    <Path>class_array_allocator_built_in.html</Path>
    <Abstract>Built-in numerical types array de/allocation.</Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicExtended</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicExtended</Scope>
    </TokenIdentifier>
    <Path>class_atomic_extended.html</Path>
    <Abstract>Enables atomic operations on a pointer with additional security.</Abstract>
    <DeclaredIn>plonk_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicOps</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AtomicOps</Scope>
    </TokenIdentifier>
    <Path>class_atomic_ops.html</Path>
    <Abstract>Type-independent atomic operations.</Abstract>
    <DeclaredIn>plonk_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicValue</Scope>
    </TokenIdentifier>
    <Path>class_atomic_value.html</Path>
    <Abstract>Enables atomic operations on a range of types.</Abstract>
    <DeclaredIn>plonk_Atomic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicVariableChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Abstract>Atomic variable channel.</Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Anchor>ae5d8233ceb9c921e5410531f3256129c</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Anchor>a3abb1e2656fbe211fe51d6d0a7e76768</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AtomicVariableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_channel_internal.html</Path>
    <Anchor>abe3308ee16f52608b094e86b6a39f9a5</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AtomicVariableUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AtomicVariableUnit</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_unit.html</Path>
    <Abstract>Atomic variable unit.</Abstract>
    <DeclaredIn>plonk_AtomicVariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AtomicVariableUnit</Scope>
    </TokenIdentifier>
    <Path>class_atomic_variable_unit.html</Path>
    <Anchor>a166ad3b50f39b033ae5328c710e8efc7</Anchor>
    <Abstract>Create control rate variable.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AudioFile</Scope>
    </TokenIdentifier>
    <Path>class_audio_file.html</Path>
    <Abstract>Some audio file common constants.</Abstract>
    <DeclaredIn>plonk_AudioFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Abstract>Audio file reader.</Abstract>
    <DeclaredIn>plonk_AudioFileReader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a91c6f09f07144b27a3c471cac221fef4</Anchor>
    <Abstract>Creates a null object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>acd5197ab6a5633d282b00ee8ca115cce</Anchor>
    <Abstract>Creates an audio file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a4fae789f74cde1fb142e1877b2f0ea7f</Anchor>
    <Abstract>Creates an audio file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a71e8caa99af2787fc0e671402db48743</Anchor>
    <Abstract>Creates an audio file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a7622c2ced52f8fd17f8d4579f2b97eee</Anchor>
    <Abstract>Creates an audio file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>aca8ca71c557c90e669e0911086bb8121</Anchor>
    <Abstract>Creates an audio file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>ab37320834aaca236233b02069a1614c6</Anchor>
    <Abstract>Creates a multiple audio file reader from the given paths.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a6a877c22ed952368897e76197d4024e8</Anchor>
    <Abstract>Creates a multiple audio file reader from the given paths.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileReader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a8e00d73442c7b991373949eefe477425</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a7afa4ad6506034a5a46fa4b56f82dcfa</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFormat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a68627dab5b0935371d9814566355d9c8</Anchor>
    <Abstract>Get the format of the audio file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEncoding</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a4ceb52cd6af2bdecb0e0e5883d4764c1</Anchor>
    <Abstract>Get the encoding of the audio file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>adcf5aa9fe567380a55298507b7932b10</Anchor>
    <Abstract>Get the sample type of the audio file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBitsPerSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>afff578970ab52d7f1c1cdf09bd345ccd</Anchor>
    <Abstract>Get the number of bits used per sample in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBytesPerFrame</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a68677a87177469263d6b9cd3eb13afd8</Anchor>
    <Abstract>Get the number of bytes in each frame of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBytesPerSample</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a5ddb2029f35c32ae347400722fd96054</Anchor>
    <Abstract>Get the number of bytes in each sample of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a1138597bbc2940255a7d96e95e2c678c</Anchor>
    <Abstract>Get the number of channels in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setDefaultNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>af8cdfd849d15bc87440f0d9781f0e124</Anchor>
    <Abstract>Set the default number of channels in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDefaultNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a1716262222e157859e72e8f7a08769bb</Anchor>
    <Abstract>Get the default number of channels in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a5300866a9cc6a471f14e712e935d884e</Anchor>
    <Abstract>Get the sample rate of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>aac2eb6f5ef24db049e57a0246909d301</Anchor>
    <Abstract>Get the total number of frames in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFramePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a3649b5a09dfcec70f371ec42742ef61b</Anchor>
    <Abstract>Get the current frame position.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFramePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>af5c6e2327251c9698b62308ea34358af</Anchor>
    <Abstract>Set the frame position to a particular frame.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setFramePositionOnNextRead</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a939f4996bb813f9f4152056820297f6c</Anchor>
    <Abstract>Set the frame position to a particular frame just before the next read operation.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resetFramePosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>af578e0ff6a4847b0b22640ef2ae92890</Anchor>
    <Abstract>Resets the frame position back to the start of the frames.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>ab1623fe5139a94e9a0ba2ca8ba44675e</Anchor>
    <Abstract>Read frames into a pre-allocated NumericalArray and apply scaling.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readFramesDirect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a140fbbccb13569984b997355850ef012</Anchor>
    <Abstract>Read frames into a pre-allocated NumericalArray without scaling.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a52960d082b7065850b3bbc1ccc12b7c0</Anchor>
    <Abstract>Initialises a Signal object in the appropriate format for the audio in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a6e1323184695ecfb5037095e2bcd9df7</Anchor>
    <Abstract>Read frames into a pre-allocated Signal object and apply scaling.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readSignalDirect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a7ca098839bbf0e3faeaa99a923d6c69c</Anchor>
    <Abstract>Read frames into a pre-allocated Signal object without scaling.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readAllFrames</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a637f0571dad789053ce27c34f15b560f</Anchor>
    <Abstract>Reads all the frames in the file and returns them in an interleaved array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator NumericalArray&lt; SampleType &gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>abf56fb8289381f145c25416f8bcc7668</Anchor>
    <Abstract>Reads all the frames in the file and returns them in an interleaved array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator SignalBase&lt; SampleType &gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>ab1a712b784b24e83fd5630ce16e3437e</Anchor>
    <Abstract>Reads all the frames in the file and returns them in Signal object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOtherSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a00200d3a16d0fa133813ea3155da2237</Anchor>
    <Abstract>Reads all the frames in the file and returns them in Signal object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSignal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a3c7594f805fe65648eb79dfb73aa59c2</Anchor>
    <Abstract>Reads all the frames in the file and returns them in Signal object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isReady</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a39512009b122fa46eb1eb50375f4eb6b</Anchor>
    <Abstract>Determines whether the audio data is ready to be read.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>AudioFileReader</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_reader.html</Path>
    <Anchor>a979c7c92bd446e70e9f7af0df76d748f</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioFileWriter</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AudioFileWriter</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_writer.html</Path>
    <Abstract>Audio file writing class.</Abstract>
    <DeclaredIn>plonk_AudioFileWriter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileWriter</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_writer.html</Path>
    <Anchor>a07532b15dc3498a88a9ae40d158f29c1</Anchor>
    <Abstract>Get the number of channels in the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioFileWriter</Scope>
    </TokenIdentifier>
    <Path>class_audio_file_writer.html</Path>
    <Anchor>a51d2819bb24c17760977b96d00c6d41e</Anchor>
    <Abstract>Get the sample rate of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioHostBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Abstract>An abstract class to interface with audio devices.</Abstract>
    <DeclaredIn>plonk_AudioHostBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AudioHostBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a9d258693a850ff3916ff2a800dd1d99e</Anchor>
    <Abstract>Constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~AudioHostBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>abec35a069c21d0a696213484a3f32817</Anchor>
    <Abstract>Destructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a40d9b4f4dec08d3ac35dc7409aad02ed</Anchor>
    <Abstract>Determine whether the audio device is running.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIsPaused</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a732d9b03561470ac9364f5f8c9b3f553</Anchor>
    <Abstract>Determine whether the audio device is paused.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputUnit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a02d334e10b9c4d0d3d178a4f22f2bf82</Anchor>
    <Abstract>Get a reference to the output unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a2a91a9dce214bddabc6033daaae43782</Anchor>
    <Abstract>Get the number of audio inputs.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a242c4cc90d94494041bfab0510936ca4</Anchor>
    <Abstract>Get the number of audio outputs.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredHostSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ad6ceb35480c9b9d4deba35f5dab776cc</Anchor>
    <Abstract>Get the current preferred sample rate for the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredHostBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aea4e832ce14bd48f9526f24d8c69aeba</Anchor>
    <Abstract>Get the current preferred block size for the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredHostSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ac583ac2d2c440ac46cac5421b5e4c16c</Anchor>
    <Abstract>Set the host&amp;#39;s preferred sample rate.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredHostBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a620b1c602c4ec0b776c91513bcf69acd</Anchor>
    <Abstract>Set the host&amp;#39;s preferred block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPreferredGraphBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a7c8307fd6ea243cb3615dbcfd9c6a607</Anchor>
    <Abstract>Get the current preferred block size for the graph.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPreferredGraphBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a2cbc668367944f7c092dcaa96aadd81f</Anchor>
    <Abstract>Set the graph&amp;#39;s preferred block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a97e22b16e99cf8c2b3c3223441e9ceea</Anchor>
    <Abstract>Set the number of audio inputs required.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNumOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a3b86efabd19949082d704f54aa1362db</Anchor>
    <Abstract>Set the number of audio inputs required.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOtherOptions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a5233dc06e3164004226e8ff61f4ab6eb</Anchor>
    <Abstract>Get other (normally platform dependent) options.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a15e756329a09c014416ce31ac269ebf6</Anchor>
    <Abstract>Get the input buffers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a22beb9feb80398040b4f4090889fcfc3</Anchor>
    <Abstract>Get the input buffers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a86bc339bff7f68e2618226e83621ca3a</Anchor>
    <Abstract>Get the output buffers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a6b507e6562d32184e54a4f0cff083a4d</Anchor>
    <Abstract>Get the output buffers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHostName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a4d5cf02b8df0d3934449b527b0072317</Anchor>
    <Abstract>Get the name of the audio host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNativeHostName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a9f3d7131d5e3b466319783f4362eefa4</Anchor>
    <Abstract>Get the name of the native host audio API.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ab79046689f535c13ef7e4317d36ab266</Anchor>
    <Abstract>Get the name of the audio input device.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>ad46ac3e85653530dead5e504c1f73984</Anchor>
    <Abstract>Get the name of the audio output device.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCpuUsage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a958e9e5a8a1c7dc5b9eed9c5094d8e61</Anchor>
    <Abstract>Get the current CPU usage for the DSP loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a21d2959b9d731a3b226682f1fb87af87</Anchor>
    <Abstract>Start the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a461a85d786386a56216fc80057b4f657</Anchor>
    <Abstract>Stop the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>constructGraph</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>aecd49bc3c60a304a69cf2476b47035ba</Anchor>
    <Abstract>This must be implemented by your application.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setIsRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>AudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_audio_host_base.html</Path>
    <Anchor>a5e008f5ddbf41e45e5cceb055521e698</Anchor>
    <Abstract>Set a flag to indicate the audio host is running.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Base64</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Base64</Scope>
    </TokenIdentifier>
    <Path>class_base64.html</Path>
    <Abstract>Base64 encoding and decoding.</Abstract>
    <DeclaredIn>plonk_Base64.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Abstract>A utility class for reading and writing binary files.</Abstract>
    <DeclaredIn>plonk_BinaryFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a3d0f10cc9ccdc8bb5d6cb648096fc5a7</Anchor>
    <Abstract>Creates a null object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ac4e67ed5965986db1c77111f1b2c5bf8</Anchor>
    <Abstract>Creates a binary file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ad7465018287eaaf34b05ce15141ea4f6</Anchor>
    <Abstract>Creates a binary file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a8e61b1ff78693bd03ebbc87653ebc017</Anchor>
    <Abstract>Creates a binary file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a204a9c30fc73cd3ff69c5883f75fa581</Anchor>
    <Abstract>Creates a binary file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>aa899e81a61130cc67514c0ff03788f2b</Anchor>
    <Abstract>Memory stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a95a7e2c729b3080cfa03a8ae94a7c53e</Anchor>
    <Abstract>Creates a multiple binary file reader from the array of files.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ae44cc94b641221314da2c157c4293c61</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>aafe776f527c875a94f4172dc2e2b458a</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a36fae2aecda26143ed6bd04346f3eef7</Anchor>
    <Abstract>Gets the position of the file stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a6e1149fe6d5d17341c981a53bde320a1</Anchor>
    <Abstract>Sets the position of the file stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>aec74973dc081b0e904e161cef0860af1</Anchor>
    <Abstract>Sets the position of the file stream to the end of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ad4d69bef12e39c8a8a4ba30856d7a395</Anchor>
    <Abstract>Determines if the file stream is positioned at its end.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a153e39a0a8eba7898910e7b249c46ac8</Anchor>
    <Abstract>Reads a numerical value from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>aca6a19b0a436c0361b42791da522fabf</Anchor>
    <Abstract>Reads a value or array from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>a8470cddb92f785bcde9845ef78735f41</Anchor>
    <Abstract>Write a numerical value to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ae343de37e61e0a652e39ace0ccdfd5b7</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>chunkID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BinaryFile</Scope>
    </TokenIdentifier>
    <Path>class_binary_file.html</Path>
    <Anchor>ae0dc1dd415db7429c7eeaf8040d4c2e9</Anchor>
    <Abstract>Creates a chunk name identifier.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BinaryOpChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Abstract>For applying binary operators.</Abstract>
    <DeclaredIn>plonk_BinaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Anchor>a2f9034200615d396daa33c4977d83c8c</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Anchor>a6cce05045798b04331cdaa3f08dcfb42</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BinaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_binary_op_channel_internal.html</Path>
    <Anchor>a57c1d145616f0f8c9498268e5c9bfd6b</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Bits</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Bits</Scope>
    </TokenIdentifier>
    <Path>class_bits.html</Path>
    <Abstract>Some useful bitwise functions.</Abstract>
    <DeclaredIn>plonk_InlineMiscOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Abstract>Block channel.</Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Anchor>a5b9e94072bcc238f4e50d75fdf72ae30</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Anchor>ac173d940de43107905bb0aeff6930abe</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_block_channel_internal.html</Path>
    <Anchor>abf22cc3fd3d27970ed7803a11dfed26a</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Abstract>A specialised Variable&amp;lt;int&amp;gt; for handling block sizes.</Abstract>
    <DeclaredIn>plonk_BlockSize.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a3267344c93ac784230c999d152425200</Anchor>
    <Abstract>To catch a potential programming error.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a2c7c7a4a9f8585b2cc414a392126dbf8</Anchor>
    <Abstract>Create BlockSize with an int.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>aeadcdd13e4f698280b8578823abcda5a</Anchor>
    <Abstract>Create BlockSize from an IntVariable.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a422cfa94141bf1c527ab73e48dad8a08</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a38a8b440dbc0e857af8b3ec993ccc7e6</Anchor>
    <Abstract>Create a block size converting from another type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>ac022f97ed4f42a64936fdc0f3479c1cb</Anchor>
    <Abstract>Gets the default block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getControlRateBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a0b63924e21af360f0e44fdaccb56c14d</Anchor>
    <Abstract>Gets the default control rate block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getFractionOfDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a692b89b56a9004c70c1aeaf8f6cb1d09</Anchor>
    <Abstract>Create a block size that is a fraction of the default block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMultipleOfDefault</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a5130faee8cc5b8862d39ecfecca4c16c</Anchor>
    <Abstract>Create a block size that is a multiple of the default block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>noPreference</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>aa6ada18e533ad70d58aae4e0549fab84</Anchor>
    <Abstract>A dummy block size used to indicate no preference.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlockSize1</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>a908f1f70af4835dfe259c9f914c563b9</Anchor>
    <Abstract>Get a block size of 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decide</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockSize</Scope>
    </TokenIdentifier>
    <Path>class_block_size.html</Path>
    <Anchor>afcc989dcc540a3d62f67d939f16c6457</Anchor>
    <Abstract>Select a block size based on a unit&amp;#39;s preference and its inputs.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BlockUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BlockUnit</Scope>
    </TokenIdentifier>
    <Path>class_block_unit.html</Path>
    <Abstract>Copies data from a buffer to an output block.</Abstract>
    <DeclaredIn>plonk_BlockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockUnit</Scope>
    </TokenIdentifier>
    <Path>class_block_unit.html</Path>
    <Anchor>a1586e4455c2dcec6c70a0f3d1bf8e2e0</Anchor>
    <Abstract>Create an audio rate block generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BlockUnit</Scope>
    </TokenIdentifier>
    <Path>class_block_unit.html</Path>
    <Anchor>add4451655e57fac19a2b98b61bc89e6b</Anchor>
    <Abstract>Create an audio rate block generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_p_f_unit.html</Path>
    <Abstract>Bandpass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_p_f_unit.html</Path>
    <Anchor>aa9881bc69068cfe59bc0aec661421b30</Anchor>
    <Abstract>Create a bandpass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_p_f_unit.html</Path>
    <Anchor>a49fedf3fbbc053c0919ab236fd0b8595</Anchor>
    <Abstract>Create a control rate bandpass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BRFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BRFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_r_f_unit.html</Path>
    <Abstract>Bandreject (band-elimination) filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BRFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_r_f_unit.html</Path>
    <Anchor>a8f789818837d410554d4082c28721d48</Anchor>
    <Abstract>Create a bandreject filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BRFUnit</Scope>
    </TokenIdentifier>
    <Path>class_b_r_f_unit.html</Path>
    <Anchor>a4749f3495aaedba740fb7b0203bee6e9</Anchor>
    <Abstract>Create a control rate bandreject filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusBuffer</Scope>
    </TokenIdentifier>
    <Path>class_bus_buffer.html</Path>
    <Abstract>Enables the storage of globally accessible buffers to be used as signal busses.</Abstract>
    <DeclaredIn>plonk_Bus.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusBuffer</Scope>
    </TokenIdentifier>
    <Path>class_bus_buffer.html</Path>
    <Anchor>ae76e0dd292d0dab294b509c530ac357c</Anchor>
    <Abstract>Write data with a given time stampe start to the bus.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>read</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusBuffer</Scope>
    </TokenIdentifier>
    <Path>class_bus_buffer.html</Path>
    <Anchor>aedba0840daab8295fcabd4b70fda1452</Anchor>
    <Abstract>Read data from the bus with a given time stamp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusReadChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Abstract>Bus read channel.</Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Anchor>a990c0b6bb67c8664f55500ba3017d6d1</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Anchor>a06b46ab936746b57462da282f3811db9</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_channel_internal.html</Path>
    <Anchor>ac0135a69cf7a7a58c3706e9a0b763fa6</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusReadUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_unit.html</Path>
    <Abstract>Reads data from a Bus.</Abstract>
    <DeclaredIn>plonk_BusReadChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BusReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_read_unit.html</Path>
    <Anchor>a1f0fc076f32146c9f9b00da54c14c465</Anchor>
    <Abstract>Create an audio rate bus reader.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusWriteChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Abstract>Bus write channel.</Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Anchor>afb5c216f8bb181dc0dea1be98f1a8518</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Anchor>a3a0dd5b4948a52fe1f637bfa3057f3da</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>BusWriteChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_channel_internal.html</Path>
    <Anchor>a995c1ece3dcd7eba56085ae0a31162c8</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusWriteUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>BusWriteUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_unit.html</Path>
    <Abstract>Write data to a Bus.</Abstract>
    <DeclaredIn>plonk_BusWriteChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>BusWriteUnit</Scope>
    </TokenIdentifier>
    <Path>class_bus_write_unit.html</Path>
    <Anchor>ac827ead7040479156130903742389edf</Anchor>
    <Abstract>Create an audio rate bus writer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Abstract>A single output signal.</Abstract>
    <DeclaredIn>plonk_Channel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>ab7eaf4e3fd5527c073278b4dbe4c0452</Anchor>
    <Abstract>Default constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a3151beffa0f9c901b9100666bbd1e188</Anchor>
    <Abstract>Construct a channel with a specific internal type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>abfc0bb2780501eb7a012884802cda4e8</Anchor>
    <Abstract>Get the first channel from a one-channel unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a63e01bb026eb3d73601851b1094a0e28</Anchor>
    <Abstract>Get the first channel from a one-channel unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>ae498bfacd7faa18b3f1a451ab08bcdc0</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>ac591b46c587bf555ef73fcac2219d347</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a04602ede01be492e75ca5e9f6f0bd6a0</Anchor>
    <Abstract>Construct a channel that generates a constant.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsToProcess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a9b2815328e92bb1947ca2e6c5da88bca</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ChannelBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_base.html</Path>
    <Anchor>a6696996610312a7c53805056ec79de50</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelData</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelData</Scope>
    </TokenIdentifier>
    <Path>struct_channel_data.html</Path>
    <Abstract>Base class for channel state data.</Abstract>
    <DeclaredIn>plonk_ChannelData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal.html</Path>
    <Abstract>The base class from which most ChannelInternals should be derived.</Abstract>
    <DeclaredIn>plonk_ChannelInternal.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelInternalBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelInternalBase</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_base.html</Path>
    <Abstract>The templated base class for all internal channel processes.</Abstract>
    <DeclaredIn>plonk_ChannelInternalBase.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelInternalCore</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Abstract>The base, core class for all internal channel processes.</Abstract>
    <DeclaredIn>plonk_ChannelInternalCore.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a09763233582f6f0985461449aa262ae5</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>a0d5725cc71173dcff25b08f992acf1ea</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelInternalCore</Scope>
    </TokenIdentifier>
    <Path>class_channel_internal_core.html</Path>
    <Anchor>aa4e59e6ac19208c22de024fe2bda39bc</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChannelMixerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Abstract>Mix all channels in a single unit to a single channel.</Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Anchor>a0b4582c80f049e243c71a00118dfee6c</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Anchor>ae99695dbb26b26113faad0e9fe25f63a</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ChannelMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_channel_mixer_channel_internal.html</Path>
    <Anchor>af388639c73905f4d9fd47ed34adce022</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombDecayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>CombDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_decay_unit.html</Path>
    <Abstract>A comb filter setting the decay as a time to decay by 60dB.</Abstract>
    <DeclaredIn>plonk_DelayFormCombDecay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>CombDecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_decay_unit.html</Path>
    <Anchor>a7d336ba7359cbde4c1b713f59d791353</Anchor>
    <Abstract>Create an audio rate comb filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombFBUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>CombFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_f_b_unit.html</Path>
    <Abstract>A comb filter setting the feedback amount directly.</Abstract>
    <DeclaredIn>plonk_DelayFormCombFB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>CombFBUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_f_b_unit.html</Path>
    <Anchor>ac43e14cc10dbbdd46010838047fe9416</Anchor>
    <Abstract>Create an audio rate comb filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CombFilter1ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>CombFilter1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_filter1_param_unit.html</Path>
    <Abstract>A comb filter with a filter in the feedback loop (where the filter takes one parameter).</Abstract>
    <DeclaredIn>plonk_DelayFormCombFilter1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>CombFilter1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_comb_filter1_param_unit.html</Path>
    <Anchor>a13ca4487e2afd20310e6f054a0182040</Anchor>
    <Abstract>Create an audio rate comb filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstantChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Abstract>For generating constants.</Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a10b34ea6bbbab9ef0b2676ab7f367b2c</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a98c447d3ffd4b8fd813c985198d3a439</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ConstantChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_constant_channel_internal.html</Path>
    <Anchor>a68fdcf89e1ded9b6e7dfdded85f87c3d</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DCUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DCUnit</Scope>
    </TokenIdentifier>
    <Path>class_d_c_unit.html</Path>
    <Abstract>DC removal filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DCUnit</Scope>
    </TokenIdentifier>
    <Path>class_d_c_unit.html</Path>
    <Anchor>ab7b98dfe81f1d30ce3827f0a441834f5</Anchor>
    <Abstract>Creates a DC removal filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DCUnit</Scope>
    </TokenIdentifier>
    <Path>class_d_c_unit.html</Path>
    <Anchor>a44e2010392342d6c57159b2fd42c6d42</Anchor>
    <Abstract>Creates a control rate exponential deacy filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DecayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_decay_unit.html</Path>
    <Abstract>Exponential decay filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_decay_unit.html</Path>
    <Anchor>aa126e11ab1f77171e7bb08356f786b86</Anchor>
    <Abstract>Creates an exponential deacy filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>DecayUnit</Scope>
    </TokenIdentifier>
    <Path>class_decay_unit.html</Path>
    <Anchor>a7b427dc25f25e20b10b6cb836cd6c0f7</Anchor>
    <Abstract>Creates a control rate exponential deacy filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay1ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay1_param_channel_internal.html</Path>
    <Abstract>Delay processor.</Abstract>
    <DeclaredIn>plonk_Delay1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Delay1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay1_param_channel_internal.html</Path>
    <Anchor>a79cf9dfe4119c3be9ed25da4428e7d26</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay1_param_channel_internal.html</Path>
    <Anchor>a148aa72d26ce671b838dfe33a955e965</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay2ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay2_param_channel_internal.html</Path>
    <Abstract>Delay processor with two control parameters.</Abstract>
    <DeclaredIn>plonk_Delay2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Delay2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay2_param_channel_internal.html</Path>
    <Anchor>a4e409d7b684f0cd39c00f762b446c6cc</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay2_param_channel_internal.html</Path>
    <Anchor>ae7e44939064036c3d9bb413681b6763f</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay3ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay3_param_channel_internal.html</Path>
    <Abstract>Delay processor with two control parameters.</Abstract>
    <DeclaredIn>plonk_Delay3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Delay3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay3_param_channel_internal.html</Path>
    <Anchor>a0600d8d71d5c5b96bcbf61c1e76dbe02</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay3_param_channel_internal.html</Path>
    <Anchor>a602b099bb2576a3da4ddf45f372cb792</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Delay4ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Delay4ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay4_param_channel_internal.html</Path>
    <Abstract>Delay processor with two control parameters.</Abstract>
    <DeclaredIn>plonk_Delay4Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>Delay4ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay4_param_channel_internal.html</Path>
    <Anchor>ab9d7d7e571fe4cf0efa0f497797a0a68</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Delay4ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_delay4_param_channel_internal.html</Path>
    <Anchor>ae8a01ec0fcbc8ebaa90bd1e66cc79827</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DelayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>DelayUnit</Scope>
    </TokenIdentifier>
    <Path>class_delay_unit.html</Path>
    <Abstract>Simple delay processor.</Abstract>
    <DeclaredIn>plonk_DelayFormDelay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Abstract>A dictionary class for storing key/value pairs.</Abstract>
    <DeclaredIn>plonk_Collections.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a1d86bdbd4c09c1f8df5ad17162bb6ada</Anchor>
    <Abstract>Creates an empty dictionary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>afc6c389dfa64984c8afb22d67fc0c538</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Dictionary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ab31d318b9c8288cfe441035b6136839b</Anchor>
    <Abstract>Creates a dictionary initialise with an array of key/value pairs.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValues</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a2b7ad3dfd1e62023c5fc063e9f31802f</Anchor>
    <Abstract>Returns the array of values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getKeys</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a83ed3edd33080fbc502ea7da5e0047a3</Anchor>
    <Abstract>Returns the array of keys.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPairs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a0bb89703d9eecc0b0fe2d596daeab015</Anchor>
    <Abstract>Returns an array of the key/value pairs.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a6ee81b793caf6c652e9d6545ce848a13</Anchor>
    <Abstract>Put an item into the dicionary associated with the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a83c2739092b4a8d164b5c8d5575801d2</Anchor>
    <Abstract>Return a value at the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a9d093afdbe6f6b7cdceadfae562c7e8d</Anchor>
    <Abstract>Return a value at the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a41988ece0789b19039c7367a2abb3e72</Anchor>
    <Abstract>Return a value at the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a873f52238cab2d0bcc35595d18081797</Anchor>
    <Abstract>Return a value at the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>aee8b8fb99e32739a8c9f55a81c6ca01b</Anchor>
    <Abstract>Remove and return an item at the specified key.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>keyForValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ac15f5b7945d4fc918e098015f11c0136</Anchor>
    <Abstract>Return the key for a particular value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a17ce658ebb6fe914bb044e60a3c5ae6d</Anchor>
    <Abstract>Get a key at a particular index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>ae92215cec3ad9533f2aa85d761504945</Anchor>
    <Abstract>Get a value at a particular index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a0f61cc9a425100dd854816641258cc8a</Anchor>
    <Abstract>Get a key at a particular index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>af1abde84ed749710596e8130a2c75bd9</Anchor>
    <Abstract>Get a value at a particular index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a4af4232a588a2777343008309a2d1faf</Anchor>
    <Abstract>Get the number of items stored in the dictionary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a63c0c7e86f5935ea9ae4dce27be28355</Anchor>
    <Abstract>Get the number of items stored in the dictionary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Dictionary</Scope>
    </TokenIdentifier>
    <Path>class_dictionary.html</Path>
    <Anchor>a57cd3afaeee69cab52b38b1a34e9da5c</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Endian</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Endian</Scope>
    </TokenIdentifier>
    <Path>class_endian.html</Path>
    <Abstract>A utility class to swap the endianness (byte-order) of one or more data elements.</Abstract>
    <DeclaredIn>plonk_Endian.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EndianIfBig</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>EndianIfBig</Scope>
    </TokenIdentifier>
    <Path>class_endian_if_big.html</Path>
    <Abstract>A utility class to swap the endianness (byte-order) of one or more data elements.</Abstract>
    <DeclaredIn>plonk_Endian.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EndianIfLittle</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>EndianIfLittle</Scope>
    </TokenIdentifier>
    <Path>class_endian_if_little.html</Path>
    <Abstract>A utility class to swap the endianness (byte-order) of one or more data elements.</Abstract>
    <DeclaredIn>plonk_Endian.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnvelopeChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Abstract>Envelope channel performs a series of breakpoints.</Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Anchor>aeab184f7e86603b3f2eff437873020ae</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Anchor>ad79d5809d5b16e0d15e166b602e35e17</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>EnvelopeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_envelope_channel_internal.html</Path>
    <Anchor>acc94f0a2e16c48876d583e6df0ee4ec2</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EnvelopeUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>EnvelopeUnit</Scope>
    </TokenIdentifier>
    <Path>class_envelope_unit.html</Path>
    <Abstract>Envelope unit performs a series of breakpoints.</Abstract>
    <DeclaredIn>plonk_EnvelopeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>EnvelopeUnit</Scope>
    </TokenIdentifier>
    <Path>class_envelope_unit.html</Path>
    <Anchor>a6d9ba57b2c959d64b1bff74992c6876d</Anchor>
    <Abstract>Create an audio rate envelope generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>EnvelopeUnit</Scope>
    </TokenIdentifier>
    <Path>class_envelope_unit.html</Path>
    <Anchor>ad419ad7942ca9f5837db3fb477e006b1</Anchor>
    <Abstract>Create a control rate envelope generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Abstract>FFT channel.</Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Anchor>ad940c21a65e1c23499c85d65b06004b0</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Anchor>af77c5e3abe973f0be23d554dd4a71969</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_channel_internal.html</Path>
    <Anchor>a83d2bde9a0ebd89885ef3620e6a93bb3</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTEngineBase&lt; float &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Abstract>A platform independent FFT processing engine.</Abstract>
    <DeclaredIn>plonk_FFTEngine.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTEngineBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a0c3245666f4f363fa753018bd987322c</Anchor>
    <Abstract>Create a new engine with a particular FFT size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTEngineBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>abe943aa0fd5fa019897aadc91329204a</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a02536062e3b3cb35bdac478ca41b371d</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>forward</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a4ea96a42335717feed5544f6d413569f</Anchor>
    <Abstract>Apply the FFT to the input and place the result in output.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>forward</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>aa760d13d6644bc2c53f1e769697a9f4a</Anchor>
    <Abstract>Apply the FFT to the input and place the result in output.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inverse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>aed54f69cdcdd65d88e72557e35064659</Anchor>
    <Abstract>Apply the inverse-FFT to the input and place the result in output.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inverse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>ad72dae431c8f9e11573f854687d39bd0</Anchor>
    <Abstract>Apply the inverse-FFT to the input and place the result in output.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>abd3017f50fdf2da99acfc7f25588c5aa</Anchor>
    <Abstract>Get the FFT size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>halfLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FFTEngineBase&lt; float &gt;</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_engine_base_3_01float_01_4.html</Path>
    <Anchor>a59c534d2e6030892dfb1a94bea72d919</Anchor>
    <Abstract>Get half FFT size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FFTUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FFTUnit</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_unit.html</Path>
    <Abstract>FFT Unit.</Abstract>
    <DeclaredIn>plonk_FFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FFTUnit</Scope>
    </TokenIdentifier>
    <Path>class_f_f_t_unit.html</Path>
    <Anchor>ab7707d07e6434ab87d3503089a3f6b82</Anchor>
    <Abstract>FFTs a signal.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePath</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>FilePath</Scope>
    </TokenIdentifier>
    <Path>class_file_path.html</Path>
    <Abstract>File path construction, manipulation and operations.</Abstract>
    <DeclaredIn>plonk_FilePath.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePlayChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Abstract>File player generator.</Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Anchor>ab3dc67683c87583f67d4ad670b80bf0a</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Anchor>a53551e4b108ffeb88e61f9281569cab4</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilePlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_file_play_channel_internal.html</Path>
    <Anchor>ab1d1d37c0726d40c302375652b5a886d</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePlayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilePlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_file_play_unit.html</Path>
    <Abstract>Audio file player generator.</Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilePlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_file_play_unit.html</Path>
    <Anchor>adbcc2cf5c59a0835569e15a6fe5f17a1</Anchor>
    <Abstract>Create an audio rate audio file player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilePlayUnit::Simple</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>FilePlayUnit::Simple</Scope>
    </TokenIdentifier>
    <Path>class_file_play_unit_1_1_simple.html</Path>
    <Abstract>A simple file player to handle buffering and sample rate conversion.</Abstract>
    <DeclaredIn>plonk_FilePlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Abstract>A generic FIR/IIR filter.</Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Anchor>a68f9eccee714950f6b0895c1ed78a93e</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Anchor>a51b642d49069ae930c19e904a79a7a9d</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_channel_internal.html</Path>
    <Anchor>a4b6fe26ac0fd78e6de7e3da18831a2cd</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs1ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Abstract>Filter coefficient generator from one control parameter.</Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Anchor>a97beddea01d8fe833ef6b9fd310d1bb5</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Anchor>aada67ea502eed0f355657d66b38a290c</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs1ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_channel_internal.html</Path>
    <Anchor>a159799bb8c59e4b439f5b24eae122672</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs1ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_unit.html</Path>
    <Abstract>Filter coefficients generator for an IIR filter using one control parameter.</Abstract>
    <DeclaredIn>plonk_FilterCoeffs1Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterCoeffs1ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs1_param_unit.html</Path>
    <Anchor>ad340003b900e2ef01237b10540a2a801</Anchor>
    <Abstract>Filter coefficients from one control parameter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs2ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Abstract>Filter coefficient generator from two control parameters.</Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Anchor>afdcd6b09cc690ecf84e255dbf195ec10</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Anchor>aea0fefbb1d8a3c469a2b150d160107d4</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs2ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_channel_internal.html</Path>
    <Anchor>a09fd0c9704560ec6c42eca0d3c68a9ac</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs2ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs2ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_unit.html</Path>
    <Abstract>Filter coefficients generator for an IIR filter using two control parameters.</Abstract>
    <DeclaredIn>plonk_FilterCoeffs2Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterCoeffs2ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs2_param_unit.html</Path>
    <Anchor>aa75b81ca3db4692037c20261c6418784</Anchor>
    <Abstract>Filter coefficients from two control parameters.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs3ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Abstract>Filter coefficient generator from two control parameters.</Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Anchor>aaa86364bb16d79668b2782c60bf333de</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Anchor>a87970ef615ae4f5b8b6ae06166742735</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FilterCoeffs3ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_channel_internal.html</Path>
    <Anchor>af2c3ddfed9f9c8ff522ea4f0309c90ba</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterCoeffs3ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterCoeffs3ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_unit.html</Path>
    <Abstract>Filter coefficients generator for an IIR filter using three control parameters.</Abstract>
    <DeclaredIn>plonk_FilterCoeffs3Param.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterCoeffs3ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_coeffs3_param_unit.html</Path>
    <Anchor>af89ce8a11b2c098aa7896117e2eb7812</Anchor>
    <Abstract>Filter coefficients from three control parameters.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::B2 &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::B2 &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_b2_01_4.html</Path>
    <Abstract>Butterworth 2nd order form.</Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1 &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1 &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1_01_4.html</Path>
    <Abstract>One-pole form.</Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1a &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1a &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1a_01_4.html</Path>
    <Abstract>One-pole form, special simplified case for low pass.</Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P1b &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P1b &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p1b_01_4.html</Path>
    <Abstract>One-pole form, special simplified case for DC removal.</Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterForm&lt; SampleType, FilterFormType::P2Z2 &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterForm&lt; SampleType, FilterFormType::P2Z2 &gt;</Scope>
    </TokenIdentifier>
    <Path>class_filter_form_3_01_sample_type_00_01_filter_form_type_1_1_p2_z2_01_4.html</Path>
    <Abstract>Two-pole, two-zero form.</Abstract>
    <DeclaredIn>plonk_FilterForms.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeBPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeBPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_b_p_f_base.html</Path>
    <Abstract>Two-pole, two-zero, band-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeBRFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeBRFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_b_r_f_base.html</Path>
    <Abstract>Two-pole, two-zero, band-reject filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeDecayBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeDecayBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_decay_base.html</Path>
    <Abstract>One-pole decay shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeHighShelfBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeHighShelfBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_high_shelf_base.html</Path>
    <Abstract>Two-pole, two-zero, high-shelving filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeHPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeHPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_h_p_f_base.html</Path>
    <Abstract>Butterworth 2nd order high-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeHPFP1Base</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeHPFP1Base</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_h_p_f_p1_base.html</Path>
    <Abstract>One-pole high-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLagBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLagBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_lag_base.html</Path>
    <Abstract>One-pole lag shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLowShelfBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLowShelfBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_low_shelf_base.html</Path>
    <Abstract>Two-pole, two-zero, low-shelving filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_l_p_f_base.html</Path>
    <Abstract>Butterworth 2nd order low-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesB.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeLPFP1Base</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeLPFP1Base</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_l_p_f_p1_base.html</Path>
    <Abstract>One-pole low-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesSimple.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeNotchBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeNotchBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_notch_base.html</Path>
    <Abstract>Two-pole, two-zero, notch EQ filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeRHPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeRHPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_r_h_p_f_base.html</Path>
    <Abstract>Two-pole, two-zero, resonant high-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterShapeRLPFBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterShapeRLPFBase</Scope>
    </TokenIdentifier>
    <Path>class_filter_shape_r_l_p_f_base.html</Path>
    <Abstract>Two-pole, two-zero, resonant low-pass filter shape.</Abstract>
    <DeclaredIn>plonk_FilterShapesP2Z2.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FilterUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>FilterUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_unit.html</Path>
    <Abstract>A generic FIR/IIR filter.</Abstract>
    <DeclaredIn>plonk_Filter.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>FilterUnit</Scope>
    </TokenIdentifier>
    <Path>class_filter_unit.html</Path>
    <Anchor>a3c77ba97cddc51d0ef8cb62848d0ddd7</Anchor>
    <Abstract>Create a generic filter from the coefficients.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fix</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Fix</Scope>
    </TokenIdentifier>
    <Path>class_fix.html</Path>
    <Abstract>A generic fixed point numerical class.</Abstract>
    <DeclaredIn>plonk_Fix.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HarmonicSawUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HarmonicSawUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_saw_unit.html</Path>
    <Abstract>Harmonic sawtooth wave oscillator.</Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSawUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_saw_unit.html</Path>
    <Anchor>a219fc58728192ee0c91275a6cb9e9707</Anchor>
    <Abstract>Create an audio rate harmonic sawtooth oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSawUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_saw_unit.html</Path>
    <Anchor>ad7d4bdd281699619b76bdadfcb5d6582</Anchor>
    <Abstract>Create a control rate harmonic sawtooth oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HarmonicSquareUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HarmonicSquareUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_square_unit.html</Path>
    <Abstract>Harmonic square wave oscillator.</Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSquareUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_square_unit.html</Path>
    <Anchor>abdf9409fa8958b1bed53e08387131a5e</Anchor>
    <Abstract>Create an audio rate harmonic square wave oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicSquareUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_square_unit.html</Path>
    <Anchor>a5fe0c0c4671d095c0cac7e273fbf47ec</Anchor>
    <Abstract>Create a control rate harmonic square wave oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HarmonicTriUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HarmonicTriUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_tri_unit.html</Path>
    <Abstract>Harmonic triangle wave oscillator.</Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicTriUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_tri_unit.html</Path>
    <Anchor>ac556ff9735fee3d49698ff6ac188f31b</Anchor>
    <Abstract>Create an audio rate harmonic triangle wave oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HarmonicTriUnit</Scope>
    </TokenIdentifier>
    <Path>class_harmonic_tri_unit.html</Path>
    <Anchor>a1576449cdd604163d3250a7ff3268e81</Anchor>
    <Abstract>Create a control rate harmonic triangle wave oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HighShelfUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HighShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_high_shelf_unit.html</Path>
    <Abstract>High-shelving (treble) filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HighShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_high_shelf_unit.html</Path>
    <Anchor>a023ca460b028b1eb37d00ba6dad02cc2</Anchor>
    <Abstract>Create a high-shelving filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HighShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_high_shelf_unit.html</Path>
    <Anchor>a76007a1caaefa175688abf198bfa2b28</Anchor>
    <Abstract>Create a control rate high-shelving filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HPFP1Unit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_p1_unit.html</Path>
    <Abstract>One-pole high-pass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_p1_unit.html</Path>
    <Anchor>afbc10d5508f3e966d51056afe5558eb9</Anchor>
    <Abstract>Create a one-pole high-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_p1_unit.html</Path>
    <Anchor>aec057b7a4341f9de22aa49ffd2fec4f9</Anchor>
    <Abstract>Create a control rate one-pole high-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>HPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_unit.html</Path>
    <Abstract>Butterworth 2nd-order high-pass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_unit.html</Path>
    <Anchor>a5b3f8ba6a66f310b98f890526a4e4e45</Anchor>
    <Abstract>Create a simple Butterworth 2nd-order high-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>HPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_h_p_f_unit.html</Path>
    <Anchor>aa49588487c9e2590475ca6ed7688ada8</Anchor>
    <Abstract>Create a simple control rate Butterworth 2nd-order high-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IFFTChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Abstract>IFFT channel.</Abstract>
    <DeclaredIn>plonk_IFFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Anchor>a25495b2117d6052901dba417a5e0591a</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Anchor>a5f2d55e7faff589f8d347768498c1275</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>IFFTChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_channel_internal.html</Path>
    <Anchor>a1c13244fb3866511d3be24422d28b553</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IFFTUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>IFFTUnit</Scope>
    </TokenIdentifier>
    <Path>class_i_f_f_t_unit.html</Path>
    <Abstract>IFFT Unit.</Abstract>
    <DeclaredIn>plonk_IFFTChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImpulseChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Abstract>Impulse generator.</Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Anchor>aae997360033034d2231a41405e32ab6f</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Anchor>abb40e3c00eb14cafc6f17ad06164fe04</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ImpulseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_impulse_channel_internal.html</Path>
    <Anchor>a5c0c95a84db6b4b4a948bce690e30ec3</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImpulseUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ImpulseUnit</Scope>
    </TokenIdentifier>
    <Path>class_impulse_unit.html</Path>
    <Abstract>An impulse generator.</Abstract>
    <DeclaredIn>plonk_Impulses.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ImpulseUnit</Scope>
    </TokenIdentifier>
    <Path>class_impulse_unit.html</Path>
    <Anchor>a5c7ba37dda0e16e65c78fef22e96b917</Anchor>
    <Abstract>Create an audio rate impulse oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ImpulseUnit</Scope>
    </TokenIdentifier>
    <Path>class_impulse_unit.html</Path>
    <Anchor>ad3a3b2cc50ad80d373d4b4a84066f783</Anchor>
    <Abstract>Create a control rate impulse oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputDictionary</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Abstract>For storing named Dynamic objects.</Abstract>
    <DeclaredIn>plonk_InputDictionary.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputDictionary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>aa9195863f264f8f6862e80477c03ea83</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>acbb83df5e4fa32283a471aaf591ae550</Anchor>
    <Abstract>Find the minimum Unit block size in this dictionary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>a1c246911ba287f20fb7128eedadb0566</Anchor>
    <Abstract>Find the maximum Unit block size in this dictionary.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>a2f1736b42993b530ae0000070506f520</Anchor>
    <Abstract>Returns this dictionary with all the units containing only a single channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputDictionary</Scope>
    </TokenIdentifier>
    <Path>class_input_dictionary.html</Path>
    <Anchor>aa21b83d48d840409efb41c7c6c551bb4</Anchor>
    <Abstract>Find the maximum number of channels in this dictionary (i.e., in unit, units and busses).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputTaskChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Abstract>Defer a unit&amp;#39;s processing to a separate task, thread, process or core.</Abstract>
    <DeclaredIn>plonk_TaskChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Anchor>ab85461c4107a7ab258fc002a6011393a</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Anchor>a1a11c0b4ea2a4825e762578f22aa1607</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>InputTaskChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_input_task_channel_internal.html</Path>
    <Anchor>a18f21154bc65945c3b0845f8236f453e</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>InputTaskUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>InputTaskUnit</Scope>
    </TokenIdentifier>
    <Path>class_input_task_unit.html</Path>
    <Abstract>Defer a unit&amp;#39;s processing to a separate task, thread, process or core.</Abstract>
    <DeclaredIn>plonk_TaskChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Int24</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Int24</Scope>
    </TokenIdentifier>
    <Path>class_int24.html</Path>
    <Abstract>An emulated 24-bit integer type.</Abstract>
    <DeclaredIn>plonk_Int24.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LagUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LagUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_unit.html</Path>
    <Abstract>Exponential lag filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LagUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_unit.html</Path>
    <Anchor>a56644135d9bf9335a3845b04d8686e45</Anchor>
    <Abstract>Creates an exponential lag filter (one-pole low-pass filter).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LagUnit</Scope>
    </TokenIdentifier>
    <Path>class_lag_unit.html</Path>
    <Anchor>a86c6e0ff3332e320d299f489e3670832</Anchor>
    <Abstract>Creates a control rate exponential lag filter (one-pole low-pass filter).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LinearPanChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Abstract>For linear panning across 2 channels.</Abstract>
    <DeclaredIn>plonk_LinearPanChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Anchor>ace1427779587e1d8b0fef72026ae6612</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Anchor>af14fc76c8ae4f04f08ebf9b44ad2327e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LinearPanChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_channel_internal.html</Path>
    <Anchor>a811e07244c845d18609030292dfea398</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LinearPanUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LinearPanUnit</Scope>
    </TokenIdentifier>
    <Path>class_linear_pan_unit.html</Path>
    <Abstract>A linear panning unit.</Abstract>
    <DeclaredIn>plonk_LinearPanChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LockedValue</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LockedValue</Scope>
    </TokenIdentifier>
    <Path>class_locked_value.html</Path>
    <Abstract>A class that stores a value that is stored and retieved using a lock.</Abstract>
    <DeclaredIn>plonk_Lock.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LookupChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Abstract>Wavetable lookup generator.</Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Anchor>aa43ea2468bc4a25c37e2e34254fb0d6e</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Anchor>ae6618fec9e15761742dfd93b4ee15db7</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>LookupChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_lookup_channel_internal.html</Path>
    <Anchor>a4493aef0c4620dae0046195976505673</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LookupUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LookupUnit</Scope>
    </TokenIdentifier>
    <Path>class_lookup_unit.html</Path>
    <Abstract>Wavetable lookup generator.</Abstract>
    <DeclaredIn>plonk_Lookup.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LookupUnit</Scope>
    </TokenIdentifier>
    <Path>class_lookup_unit.html</Path>
    <Anchor>a3c4bbe0bf913238c2b143d377ea96b43</Anchor>
    <Abstract>Create an audio rate signal player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LookupUnit</Scope>
    </TokenIdentifier>
    <Path>class_lookup_unit.html</Path>
    <Anchor>a73e3fcfd63b98a1aac6cd2566605df23</Anchor>
    <Abstract>Create a control rate signal player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LowShelfUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LowShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_low_shelf_unit.html</Path>
    <Abstract>Low-shelving (bass) filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LowShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_low_shelf_unit.html</Path>
    <Anchor>ab76033b4e3e79ba397b163f49f951ea0</Anchor>
    <Abstract>Create a low-shelving filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LowShelfUnit</Scope>
    </TokenIdentifier>
    <Path>class_low_shelf_unit.html</Path>
    <Anchor>a8abaa708d322cf710dd9b5158177378d</Anchor>
    <Abstract>Create a control rate low-shelving filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LPFP1Unit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_p1_unit.html</Path>
    <Abstract>One-pole low-pass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_p1_unit.html</Path>
    <Anchor>a5f564eb64188ae26e9bb4becaaf4e789</Anchor>
    <Abstract>Create a one-pole low-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFP1Unit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_p1_unit.html</Path>
    <Anchor>a7a672ed7daefc43579140af8091b1c3f</Anchor>
    <Abstract>Create control rate a one-pole low-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>LPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_unit.html</Path>
    <Abstract>Butterworth 2nd-order low-pass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_unit.html</Path>
    <Anchor>ab68f9c65805da1f60b4491c1e7c9443c</Anchor>
    <Abstract>Create a simple Butterworth 2nd-order low-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>LPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_l_p_f_unit.html</Path>
    <Anchor>a4567ee2529e67739617c2f0a76290f1e</Anchor>
    <Abstract>Create a simple control rate Butterworth 2nd-order low-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Math</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Math</Scope>
    </TokenIdentifier>
    <Path>class_math.html</Path>
    <Abstract>Some useful maths constants.</Abstract>
    <DeclaredIn>plonk_Constants.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MixerUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Abstract>Mixer.</Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Anchor>ac6358840aff51693d2061dcab5f72c07</Anchor>
    <Abstract>Create an audio rate channel mixer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Anchor>a9a3e9346d5ed3cf4844a40052c8f8d3a</Anchor>
    <Abstract>Create an audio rate unit mixer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>MixerUnit</Scope>
    </TokenIdentifier>
    <Path>class_mixer_unit.html</Path>
    <Anchor>a415f72cec6230bd0e6ef971441abcd05</Anchor>
    <Abstract>Create an audio rate unit queue mixer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MulAddChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Abstract>For applying mul and add in one go.</Abstract>
    <DeclaredIn>plonk_MulAddChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Anchor>a0260ce1e91dbc838bb60e56e678840d3</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Anchor>a912e28a2954a604835e8a9a155e821a8</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>MulAddChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_mul_add_channel_internal.html</Path>
    <Anchor>a1643fb9deb7f4430ac611d665a04fc88</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NotchUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>NotchUnit</Scope>
    </TokenIdentifier>
    <Path>class_notch_unit.html</Path>
    <Abstract>Notch filter (i.e, parametric mid-EQ).</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NotchUnit</Scope>
    </TokenIdentifier>
    <Path>class_notch_unit.html</Path>
    <Anchor>ab53abe7abb0bdb64c2aa23b0ec4a2a14</Anchor>
    <Abstract>Create a notch filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NotchUnit</Scope>
    </TokenIdentifier>
    <Path>class_notch_unit.html</Path>
    <Anchor>a9561f93ddf666186f4c13e2d9afbcb13</Anchor>
    <Abstract>Create a control rate notch filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NullChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>NullChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_null_channel_internal.html</Path>
    <Abstract>For generating 0 (null) specifically.</Abstract>
    <DeclaredIn>plonk_ConstantChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Abstract>Stores arrays of simple numerical values.</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONKSMARTPOINTERCONTAINER_DEEPCOPY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df538b5c22eefca40bbda399509e4c8</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a02c72c741f2c441273b5acfd8a4e59f3</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>af5db4734cc12532869206ac97312d669</Anchor>
    <Abstract>Construct a NumericalArray by copying a NumericalArray of a different type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8252e40234e6de0cb678bcb0f751dc57</Anchor>
    <Abstract>Construct a NumericalArray by copying a ObjectArray of a different type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0a725c439fea0bf8682236cc41072dfd</Anchor>
    <Abstract>Concatenate two arrays into one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArrayConcatOperatorsDefine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3cc8f8828424cf547cc8e4e284022f42</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a6526ef4710bf9cb3828653bd09a2323a</Anchor>
    <Abstract>Constructa a NumericalArray using a NumericalArraySpec with optional null termination.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a27ecf9517575656716efd64c2421f5d5</Anchor>
    <Abstract>Construct a NumericalArray from a null terminated source array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a26e3c74cc542c2b8d7ac003f7a8eedb3</Anchor>
    <Abstract>Construct an array with a single value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a306d520264cb4b5c66d3b16251a71054</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad5d8e1ee2c8d69ab21b94ad128192166</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9f2e59c28125b653a83d5c8ab931599c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a90db16858a3b1dbb976979430e5543b5</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a356babb8b97bb29881d48dc787772c5f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5bb66b3a1675330f3087f67266f9ac94</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right arg...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a813a9576f0468fe664b02c66b90d2450</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a53bad8f0d0422f1ed9437dbb911464be</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a3d2a4e2d6fa0b5965fb5d84c205f0db4</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and ...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a644afd9717ab76340c0f915689f4f350</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right ar...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a04b5dbe93deecbd9e5257c3e6fa0c607</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4a08880fa508503f996c3d8952ea7501</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>af0bb54b04842a35e81976e2f6b6d82ff</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>afac331e91cda571cb73da2613af97f4a</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aba2bd98816ddd02910bfb1db4ed2e10f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adde618f6e225867b22c16acedac4740b</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a70834d522831e39b19e514066a65f987</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab4551ebdeff0ae5b54490b108b912699</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2940eaa8ba181697048db60993d501eb</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab4e73c2285c197d84a4d838d83295b1d</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab3ebc44ba574d43e2cf8875b58c3e01e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a858cb28ab8aadad2ff3d2fc774d5ea16</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a41d296be83ecd5ad4a9ea7e64f312f9e</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;round&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4c57310a906aa04911b383b256af6803</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aeb843a616edd6e638e5b214adb00ecf0</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argumen...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1f7c138355300c6d84bb2691f7954b56</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab2c3cd209a45e1b670b61ab688abb98d</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aaeee79e90f0d874200d045d1d427f2ae</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab5a0fafd62fd3546b8f1a8345bed9535</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a01c0a21a52bfe83a047cb09397525859</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8203149701de08e12fe106b33c694f4c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;%&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4b37469cc22d3f28106d076456ee9c80</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8515b94e7c84d82308ac43f3b6d49ed4</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;lt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8a7af44d54e4dd5fefddb8cd44ee2201</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8d8948b9ea015297464628c4d5e5f7ad</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;gt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac73002a959b7fbdb0e1bf49150e00ac7</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad8c78788dec82a15c338319174e891c2</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8368368153fe158df9e918bc6ba80022</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4290f465e129c3acb29872229f31ea26</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0261713de1d1e07e996a7d7005a6fc7f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;%&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2cbf65a8a44ec8fbe2afab55cd39418b</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a5538284563eac6f5682d50976ea9119f</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1a43141b93f7a8e24d777acb30ca115c</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aeab50549403525ae68bf3eea47869601</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac4dba057b185b8c562feb79bab8cc6d5</Anchor>
    <Abstract>Create a new NumericalArray and assign it to this one by applying the binary &amp;#39;%&amp;#39; operator to this and...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0fc984fa1bddcb904611f9c4c8ac355c</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a66f4fe62052817c7a7452d4d8129c40f</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;lt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8d0c7dc1faa2bb93bc3cb9eade40d7eb</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1aedf3452546d858bc38253ee95b6904</Anchor>
    <Abstract>Create a new NumericalArray by applying the binary &amp;#39;&amp;gt;=&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a874ca968256c98cd3832c186c46b3982</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;move&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ac99a652927b8588c19e3b0fb58ced052</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;inc&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abd0ffdbf49fa2d8ee67110d58ace23d0</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dec&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>adb5da433d91966c11849e4e3ae09b20c</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;abs&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a070b5d8792fba8be0e49aa67d466c7c5</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log2&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a55de58ebf08c5847b883fc490d08b9d4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;neg&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aab34a0718dfa0dd4ae5fdbc2c1c00773</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;reciprocal&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a8c6a229a1ca6aa62ce2f16a7cddc81c7</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sin&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad8e91af12a57e6579d4fa944f0720bce</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cos&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a012a46fa5971b4e4d453fd3134adcc6e</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tan&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a78dc93f9d6203a2dc52f6b710cc53770</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;asin&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a21247673f17dbb118748c1ef5868715d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;acos&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a958f1721d9c62493ec9cdb82a8656938</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;atan&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a93eff4090af911add420281e8825debc</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sinh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae9dd56f3652efbbbaabe347ec9225f27</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cosh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a279cbc086c73080ae0ee9f341cd6934f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;tanh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a99590a6747640c9adf4ecd0dab889507</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sqrt&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aaac2483594423eca542b918f3868bafa</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae46ae0e874297a5ef8a29ba9ee1d6732</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;log10&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa97d16057f07d6400ac15f31497d34c2</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;exp&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a10c88d42c1a68c2cf019ba599ce39386</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;squared&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aba1b45c75b8a8e1a06708efd02c43464</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;cubed&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa42dd31de7f243533ffb84f5310ee5a7</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;ceil&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a363a91ba97804be5c8217596807ccf5f</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;floor&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9d212e39edd96f22493fb173f6a6d320</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;frac&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2c97c407bb1d944e3c357c7ff22eb91d</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;sign&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a0eaa8e96782b6afb620ad4bcd09b5bd1</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;m2f&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2b2452f6193c054cea33ce3a8162a085</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;f2m&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a4b1aba374f09890145c23e48ac790aca</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;a2dB&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2be3c3ede1f2261a224c4da48e364b6e</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;dB2a&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a03bea6ba00183782f52b7c244292e678</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;d2r&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a60278e868bb7668d86217f640d113920</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;r2d&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a36bfa91e815e5f2a4e81d6a8a05a89a8</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;distort&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa803bf54847396f2a846f435676ab117</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;zap&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a403fa7e62e11b0315fcf1d573a6c86b4</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;-&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a986e8764af5b9a7803e5809d0056860e</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a663556967b53694216b24b3af7544956</Anchor>
    <Abstract>Create a new NumericalArray by applying the unary &amp;#39;++&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a2916344f07e5860c87819dbcf735cb58</Anchor>
    <Abstract>Gets the index of a particular item.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a63e7070c30b5df16f1fef55cd8647c15</Anchor>
    <Abstract>Search for a particular sub sequence withing the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a101ace1e49b4d50bc0f7c42be825ab2d</Anchor>
    <Abstract>Search for any items in a given array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ada7cd40ff1de921243a1ba6d0a73fe5d</Anchor>
    <Abstract>Construct a NumericalArray that refers to some other data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>newClear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a35333c3e01ef69f3a2915165c2d3ab83</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with all items set to zero.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>line</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aee42d54db01e66d26ee8128183dd0136</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) ramping from one value to another.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>series</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a59b2257afb948d77ebb88255ef6e6167</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a series.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>geom</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a30a41a8d2f38fa905f05b339d8e0f9a0</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) using a geometric series.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ab98a6073517a23189d9f8ca7c64b1cef</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad18e1508241e68329259301ed990f219</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rand2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9249a9785c5168e6cd4a55aa4aa29c4b</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) randomly distributed.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exprand</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a91f325eeff8bd44e9774cf92b1bb438e</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with an exponential random distribution.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sineTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>aa474beef987896c1d5122828b433a958</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more sine tables.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineTable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>abd89c7757fc3ea124480f8f47de2bbfc</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine tables...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosineWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ae89ecb5b770c242fd6ed6393a8401bf5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more cosine windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>triangleWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>acff98717b87ea00fdba7713044462f05</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more triangle windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>bartlettWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9df36fe372f06cf5b404a397f2046b46</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Bartlett windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hannWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1862a2a70951192dd5692a943ffea2ac</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more von Hann (Hanning) windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hammingWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a9afba9977eb1067502609fb8d5820766</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Hamming windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>blackmanWindow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a86956d5e17e4f1f98aab634ee4b4a8e5</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) containing one or more Blackman windows...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>a1304973429a775ba7ab1bf7eb32e138a</Anchor>
    <Abstract>Creates an array by copying data from another source.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withArrayNoCopy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>NumericalArray</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array.html</Path>
    <Anchor>ad64074f04aec194d590476cce27c0b64</Anchor>
    <Abstract>Creates an array by using data from another source.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalArraySpec</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NumericalArraySpec</Scope>
    </TokenIdentifier>
    <Path>class_numerical_array_spec.html</Path>
    <Abstract>For specificying the initial state of a NumericalArray.</Abstract>
    <DeclaredIn>plonk_NumericalArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NumericalConverter</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>NumericalConverter</Scope>
    </TokenIdentifier>
    <Path>class_numerical_converter.html</Path>
    <Abstract>For rounding values from float/double to int types.</Abstract>
    <DeclaredIn>plonk_InlineMiscOps.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Abstract>This is the base class for arrays.</Abstract>
    <DeclaredIn>plonk_ObjectArray.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>af8b9946ea130d57e18ff368333548c39</Anchor>
    <Abstract>Creates an empty array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f088cd226ecae84f2df495bf0947ec7</Anchor>
    <Abstract>Creates an array with a particular size/length.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae99f2e9c3d2b031f419d5a3a4a17381b</Anchor>
    <Abstract>Wraps an existing array in an ObjectArray.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aae33c9bcdc3ef21d766fbb8d830c4efa</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6e8493adbcc71c1592875360bffaa6a7</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a23de99964aaf6f9d04b5ef5749a58573</Anchor>
    <Abstract>Create a copy of another array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>copy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a03baa6c06a77a576a05e1898b9ccd19f</Anchor>
    <Abstract>Creates a deep copy of the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab95b6ffd0f27b905554a17973137af9f</Anchor>
    <Abstract>Create an array with a single item.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aaadbed847983fc8fb2a46a9ce29ffb53</Anchor>
    <Abstract>Concatenate two arrays into one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a33721e5dd4e7ed9374073ca2b8b6f750</Anchor>
    <Abstract>Sets a new size for the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a52897352b31285832d485a62a3eaac5c</Anchor>
    <Abstract>Sets the length of the array to zero.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a53983ca686506e7f8c87b77175b148fb</Anchor>
    <Abstract>Size is the actual number of elements of storage needed for the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sizeAllocated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>acef05cc6ee40be483f69f6ed3decf081</Anchor>
    <Abstract>This is the memory allocated to the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>length</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6eb3d6ad48798a021d3dc9f23e9c5260</Anchor>
    <Abstract>Length is the number of real elements of storage available.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>memorySize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aac4165f9dc652efc4c638a520e4cf25f</Anchor>
    <Abstract>Actual memory requirements of the array elements and the null terminator (if needed).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a49f3b9719cdeefc07c0ac52f1735d93d</Anchor>
    <Abstract>Returns a pointer to the raw array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getArray</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>adf43b8f7395f9fbc7c904c307059659f</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const ObjectType *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a90ee6bf251ed77fdcaa93297df0f49f8</Anchor>
    <Abstract>Returns a pointer to the raw array for read-only ops.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator ObjectType *</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6ebbb4b5256faa36e370352ed53e6e7f</Anchor>
    <Abstract>Returns a pointer to the raw array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNullTerminated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ab5013b564df8b9f768b3ab7a799c31af</Anchor>
    <Abstract>Returns whether this is a null terminated array or not.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setNullTerminated</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a18008cf93344763c2c5309a2c5053246</Anchor>
    <Abstract>Changes this array&amp;#39;s null terminator flag.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>referTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae2236515507f1cfe0f9e44ecb63dabd4</Anchor>
    <Abstract>Force the internal array to refer to other data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>aa15b17d07062a81fa7fbc0fb275d18af</Anchor>
    <Abstract>Adds an item in-place.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>add</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f0f23ab21ae6bfe9e438686ac4ae7ed</Anchor>
    <Abstract>Adds several items in-place.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6b2d22402553fb5e22ed7c2966d74de7</Anchor>
    <Abstract>Removes an item at the given index in-place.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad675f23eada53adcadda78f096b3642d</Anchor>
    <Abstract>Places an item at the given index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a64873f1b21d3888d606f555da6a2014a</Anchor>
    <Abstract>Returns a reference to an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a0bc80ee77d245f592d75f480293937b6</Anchor>
    <Abstract>Returns a reference to an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a01dda59cdcbad97e572fae969ec7e992</Anchor>
    <Abstract>Returns a reference to an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a525a2021265a54a85212893f650f7deb</Anchor>
    <Abstract>Returns a reference to an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>at</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad0ddd1b46e1b7ae32dd0e232ebcece5f</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3027a6cfd4eef94f604a7d446c244cfc</Anchor>
    <Abstract>Returns a new array by iterating through an array of indices provided.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9ec04e1862ebea9767bbbf45a169792d</Anchor>
    <Abstract>Returns a reference to an itemn at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atUnchecked</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7b01a9b2e82501caa5bb01c7626d5232</Anchor>
    <Abstract>Returns a refernce to an itemn at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7f8923e3ea4e9737e04a0b35100db841</Anchor>
    <Abstract>Returns a reference to an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wrapAt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad4aaf1341f5ababca4afcc0830a7da1e</Anchor>
    <Abstract>Returns a reference to an item at the specified index.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a05befffe91bfd0e853230bc5df784f65</Anchor>
    <Abstract>Returns the first item in the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>first</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a7ce377d14442501a8fc34fc012a0c6ab</Anchor>
    <Abstract>Returns the first item in the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a29533c8074caba9a86dc7a2482b759f6</Anchor>
    <Abstract>Returns the last item in the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>last</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a5f76add3056a6a7d62c7ca46ae442fde</Anchor>
    <Abstract>Returns the last item in the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad605ca1eed55acef9ac9d10fc03a54e4</Anchor>
    <Abstract>Returns an item from the array chosen at random.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>choose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc4b30484f09212831b2de869ae9f9d7</Anchor>
    <Abstract>Returns an item from the array chosen at random.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a6a31fdbb9c69ec92cf4ebe5916ccbba0</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wchoose</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a99b0248ecc196629fab2f6ba3984b1d4</Anchor>
    <Abstract>Returns an item from the array using a weighted random choice.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>areAllEqual</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a76434f8adfca2a2241c39ad67dfa7566</Anchor>
    <Abstract>Determine if each item in the array is equal to the others.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3476b7debbb42f1277d7df5b0d591396</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a19bf576e39e283a2af2cb60d8726ae8b</Anchor>
    <Abstract>Compares whether the contents of two arrays are the same.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a768e3730d2076b1d5eade90b0593397e</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a2424be9a3c5826f508b73e007dfe5b0a</Anchor>
    <Abstract>Compares whether the contents of two arrays are the different.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad87075a49fe1cea5bcdaf54f15873c4e</Anchor>
    <Abstract>Returns whether the array contains a particular item.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4f36d45789d499b691b59fb59294e1b3</Anchor>
    <Abstract>Returns whether the array contains one or more other items.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ad2065d1c59f281fb17c78cce33f62b41</Anchor>
    <Abstract>Gets the index of a particular item.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOf</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a48849d83a5c0c3e9f4968c8faab347da</Anchor>
    <Abstract>Search for a particular sub sequence withing the array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>indexOfAny</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3766d14cdfac35751119147622f35322</Anchor>
    <Abstract>Search for any items in a given array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>from</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a9efe2797629ae5f5ac32f4ff57212b04</Anchor>
    <Abstract>Return a new array which is a subarray of this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4d6c495b62d477184230022511cee67a</Anchor>
    <Abstract>Return a new array which is a subarray of this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>to</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae0a86661df85c2aaf0954b236ed3fa50</Anchor>
    <Abstract>Return a new array which is a subarray of this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>range</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae735443d708a74182544016f89523de2</Anchor>
    <Abstract>Return a new array which is a subarray of this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a596d19434b80e819291091dd81a9c4b4</Anchor>
    <Abstract>Perform a find and replace on the array and return the result.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a691f1805e81bbe042bcc07d84d7eb8e0</Anchor>
    <Abstract>Remove an item in-place.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeItems</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a4c9d17a3269ab9904a4fb2219c367b6f</Anchor>
    <Abstract>Remove several items in-place.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>group</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a88aeed1b448dddd7a668400b51f014cf</Anchor>
    <Abstract>Group this array into a 2D array with a particular group size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>split</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a1b9f73b45869002f410e320c68d8c068</Anchor>
    <Abstract>Split the array into a 2D array using delimiters.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>splitSequence</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a664370848338525597ca379ce6da43de</Anchor>
    <Abstract>Split the array into a 2D array using a delimiting sequence.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deinterleave</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>ae4f769c721e3b332257513b88e8ed748</Anchor>
    <Abstract>De-interleave an array into a 2D array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>a3b26fc025b8c7874d8dd9727cc430592</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>acfdcf984b61c960961710910fcf4b64e</Anchor>
    <Abstract>Returns an array with a given size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>emptyWithAllocatedSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>afc0c8de5e14b9b5257f072c26fe7a5b5</Anchor>
    <Abstract>Returns an empty array with a given size of allocated storage.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>collect</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ObjectArray</Scope>
    </TokenIdentifier>
    <Path>class_object_array.html</Path>
    <Anchor>abd760cd8df87fe7470d4ac9c34a39cdf</Anchor>
    <Abstract>Collect a new array based on the contents of another array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ObjectMemoryBase</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ObjectMemoryBase</Scope>
    </TokenIdentifier>
    <Path>class_object_memory_base.html</Path>
    <Abstract>Manage a custom memory allocation system.</Abstract>
    <DeclaredIn>plonk_Memory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ObjectMemoryBase</Scope>
    </TokenIdentifier>
    <Path>class_object_memory_base.html</Path>
    <Anchor>ae64795a840be11636927a027e0270f0d</Anchor>
    <Abstract>Must implement, normally this starts a background thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMakeChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Abstract>Output overlapped block.</Abstract>
    <DeclaredIn>plonk_OverlapMakeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Anchor>a508d250a38e16e0d577a4aa417d23f00</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Anchor>ab8913b5fe465c107eb3f624aba21a403</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMakeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_channel_internal.html</Path>
    <Anchor>aeeff839dfd20ee67f9624c693c4953ff</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMakeUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMakeUnit</Scope>
    </TokenIdentifier>
    <Path>class_overlap_make_unit.html</Path>
    <Abstract>Create and overlapped processing stream.</Abstract>
    <DeclaredIn>plonk_OverlapMakeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMixChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Abstract>Output overlapped block.</Abstract>
    <DeclaredIn>plonk_OverlapMixChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Anchor>ac80af0889052bd254c763385d67c52f8</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Anchor>af4ff163dce14f074114ccd7117024d6e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>OverlapMixChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_channel_internal.html</Path>
    <Anchor>a6e153f1f4d0405122824bae9c0c0eca2</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OverlapMixUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>OverlapMixUnit</Scope>
    </TokenIdentifier>
    <Path>class_overlap_mix_unit.html</Path>
    <Abstract>Mix down an overlapped processing stream to a continuous one.</Abstract>
    <DeclaredIn>plonk_OverlapMixChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParamChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Abstract>Variable channel.</Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Anchor>a53b991ce9ecb24c2007c113948cd68a5</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Anchor>af7648a2ef9c84e60303236904754a508</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ParamChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_param_channel_internal.html</Path>
    <Anchor>acd602c6e2d87ef06fdb54464ee9fe08f</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ParamUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_param_unit.html</Path>
    <Abstract>Param unit.</Abstract>
    <DeclaredIn>plonk_VariableChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_param_unit.html</Path>
    <Anchor>ac343f68e8e970fab0549ca49bc1a6f24</Anchor>
    <Abstract>Create audio rate parameter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ParamUnit</Scope>
    </TokenIdentifier>
    <Path>class_param_unit.html</Path>
    <Anchor>a628bc46a451a32aaf89736941c220e77</Anchor>
    <Abstract>Create control rate parameter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PatchChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Abstract>Patch channel.</Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Anchor>ad5f5832888baf5a7f951ecf6cbcb6479</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Anchor>ad10afb19d875cc5db9f04967066f66ac</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>PatchChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_patch_channel_internal.html</Path>
    <Anchor>a7cc1ad5770449333576b1fa1cf539d18</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PatchUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PatchUnit</Scope>
    </TokenIdentifier>
    <Path>class_patch_unit.html</Path>
    <Abstract>Patch channel.</Abstract>
    <DeclaredIn>plonk_PatchChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>PatchUnit</Scope>
    </TokenIdentifier>
    <Path>class_patch_unit.html</Path>
    <Anchor>aba7614867247338e3dc88bc7a44c0a82</Anchor>
    <Abstract>Create control rate variable.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankF80</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankF80</Scope>
    </TokenIdentifier>
    <Path>struct_plank_f80.html</Path>
    <Abstract>Storage for an 80-bit extended floating-point value in big endian format.</Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankI24</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankI24</Scope>
    </TokenIdentifier>
    <Path>struct_plank_i24.html</Path>
    <Abstract>Storage for a 24-bit integer.</Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankPascalString255</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankPascalString255</Scope>
    </TokenIdentifier>
    <Path>struct_plank_pascal_string255.html</Path>
    <Abstract>Storage for a 255 character Pascal string.</Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlankUI24</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlankUI24</Scope>
    </TokenIdentifier>
    <Path>struct_plank_u_i24.html</Path>
    <Abstract>Storage for a 24-bit unsigned integer.</Abstract>
    <DeclaredIn>plank_ContainersMisc.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLAudioHost</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Abstract>An Objective-C audio host for the iOS platform.</Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a4632229b1b2bf8910f552147b4b125ce</Anchor>
    <Abstract>Start the host running.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a0340697ab1516d826ca775e70fe2cf77</Anchor>
    <Abstract>Stop the host running.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pauseHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae9cdfdda5e395619dacd125d57f9f6ce</Anchor>
    <Abstract>Pause the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>resumeHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a0ba3696e30efda50e25e1388a8bfb8cc</Anchor>
    <Abstract>Resume the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>delegate</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a1f05ecdc163b39e2737c6a3b9c3c6d21</Anchor>
    <Abstract>The delegate that contains the constructGraph method.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hostName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>af3a6a192ba27ba46a9a2a42020ef039b</Anchor>
    <Abstract>The host name - always &amp;quot;iOS&amp;quot;.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nativeHostName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae1f9428528fa57ef31ad54ec4ead601e</Anchor>
    <Abstract>The native host name - currently always &amp;quot;RemoteIO&amp;quot;.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inputName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a49667880f969d2d7a4d225f213e61d5f</Anchor>
    <Abstract>The name of the input device. May be &amp;quot;Default Input&amp;quot; on the simulator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a801abb70ea4f0e485f3d6dab29e00133</Anchor>
    <Abstract>The name of the output device. May be &amp;quot;Default Output&amp;quot; on the simulator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cpuUsage</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ac52aba0de2bc5fe5e917a27d3e146bdd</Anchor>
    <Abstract>The current CPU usage of the DSP loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRunning</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a2e2383bea16877af6d26e8e9be8b371b</Anchor>
    <Abstract>Is the host running?</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isPaused</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae15f5c4b8b6209324f1c399c935d10fe</Anchor>
    <Abstract>Is the host paused?</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wasInterrupted</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a2d3a8c487d55b19d3ef04de2f8b1cdea</Anchor>
    <Abstract>Was the host interrupted?</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>outputUnit</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a6eb8fe1b9aea5fdc9743c2a50397d0e4</Anchor>
    <Abstract>The output unit of the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numInputs</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a2d99079f809dd7669d0a818cd0fe9292</Anchor>
    <Abstract>The number of audio inputs, only set this BEFORE sending the startHost message.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numOutputs</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>ae95c772181f43c44e71a5f064f732e5e</Anchor>
    <Abstract>The number of audio outputs, only set this BEFORE sending the startHost message.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preferredHostBlockSize</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a597a74efc968d07e81fe7a0a933cadc1</Anchor>
    <Abstract>The preferred host block size, only set this BEFORE sending the startHost message.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preferredGraphBlockSize</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>adff565711c798f69e0ef7a9d6e25215c</Anchor>
    <Abstract>The preferred graph block size, only set this BEFORE sending the startHost message.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>preferredHostSampleRate</Name>
      <APILanguage>occ</APILanguage>
      <Type>instp</Type>
      <Scope>PLAudioHost</Scope>
    </TokenIdentifier>
    <Path>interface_p_l_audio_host.html</Path>
    <Anchor>a797691d1aee1e61a85f942ab16a38976</Anchor>
    <Abstract>The preferred sample rate, only set this BEFORE sending the startHost message.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLAudioHostDelegate</Name>
      <APILanguage>c</APILanguage>
      <Type>intf</Type>
      <Scope>PLAudioHostDelegate</Scope>
    </TokenIdentifier>
    <Path>protocol_p_l_audio_host_delegate-p.html</Path>
    <Abstract>A protocol for a PLAudioHost delegate.</Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PlinkBufferF</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PlinkBufferF</Scope>
    </TokenIdentifier>
    <Path>struct_plink_buffer_f.html</Path>
    <Abstract>Stores a buffer of floats.</Abstract>
    <DeclaredIn>plink_Process.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProcessInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>ProcessInfo</Scope>
    </TokenIdentifier>
    <Path>class_process_info.html</Path>
    <Abstract>Holds information about the Unit graph.</Abstract>
    <DeclaredIn>plonk_ProcessInfo.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTimeStamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ProcessInfo</Scope>
    </TokenIdentifier>
    <Path>class_process_info.html</Path>
    <Anchor>adc09432bb787204aba36f4a971bd7526</Anchor>
    <Abstract>Get the current time stamp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setTimeStamp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ProcessInfo</Scope>
    </TokenIdentifier>
    <Path>class_process_info.html</Path>
    <Anchor>a4c77916d8b6321081f6067d8ee6149a3</Anchor>
    <Abstract>Sets the current time stamp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ProxyOwnerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ProxyOwnerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_proxy_owner_channel_internal.html</Path>
    <Abstract>Where true multiple-input-multiple-output units are needed This is where all outputs depend on all in...</Abstract>
    <DeclaredIn>plonk_ProxyOwnerChannelInternal.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QueueChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Abstract>Play a queue of units.</Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Anchor>a2d189cf29401c5c241ca8e7815a65a97</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Anchor>a5e52fb9beb9631660ee1df9dc29dfee1</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_channel_internal.html</Path>
    <Anchor>a65fb950a9857c5122989d398d415f92e</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QueueMixerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Abstract>Mix a queue of units to a multichannel unit.</Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Anchor>afaeb04c453e9fca598deba8da6b811f7</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Anchor>a025b5b45d96b05fe4c139af1d411c54e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>QueueMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_queue_mixer_channel_internal.html</Path>
    <Anchor>a68a539d431e6bcf30cd5a50c9a8bcea6</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QueueUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>QueueUnit</Scope>
    </TokenIdentifier>
    <Path>class_queue_unit.html</Path>
    <Abstract>Queue unit.</Abstract>
    <DeclaredIn>plonk_QueueChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>QueueUnit</Scope>
    </TokenIdentifier>
    <Path>class_queue_unit.html</Path>
    <Anchor>ad1e2f261208594b88cfda2a5cbcff947</Anchor>
    <Abstract>Create an audio rate block generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReblockChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Abstract>Reblock.</Abstract>
    <DeclaredIn>plonk_ReblockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Anchor>a7f0c4ea85cb790898d122fadd512799e</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Anchor>a7f399f1b720f937f09a6f2b0d0adc32e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ReblockChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_reblock_channel_internal.html</Path>
    <Anchor>aaa994ae5fd92233b56e83e5ce9f7f18b</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReblockUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ReblockUnit</Scope>
    </TokenIdentifier>
    <Path>class_reblock_unit.html</Path>
    <Abstract>Re-buffer to a different block size.</Abstract>
    <DeclaredIn>plonk_ReblockChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ResampleChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Abstract>Resampler.</Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Anchor>a041197fadc701a87b6db6d159144a0ce</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Anchor>a2a182bc90151b6d4f69423c236ebca5d</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ResampleChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_resample_channel_internal.html</Path>
    <Anchor>a00bf891ff70c4d8c61191abfe1935c2a</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ResampleUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ResampleUnit</Scope>
    </TokenIdentifier>
    <Path>class_resample_unit.html</Path>
    <Abstract>Resampler.</Abstract>
    <DeclaredIn>plonk_ResampleChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ResampleUnit</Scope>
    </TokenIdentifier>
    <Path>class_resample_unit.html</Path>
    <Anchor>a1e44d840d6a2df2284399153f22db86c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RHPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>RHPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_h_p_f_unit.html</Path>
    <Abstract>Resonant high-pass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RHPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_h_p_f_unit.html</Path>
    <Anchor>a5f73cc66566357fbbae8cce7db9d8f3f</Anchor>
    <Abstract>Create a resonant high-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RHPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_h_p_f_unit.html</Path>
    <Anchor>a02062b36e8a2567b3b1574adcba74105</Anchor>
    <Abstract>Create a control rate resonant high-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RLPFUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>RLPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_l_p_f_unit.html</Path>
    <Abstract>Resonant low-pass filter.</Abstract>
    <DeclaredIn>plonk_FilterShortcuts.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RLPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_l_p_f_unit.html</Path>
    <Anchor>a4bb648a0368c953e1f57c6247e4233a6</Anchor>
    <Abstract>Create a resonant low-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RLPFUnit</Scope>
    </TokenIdentifier>
    <Path>class_r_l_p_f_unit.html</Path>
    <Anchor>aaea275203569c624284d737e209ca360</Anchor>
    <Abstract>Create a control rate resonant low-pass filter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RNG</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Abstract>Random number generator.</Abstract>
    <DeclaredIn>plonk_RNG.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>seed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aa131d14f6a74afc136ca32103adca4d7</Anchor>
    <Abstract>Seed this random number generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniformInt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aeecbdccb6e1cf814fcfb61f2ea789a67</Anchor>
    <Abstract>Generate a random integer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a6e56870f2b86b5f2c65c89bb182e452a</Anchor>
    <Abstract>Generate a uniformly distributed random integer between 0 and max-1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a8ec9105d96c21cff1cf9c98df9e383b6</Anchor>
    <Abstract>Generate a uniformly distributed random integer between min and max-1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a271c0ff3841d39e898561bb1ffd51450</Anchor>
    <Abstract>Generate a uniformly distributed random integer between 0 and max-1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aedd795e97f744c788e357388ec57c64c</Anchor>
    <Abstract>Generate a uniformly distributed random integer between min and max-1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniformFloat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a2dc3b8cc59dbdff953b7cf09434a360c</Anchor>
    <Abstract>Generate a uniformly distributed random float between 0 and 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a4f798468273cd1b1bcbb6ae56b17cd79</Anchor>
    <Abstract>Generate a uniformly distributed random float between 0 and max.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a3ad52daf4592a6a361897920f71a2ef7</Anchor>
    <Abstract>Generate a uniformly distributed random float between min and max.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniformDouble</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a9b84bf032396bd8ca213db2786d4d41c</Anchor>
    <Abstract>Generate a uniformly distributed random double between 0 and 1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a04952e6c6cc1a9b0261fff0fa85e7313</Anchor>
    <Abstract>Generate a uniformly distributed random double between 0 and max.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uniform</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a35f7bcb937a43e0c3bae77437875d6f1</Anchor>
    <Abstract>Generate a uniformly distributed random double between min and max.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exponential</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a7c587706ed3daa38b0a0c27146da1c67</Anchor>
    <Abstract>Generate a exponentially distributed random float between min and max.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exponential</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>a05bf1021e9ff83eea90b7acefa143b2a</Anchor>
    <Abstract>Generate a exponentially distributed random double between min and max.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>global</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>aa44a6fbe95ea8b66e3f7280389cf3a75</Anchor>
    <Abstract>Get the global random number generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>audio</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>RNG</Scope>
    </TokenIdentifier>
    <Path>class_r_n_g.html</Path>
    <Anchor>ac15818ab04c2f5c3299e92d4e85e6b78</Anchor>
    <Abstract>Get the audio thread random number generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Abstract>A specialised Variable&amp;lt;double&amp;gt; for handling sample rates.</Abstract>
    <DeclaredIn>plonk_SampleRate.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>aad9ead2daa5f892adbc9714d4050c35e</Anchor>
    <Abstract>To catch a potential programming error.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>a51720e5ae3c25ef2be86a9101ceed410</Anchor>
    <Abstract>Create a SampleRate from a double.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>a9002522c416be044d0ef395f46f556f5</Anchor>
    <Abstract>Create a SampleRate from a DoubleVariable.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SampleRate</Scope>
    </TokenIdentifier>
    <Path>class_sample_rate.html</Path>
    <Anchor>adcf18a11f0e4b15260a2fd7f36c6a2e2</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SawChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Abstract>Sawtooth wave generator.</Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Anchor>a5235ef70e3b410a5fc636fbd9b3e6313</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Anchor>afa02ff454704b669f313f71cf56f800e</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SawChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_saw_channel_internal.html</Path>
    <Anchor>a518b15242470c04baa97d3609fe0f4c0</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SawUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SawUnit</Scope>
    </TokenIdentifier>
    <Path>class_saw_unit.html</Path>
    <Abstract>A non-bandlimted sawtooth oscillator.</Abstract>
    <DeclaredIn>plonk_Saw.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SawUnit</Scope>
    </TokenIdentifier>
    <Path>class_saw_unit.html</Path>
    <Anchor>ac227416ad5260b17557db86b03762e5d</Anchor>
    <Abstract>Create an audio rate sawtooth oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SawUnit</Scope>
    </TokenIdentifier>
    <Path>class_saw_unit.html</Path>
    <Anchor>abe23c3c05371f372fea7606b83e02eee</Anchor>
    <Abstract>Create a control rate sawtooth oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SchmidtChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Abstract>Schmidt.</Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Anchor>a69d48594920966c54f5415af07423d72</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Anchor>a71b2d1dc1997d6997ffa5d52357e42f6</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SchmidtChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_channel_internal.html</Path>
    <Anchor>a3c29e4e3e5985788a83f98b45e609cce</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SchmidtUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SchmidtUnit</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_unit.html</Path>
    <Abstract>Schmidt trigger.</Abstract>
    <DeclaredIn>plonk_SchmidtChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SchmidtUnit</Scope>
    </TokenIdentifier>
    <Path>class_schmidt_unit.html</Path>
    <Anchor>a738f51b6fe1f6505317d18f6eeadb955</Anchor>
    <Abstract>Create an audio rate sample rate converter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalPlayChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Abstract>Signal player generator.</Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Anchor>aeb855dc8b892bd37ac7096e29e143931</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Anchor>ac82529da94ea92bcbf2f2f3586f7247a</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalPlayChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_channel_internal.html</Path>
    <Anchor>a31f7ddf13402b8e25051e364c27094e9</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalPlayUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalPlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_unit.html</Path>
    <Abstract>Signal player generator.</Abstract>
    <DeclaredIn>plonk_SignalPlay.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalPlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_unit.html</Path>
    <Anchor>a57e8b75bed5b361f7038ab2369903aa2</Anchor>
    <Abstract>Create an audio rate signal player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalPlayUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_play_unit.html</Path>
    <Anchor>a44b523a0bde794fa71f9a3c4de48251b</Anchor>
    <Abstract>Create a control rate signal player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalReadChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Abstract>Signal reader generator.</Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Anchor>a48d2c172267167b9308e3c0801ee7a23</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Anchor>a9990807fc1acf723d9160bf1335e68b3</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>SignalReadChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_channel_internal.html</Path>
    <Anchor>a765f31588371c84e239c8d842a45db74</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SignalReadUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SignalReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_unit.html</Path>
    <Abstract>Signal reader generator.</Abstract>
    <DeclaredIn>plonk_SignalRead.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_unit.html</Path>
    <Anchor>abf4999952f592e16a89ae4929f5004bb</Anchor>
    <Abstract>Create an audio rate signal player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SignalReadUnit</Scope>
    </TokenIdentifier>
    <Path>class_signal_read_unit.html</Path>
    <Anchor>aea696eb86b0658cbb567ffe19e4f92da</Anchor>
    <Abstract>Create a control rate signal player.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SineUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SineUnit</Scope>
    </TokenIdentifier>
    <Path>class_sine_unit.html</Path>
    <Abstract>Sine oscillator.</Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SineUnit</Scope>
    </TokenIdentifier>
    <Path>class_sine_unit.html</Path>
    <Anchor>a3a5dee949336bc3a5291179568a9805e</Anchor>
    <Abstract>Create an audio rate sine oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>SineUnit</Scope>
    </TokenIdentifier>
    <Path>class_sine_unit.html</Path>
    <Anchor>a83bb481d279a888b7caec0df17b7ce8e</Anchor>
    <Abstract>Create a control rate sine oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SmartPointer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>SmartPointer</Scope>
    </TokenIdentifier>
    <Path>class_smart_pointer.html</Path>
    <Abstract>Reference counted pointer base class.</Abstract>
    <DeclaredIn>plonk_SmartPointer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SmartPointerContainerBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>SmartPointerContainerBase</Scope>
    </TokenIdentifier>
    <Path>class_smart_pointer_container_base.html</Path>
    <Abstract>This manages a SmartPointer pointer.</Abstract>
    <DeclaredIn>plonk_SmartPointerContainer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TableChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Abstract>Wavetable oscillator.</Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Anchor>a7b9cf21cf84223a4f57bde06911240d0</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Anchor>a98f6dabb8b87b7816338bb1c20ad2997</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TableChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_table_channel_internal.html</Path>
    <Anchor>a6cc6c33141ba0735d2a9488db3c08d52</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TableUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TableUnit</Scope>
    </TokenIdentifier>
    <Path>class_table_unit.html</Path>
    <Abstract>Wavetable oscillator.</Abstract>
    <DeclaredIn>plonk_Table.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TableUnit</Scope>
    </TokenIdentifier>
    <Path>class_table_unit.html</Path>
    <Anchor>aef71a79ad5a9e86547deef6477508e5f</Anchor>
    <Abstract>Create an audio rate wavetable oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TableUnit</Scope>
    </TokenIdentifier>
    <Path>class_table_unit.html</Path>
    <Anchor>a9eddb6c7b178640c71cb56c95752fe48</Anchor>
    <Abstract>Create a control rate wavetable oscillator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Abstract>A class for storing and manipulating text strings.</Abstract>
    <DeclaredIn>plonk_Text.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>ab3e26143fccc52699bcc5149cae852bc</Anchor>
    <Abstract>Creates an emply text string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>a6a37381f3b9631eceb5623d577b0cc0c</Anchor>
    <Abstract>Creates a text string containing a single character.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>a0d1528af9b765d9528a22ea88d4b9d9c</Anchor>
    <Abstract>Copy numerical values from another numerical array type to a new Text string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>ab46c6c76bb1b99dfe309161360e1f05a</Anchor>
    <Abstract>Copy values from another array type to a new Text string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>a01cf231250017a4ebe2ebaa353c220b5</Anchor>
    <Abstract>Create a Text string from a wide char string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>aecda7c41ea1a41bcf09136bdb9ba321e</Anchor>
    <Abstract>Concatentate two Text strings into one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>ab00905939be3c3f26e0f82f386eeb994</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>withSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>aff424fbf995e268141efcb453c5959bf</Anchor>
    <Abstract>Construct a NumericalArray that refers to some other data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>newClear</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Text</Scope>
    </TokenIdentifier>
    <Path>class_text.html</Path>
    <Anchor>afa3c84f9ac6aaa4c88a5fa2736849e53</Anchor>
    <Abstract>Creates a NumericalArray with a given size (length) with all items set to zero.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Abstract>A utility class for reading and writing text files.</Abstract>
    <DeclaredIn>plonk_TextFile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ad2d429d0e838d57d0cfc67f515827266</Anchor>
    <Abstract>Creates a null object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a338f6cd042794975435204eb09c8d70c</Anchor>
    <Abstract>Creates a text file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a758c59029fef81422df1d747f730d60a</Anchor>
    <Abstract>Creates a text file reader or writer from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a377010f70ad4889d8f2af5674d6d7bd9</Anchor>
    <Abstract>Creates a text file reader from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>acea2dce80700b409b77213fe7930af50</Anchor>
    <Abstract>Creates a text file reader or writer from the given path.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a942ffe062ee7edb9bdf36ed155f94e80</Anchor>
    <Abstract>Creates a multiple text file reader from the array of files.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a17d14dc424d9ec39adc10b42646ea4d3</Anchor>
    <Abstract>Creates a multiple text file reader with a queue of files.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TextFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ae7cdb4aff8ed65558d466a1146f7814f</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a7cede5491f516bd03068a084f631bd4f</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>readLine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>abbca8bc350d2ce6ab3541699b38d1ce7</Anchor>
    <Abstract>Attempts to read a line of text from the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ad5353add58119fb2440f8a4edfb6f063</Anchor>
    <Abstract>Gets the position of the file stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setPosition</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a6ea96222664bb14c0e1779cdb4449951</Anchor>
    <Abstract>Sets the position of the file stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a889d157a1b45b2a29d81d557d80d2b15</Anchor>
    <Abstract>Sets the position of the file stream to the end of the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEof</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a4aa83da8810343bcf358e3030fea8043</Anchor>
    <Abstract>Determines if the file stream is positioned at its end.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a59d6f4f8e026a14847818e6788c2c97a</Anchor>
    <Abstract>Write a numerical value as text to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a0db9bca3f47cdfa9891acc6ade853104</Anchor>
    <Abstract>Write a string of text to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>write</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>abe8abc3a8ad09e5e92e0ceb99b0284aa</Anchor>
    <Abstract>Write a string of text to the file.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeLine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a0f55fc093d50394bc8a70c8ec28b38f7</Anchor>
    <Abstract>Write a string of text to the file and move to a new line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>writeLine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>ac3edbd65e0883d410931c89979564921</Anchor>
    <Abstract>Write a string of text to the file and move to a new line.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TextFile</Scope>
    </TokenIdentifier>
    <Path>class_text_file.html</Path>
    <Anchor>a2507ae955c30b88a59e35a42125b89f3</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Threading</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Abstract>Crossplatform threading support.</Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sleep</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Anchor>af06e4d7a02ac3054e17b01ae78e39684</Anchor>
    <Abstract>Sleeps the current thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yield</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Anchor>a064c003b9a820cabb3768f7466d4d05a</Anchor>
    <Abstract>Yield the current thread.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCurrentThreadID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading</Scope>
    </TokenIdentifier>
    <Path>class_threading.html</Path>
    <Anchor>a9453710636ee4e1b579bd1153b00c25c</Anchor>
    <Abstract>Get the calling thread ID.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Threading::Thread</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Abstract>The Thread class itself.</Abstract>
    <DeclaredIn>plonk_Thread.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>wait</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a69a1d2b26ec63699833c4b3c86719fb4</Anchor>
    <Abstract>Waits for the thread to exit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>aa09e7addc297931a3dab8740e88b624f</Anchor>
    <Abstract>Returns true if the thread is running, otherwise false.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setShouldExit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>af7b4f2a7a1cd0fac3734f3873dfa96c9</Anchor>
    <Abstract>Signals that the thread should exit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setShouldExitAndWait</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>afac6cb66c5ab59a6a3f371dbea00e898</Anchor>
    <Abstract>Signals that the thread should exit then waits for it to exit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getShouldExit</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a8f420000728f97481fda9c4be5388c3e</Anchor>
    <Abstract>Returns true if the thread has been signalled to exit, otherwise false.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>ae8f792258076e7a3d886cf3eca777b8c</Anchor>
    <Abstract>Get this thread&amp;#39;s ID.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>run</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a30d723c645d98a76e58f692d5ac26b32</Anchor>
    <Abstract>The run() function: you must implement this in your sublcass.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sleep</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>a6e52ef55ffcba982eb270909564f607e</Anchor>
    <Abstract>A shortcut for Threading::sleep()</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>yield</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Threading::Thread</Scope>
    </TokenIdentifier>
    <Path>class_threading_1_1_thread.html</Path>
    <Anchor>afd1de33dbda00617731d7b5498af1b88</Anchor>
    <Abstract>A shortcut for Threading::yield()</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TimeStamp</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>TimeStamp</Scope>
    </TokenIdentifier>
    <Path>class_time_stamp.html</Path>
    <Abstract>Measures time.</Abstract>
    <DeclaredIn>plonk_TimeStamp.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TriggerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Abstract>Trigger.</Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Anchor>a913378636fca158f7682e4bb3180d9ba</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Anchor>a1a55d552225c1cb49f1ee853a4043a76</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TriggerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_trigger_channel_internal.html</Path>
    <Anchor>a6a3d7ce54aed80f5d9b02443f75a4f18</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TriggerUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TriggerUnit</Scope>
    </TokenIdentifier>
    <Path>class_trigger_unit.html</Path>
    <Abstract>Trigger detects signal transitions from zero or less to greater than zero.</Abstract>
    <DeclaredIn>plonk_TriggerChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TriggerUnit</Scope>
    </TokenIdentifier>
    <Path>class_trigger_unit.html</Path>
    <Anchor>a3115477c07a49fc541762cfb5c22e03f</Anchor>
    <Abstract>Create an audio rate sample rate converter.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Abstract>For converting sample types.</Abstract>
    <DeclaredIn>plonk_TypeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Anchor>ac2cbebde2949f56156ea60c70f6bf538</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Anchor>a3f4dcc3838ba83cd831700effd8e589b</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>TypeChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_type_channel_internal.html</Path>
    <Anchor>a20a312fb5082db30c8da2d2c496f3399</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeCode</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Abstract>Used to determine information about some types.</Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Anchor>a21afb093939a27cef0d35f8b69a6eac7</Anchor>
    <Abstract>Returns a type code as a text string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Anchor>a5b1252e7cce6e76014bed9861768ba5f</Anchor>
    <Abstract>Used for sample types to determine the minimum / maximum peaks.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEpsilon</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>TypeCode</Scope>
    </TokenIdentifier>
    <Path>class_type_code.html</Path>
    <Anchor>a390c1a46498983aa069f25912e4203b0</Anchor>
    <Abstract>Used for sample types to determine the smallest non-zero value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeUnitBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TypeUnitBase</Scope>
    </TokenIdentifier>
    <Path>class_type_unit_base.html</Path>
    <Abstract>Convert from one sample type to another.</Abstract>
    <DeclaredIn>plonk_TypeChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TypeUtility</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>TypeUtility</Scope>
    </TokenIdentifier>
    <Path>class_type_utility.html</Path>
    <Abstract>A utility for finding out information about certain other classes and types.</Abstract>
    <DeclaredIn>plonk_TypeUtility.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnaryOpChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Abstract>For applying unary operators.</Abstract>
    <DeclaredIn>plonk_UnaryOpChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Anchor>a68ca5b80cbe1031fe7d2fa9357731c14</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Anchor>a5487af6714fddfac007aa54aff97a9c0</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnaryOpChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unary_op_channel_internal.html</Path>
    <Anchor>aebe42ff392bcaa20966fe5f3a0edd86a</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Abstract>A Unit is effectively an array of Channel objects.</Abstract>
    <DeclaredIn>plonk_Unit.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1f8d70fb911d20b57408b2b22a989f0e</Anchor>
    <Abstract>Default constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab51068fdaa593550f896912d0f8e157a</Anchor>
    <Abstract>This creates a Unit with a single Channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a57a3ef6a6b7cb5b6b3796cc7553fa923</Anchor>
    <Abstract>Constant Unit constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6033c6242a569daaf9c736607f054a08</Anchor>
    <Abstract>Multichannel Constant Unit constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitBase</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adeaf8e9083b75f03df0ef28ccd6432cd</Anchor>
    <Abstract>Copy constructor from the base array type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7d7469eeee1b574d5299762f8a3d7036</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac5d6ddf8691c78944d448529f37006bb</Anchor>
    <Abstract>Assignment operator from a single channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae9d0d472add7bdcb4aec4baf35c52cc8</Anchor>
    <Abstract>Assignment operator from the base array type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aab0d06b9df0c6d0a56f469b2ee572c09</Anchor>
    <Abstract>Assignment operator from an array of channels.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator const ChannelType &amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0205b1eade4eaa8cd91ed2f329cd8ac8</Anchor>
    <Abstract>Cast to a single channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator ChannelType &amp;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a64bd661f841d81f398d571c0bc777114</Anchor>
    <Abstract>Cast to a single channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1dd0d41795ab69cfa25400704756e7b0</Anchor>
    <Abstract>Resamples this unit to a different sample rate and/or block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac3833a17fc6c4aa635bc5a72a9ccb8c8</Anchor>
    <Abstract>Resamples this unit to a different sample rate and/or block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a22cfa757eda1d3f2d3e47575133343b4</Anchor>
    <Abstract>Resamples this unit to the default control rate sample rate and block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aed961676c5ecaa5d53538debb3fea7fc</Anchor>
    <Abstract>Resamples this unit to the default control rate sample rate and block size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afd8d0797e935d3c384910a8090f0202b</Anchor>
    <Abstract>Mixes this unit down to a single channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mixBarrier</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1db2a7d91b1e53bed30f49d3c1186c7f</Anchor>
    <Abstract>Mixes this unit down to a single channel with and auto-deletion prevention barrier.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>overlapMake</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af1d059efb4426bdec02fb49347a2ea7b</Anchor>
    <Abstract>Create an overlapping process from this unit&amp;#39;s contrinuous stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>overlapZeroPad</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3a95883d0b225147292781b5df03d265</Anchor>
    <Abstract>Create an overlapping process from this unit&amp;#39;s contrinuous stream, zero-padding the overlapping secti...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>overlapMix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab3a20c72aae6c5f580937fd580e52c78</Anchor>
    <Abstract>Mix down overlapping process to a continuous stream.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>binary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a35419f9d20253e5d52de37d4367c7311</Anchor>
    <Abstract>Templated binary operator Unit creator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a142b2de4be916e9eeec7957f550e3518</Anchor>
    <Abstract>Templated unary operator Unit creator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9ce47f1b83109061a4865b1ed3ff3578</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a007485d6e5d46ba2f1c081b9f156d932</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af0679918598bab4c013cfc4f2d5c268f</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6f745272970edbac5e99fb7cc30ffc4c</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6f37573dc307a1982dd3c1ceedd78a29</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a769265718d2edfe60c43e4cf797c0110</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9cbfe5d8e80d28df1f5241e1ea874929</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af70d74f6f77c5c5866146c89a2d123c9</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac6b0846c1172e1fa275d51beb7895559</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and the ri...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af6582e308726a8e4fb63235ca5b73016</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1e52af4d320c6b8ef1518458868a5953</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a12fde7570fe1ff64ef675c0d5f91b736</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa44db5c79cca4f9ea0f7bb984cf2d8f9</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a764a7d2d34e98b273063606d76bd703b</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a64cf093d072095318f4c27a476d12208</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4cdf04233317f510dda567bda01fb5dd</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9859d688170b57861e5373728a4304f4</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6276eb0d25731e070427370a27a5e86f</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adb1fc080c1b85651ab0f0a2da2a37fbe</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad44f311b28ebda6d59a8aca92b937ae9</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8b2d8eaf1da10d44b0a50976a2d601af</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adab69c58f3fe0588d0d4aad52935e254</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afa2a02a2c6fb51b2607ab7a1507788fb</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;round&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a51eebe85fa983b84bc44a2def0a8ac7d</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af384ce936686453e9689eeaf6457986f</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5c2523ef17dcee2d90eb4deca3b57f4d</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abddeca883e0879c9101927eaab87c45d</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9158cbcd6b756ff3d047ede70fc07ae7</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a767f7c749b56e4b162122c3d69cdfb14</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3985a171d80bfead7a07a17673324008</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a44fd3c4947664ddf99b807263edc532d</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;%&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6d6d6065c7a6c1d277cd004e4433f341</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a474193745da98579c1202646493be7dd</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;lt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2b40b4bd2c3dbce6815b6ab8c8cd1d88</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab5c75371a73419cf4d70d1cd3060031c</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;gt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a783d354004272b602e116d058294f157</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa00cdc04e68728d2892ba17b6efae5c2</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a61fabb5b95c3d391451bd5c394447d49</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a50be2f9d83e178bd7ad755364655d357</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abe37f0a1bf42d1300fa263467857154e</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;%&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad7f73b933867b036a575ff01c621ff08</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a03113ab3519c80f88e78f97ea272bd94</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afc7424b74a1185a578ba25c499986cff</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0c0b2547f77f2840de847a77cf39f87f</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a726056184665de815602a08e6911659e</Anchor>
    <Abstract>Create a new UnitBase and assign it to this one by applying the binary &amp;#39;%&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3fbcb0b247b7335b27aa90c454b30308</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abd22385bfeb42dad70f0ef9d65e3bbcf</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;lt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5a1d2e2d65b20054478ab234e9a920a8</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adafd268de4860a36a14c6d63f6247f28</Anchor>
    <Abstract>Create a new UnitBase by applying the binary &amp;#39;&amp;gt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3218bcc6c0d55a2b19b6d5ffd8a0af31</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;move&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2fd07c9e23fb1dcf2ba895306ff3cbc8</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;inc&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a44f39fd6c809e2c858ff959af4b41144</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;dec&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a554c1b387f114d20d4d5b1215ffa27a4</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;abs&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>af0d0038175b087694a309d47b66bf440</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;log2&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0314952ec0909fb5cce927b12efc9a7f</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;neg&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aedf8a851d44920f7c5569f5357587d01</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;reciprocal&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>adfd01e6c59c15369e4bfda8f5776b570</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sin&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6131c0e3755237cdec87441a2ab35ac1</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;cos&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0af939bf3ff068d959ae5be1fa581bce</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;tan&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a4a3d949cd5c57c8fdb5badcca675497c</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;asin&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abf0d922e1c6ca460292375fc895e8048</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;acos&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>acb2fdbd56ed53328c20327aa140c0f67</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;atan&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7042232fed9247cb1c185a4405e62638</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sinh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a337c6c7cc6c6c69fb4245a2524ffd747</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;cosh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aad9b00972e19f50911631486aa44f590</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;tanh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad3c6085937821c153209ae38a6471d85</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sqrt&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>acc7d6774a51a7f17c98e2369158bd02a</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;log&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abae5ddb502112cbdaaba960ed041fe0a</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;log10&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad7558bfa0572b759fe423f1b8da02660</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;exp&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad1bd91b6d6644cc438f16489ada2da9f</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;squared&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2a0d4359ab797a76531b844097e5b828</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;cubed&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9b625b6139101fc94112cb11fc25ede8</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;ceil&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac65016aecebfe364574f328bf58a4f9f</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;floor&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7543750a30dd2f6f87fc61d8d627beec</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;frac&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a498954490886e3acd13d5747f65d290a</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;sign&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad8b08088db7545b26fe6d48872f08203</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;m2f&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aed8bc12ebfab2788c950c70ad5fc8a5c</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;f2m&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a88265b35eb65738f78899255c186efbe</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;a2dB&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a887e8a891ea784749728c80c7bb670e2</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;dB2a&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7c498c5e54d2438b9461599fde9fb13e</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;d2r&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abd8eaab7d56faed695675c0e98e4cd0f</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;r2d&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a196824b85035fea76f750b642db6b42e</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;distort&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a928af1dac6e8b66ab2c9d7a7ceaa10a7</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;zap&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>abc6b6d450e027fba5242bf9985eb614c</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;-&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a38868d492529b323c9cdf80a4e458778</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;++&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a38876fc6b17bb0915d08b9f9353ac6a6</Anchor>
    <Abstract>Create a new UnitBase by applying the unary &amp;#39;++&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linlin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab059fa15afabe76458e77e94c3918c64</Anchor>
    <Abstract>Linear to linear mapping.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linlin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5f7d518d49d41bbd87cf8c0e8b8bf5a5</Anchor>
    <Abstract>Linear to linear mapping assuming the input is in the range -1...+1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linexp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad5d239e8cc950238b3e24ff25b9e1d66</Anchor>
    <Abstract>Linear to exponential mapping.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linexp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a506dfac0f77f3efcec36a7c6f6e48a9b</Anchor>
    <Abstract>Linear to exponential mapping assuming the input is in the range -1...+1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linsin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1ea5b463f410103778bab38ab08ca0bf</Anchor>
    <Abstract>Linear to sinusoidal mapping.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linsin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac421b1e2cf633d21a4461f3b0b523e72</Anchor>
    <Abstract>Linear to sinusoidal mapping assuming the input is in the range -1...+1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linwelch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a82938fa12f983a40ea23c4c5aa0a423b</Anchor>
    <Abstract>Linear to Welch curve mapping.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>linwelch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad569fed135584f9f091009845e2e00b5</Anchor>
    <Abstract>Linear to Welch curve mapping assuming the input is in the range -1...+1.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>explin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afef8917ea09967678b9afa5f6f6a491a</Anchor>
    <Abstract>Exponential to linear mapping.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator,</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6926f7a29b3c0aeca299c649d885abee</Anchor>
    <Abstract>Create a array of units by concatenation.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setLabel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a29c48bc96d194d72dc3ad84cb073aeb0</Anchor>
    <Abstract>Enables a custom name to be set.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumChannels</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a1f8d49c0651e927f3583fa6458a5b908</Anchor>
    <Abstract>Gets the number of channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad9e6d5dad44ca41ebe4b6f6f56cab95e</Anchor>
    <Abstract>Returns a unit with the single channel specified.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a6b70baa2348be760bdde2a8dcf0fb1ac</Anchor>
    <Abstract>Returns a unit with the single channel specified.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannelObject</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a97ee1f79a881826afb068cb7cc29c27b</Anchor>
    <Abstract>Returns a single channel object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getChannelObject</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8908e8e573937a3899a6201d8e25eefc</Anchor>
    <Abstract>Returns a single channel object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a51d3e16937b30c0469661261e6acb42d</Anchor>
    <Abstract>Returns a unit with the single channel specified.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator[]</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afd08e14c94c1e344a05b957308caa472</Anchor>
    <Abstract>Returns a unit with the single channel specified.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a336e560bdcb43adae1b83f1dc9f3d114</Anchor>
    <Abstract>Set a particular channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>group</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a24b42b5dd7a658930fa8fd97f479e6b7</Anchor>
    <Abstract>Group this array into a 2D array with a particular group size.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa7027499885c3206dee0b8b95f6e4fa2</Anchor>
    <Abstract>Get the minimum block size in the array of channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a357165ca134a47f7204169b469e80b00</Anchor>
    <Abstract>Get the maximum block size in the array of channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9e6663d2783b9de78f1f06442c395532</Anchor>
    <Abstract>Get the block size of a specific channel in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setBlockSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a9cee8690b55ba3b627eb5c741ae4d54c</Anchor>
    <Abstract>Set the block size of all channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBlockSizes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a35982dd645c434bef7a8461082d44943</Anchor>
    <Abstract>Get an array of block sizes for the channels in the unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>affc5ede3dc74cbb4cb3ad72ddb444975</Anchor>
    <Abstract>Get the minimum sample rate in the array of channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMaxSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a293fb73766388495d285208bfd9ce0c3</Anchor>
    <Abstract>Get the maximum sample rate in the array of channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae75214256d2240c537462510737bdd61</Anchor>
    <Abstract>Get the sample rate of a specific channel in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setSampleRate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ae6b374388db6dd4125bd22350b765187</Anchor>
    <Abstract>Set the sample rate of all channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSampleRates</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa1a2d7ba651df9c86dc3bb2403bc489b</Anchor>
    <Abstract>Get an array of sample rates for the channels in the unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a7c474ba662fa612be89573e4176b8526</Anchor>
    <Abstract>Get the output buffer of a specific channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a43faf13fd6fba7d41104578862a65863</Anchor>
    <Abstract>Get the output buffer of a specific channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputSamples</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a52d71e0871badee91a8e565107e55936</Anchor>
    <Abstract>Get a pointer to the raw samples of a specific channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aed36ad8bca094f3fa98d0a134cb2d36f</Anchor>
    <Abstract>Set the output buffer of a specific channel to use an external buffer.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setOutputBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a5971dc08c2dc28db827df3b7ea671e94</Anchor>
    <Abstract>Set the output buffers of this unit&amp;#39;s channels to use external buffers.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0abca48d077f3f49b5c9639ac64eec5a</Anchor>
    <Abstract>Get the current value of a specific channel in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a2b9e0433de29cce99dfa9e04cf7b4074</Anchor>
    <Abstract>Returns true if this unit contains only a single null channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotNull</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>afebc412bbc462492297cb0bb96d2b46a</Anchor>
    <Abstract>Returns false if this unit contains only a single null channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConstant</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a114f2a825a7fb1791ceefeba49df2c2f</Anchor>
    <Abstract>Returns true if this unit contains only a single constant channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotConstant</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ac107382b7aca87bb65fc8beb05c51b5b</Anchor>
    <Abstract>Returns false if this unit contains only a single constant channel.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>needsToProcess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a73a6b7e224d34b5c8aece708480c8cfc</Anchor>
    <Abstract>Returns true if this unit needs to process for the given timestamp.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shouldBeDeletedNow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>aa2976309b9ccbda693e01b04fc57d767</Anchor>
    <Abstract>Returns true if this unit (i.e., all of its channels) needs to be deleted becasue they have expired...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a78e56679819dde06c3beb022cbdb13a4</Anchor>
    <Abstract>Process a specific channel in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a0b69c2c88f25b4289ba2ac4ed01bebba</Anchor>
    <Abstract>Process all channels in this unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ad918f5ddca5ca251ffa25864e0b742a4</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createFromInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a8780779f9d31414671b0500d90a92a3e</Anchor>
    <Abstract>Primary means of creating Unit objects.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>proxiesFromInputs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>ab29dbe0f2064dcca44bf2f0e7371c782</Anchor>
    <Abstract>Primary means of creating Unit objects with proxies.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>applyMulAdd</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>UnitBase</Scope>
    </TokenIdentifier>
    <Path>class_unit_base.html</Path>
    <Anchor>a3d6a3fbf0d6a2f1dcec1a7503e74b9d4</Anchor>
    <Abstract>Apply multiply and addition operators to another unit.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UnitMixerChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Abstract>Mix an array of units to a multichannel unit.</Abstract>
    <DeclaredIn>plonk_Mixers.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Anchor>ad7cb37537a5fd4961cd2528c44b4da5b</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Anchor>a98f1d1e153c8ebf516b828cc7937a5ac</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>UnitMixerChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_unit_mixer_channel_internal.html</Path>
    <Anchor>a9f40889dc26b61f8fa8340ce4d2d6f50</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Abstract>A template class for storing any variable type.</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9fcee0807002dc5b1b28422631ab512c</Anchor>
    <Abstract>Default constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>abc64133e0e95c4c3f3fa55c9edbe77e1</Anchor>
    <Abstract>Initialised with a specific internal.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>adce990f4cef6e26cb9f207dedafdced6</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a607f32d2dfcdfeef6d5ea68d42328136</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2d233b3fbb68672f59349f2fbc404e68</Anchor>
    <Abstract>Initialised with a specific value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a23024f58133373d58666fbe1325a950e</Anchor>
    <Abstract>Initialised with a pattern/sequence.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7c19488f6f73b8f71bd6645172d24a01</Anchor>
    <Abstract>Initialised with a pattern/sequence.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8909b50eb8b70cea703d6572d0246f90</Anchor>
    <Abstract>Create a Variable that converts from one type to another.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad658206cf88b5ec6fb17bf494e398761</Anchor>
    <Abstract>A convenience for setValue().</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3f05fc2768b1de80706b39ee14f3c360</Anchor>
    <Abstract>Returns the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValuePtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a150bcb5d7f98d4453075e62ab97a7b59</Anchor>
    <Abstract>Returns the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator Type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a704a01abccce524ea67757560b52515a</Anchor>
    <Abstract>Returns the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nextValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a547e48952c1ffe3c0833fc6f5830162a</Anchor>
    <Abstract>Returns the next value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab412784e254b3fb3914d7118b03777c9</Anchor>
    <Abstract>Sets the current value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>binary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a08c29f6e71bef08de58c53aa6ed6c93e</Anchor>
    <Abstract>Builds a binary operation from two source Variables.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>unary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4af5052f85a0a41f1a49dd497e5f8f0e</Anchor>
    <Abstract>Builds a unary operation from a source Variable.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4e6cbb3b981c291605c64f183cb70646</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;addop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aac049b45484a41b74aed4de6f48e23b3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;subop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mulop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2ecf3f58999ab22b24a082d9aaf75dcb</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;mulop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>divop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afa5fb6f70d3ac944ae97b3ca23548fa6</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;divop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5bb69cff57b06cddeec0f21ab449905f</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;modop&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac6861a6a9b035c75a99df82cb1fb8e8a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isEqualTo&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isNotEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0e5584301b12f0a207836ca05a5a6961</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isNotEqualTo&amp;#39; function to this one and the right argume...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab6277b87b327e063ed0ee11ed2337c2f</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThan&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGreaterThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5e5d0e2c522a442ae7422c0f1d2e8a18</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isGreaterThanOrEqualTo&amp;#39; function to this one and the ri...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a765ef27b1b487caa41a90c8de7d59f7a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThan&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLessThanOrEqualTo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8a98bc9a76098a5f808cf73cc810bd98</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;isLessThanOrEqualTo&amp;#39; function to this one and the right...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hypot</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8ae5f7c2efedf51e039f5daf8197b9b1</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;hypot&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pow</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a204f23bd924338957d5b16aa210c054b</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;pow&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a18fbc70b3ee0e31385dd75774852c5e5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;atan2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>min</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1c5f795391c638e737828aa82c644a0c</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;min&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2509b3b7d3232052ab01328092546c79</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;max&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sumsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a25ddb483dc9a0b40c40f6e5a9fc5c2d6</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sumsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>difsqr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8f78c4fa62e77ba7690c135ed12dc2c5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;difsqr&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrsum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab7c84c48863c981bba6627de7648eca7</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrsum&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae88845d0e4cb45c17de36479bde76788</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;sqrdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>absdif</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0dca0682594ef059ac3368ef39b21f85</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;absdif&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>thresh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7c8506c73f5a8ac27daf7287aba65fa7</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;thresh&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>round</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3c3463bda7d53ada2724f8a198af441d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;round&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>trunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a0c86a2084bc6b339f47b1667764751b7</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;trunc&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clip2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7af2f45c6213448c74d66303b03c83c8</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;clip2&amp;#39; function to this one and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decayFeedback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a88f419d631226b6186ebaf6e93c2ce2f</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;decayFeedback&amp;#39; function to this one and the right argum...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8a8eda57610bb7b287fe6aa19cb81672</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aefd7dcf8debce2278edb5e2608f65dc5</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2db90fdc8a26b4fe1f9ce7f7923855af</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a748b580b51f557a8d07ed65c78c68ab9</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>acbd222e70df8d484965463aaa453f841</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;%&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a84f0e607370633dcda868f70d9c58535</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa2ccf2f43b856b153f7ccc46f9e8dd7a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;lt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4518fb27eb634d75a8085ae800e6658b</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac604c7f6ad8c622990fc66dc463132e3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;gt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a15b6c7481f95c0a1f10672ac423d9a94</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;+&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a48ca70774a64269d3d90c6451af0558e</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;-&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad437e0113e9f65d3dd62ceeb62fc187d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;*&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a490cb39db286e5731eb36ddc9dba2600</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;/&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8ef858c3266512cdf6e56e6f6678e6b3</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;%&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator+=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a64d4ae239dcb1a5779fd46be8746f774</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;+&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a228f78c0655ba248c8c81a02e14be908</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;-&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator*=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af3defe0081ff93b2a16f6c1a357ab71f</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;*&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator/=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad6f4737d377368ee34efefcd25ae5cc3</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;/&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator%=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac700a058d0ef63cd212523b57865ba13</Anchor>
    <Abstract>Create a new Variable and assign it to this one by applying the binary &amp;#39;%&amp;#39; operator to this and the r...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad9719b23e1fce1d0845e67b687f33c8d</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;lt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7eeec20d1716de1d591b71b435dd7d3e</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;lt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2ce283ac54262e189a0da0ab0a1e7e6a</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;gt;&amp;#39; operator to this and the right argument...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab45ccf244e8b4051ecf86d6518d4cae4</Anchor>
    <Abstract>Create a new Variable by applying the binary &amp;#39;&amp;gt;=&amp;#39; operator to this and the right argument.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>move</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa5a5e385c1bb37ef19d3022e449ebba2</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;move&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a7113540443a034e512972cd6334f6811</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;inc&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dec</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4b172de6950b6d9e98728ba936d12bb5</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dec&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>abs</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ad1ff6375a25ebbfcd686752d1cf8095d</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;abs&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log2</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a85adc4c3da414f97328ad35d4c350ed1</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log2&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>neg</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6fdd06820e46c7995b40d634a7ed674e</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;neg&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reciprocal</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac8a5788d44afacfbd1b5d524b705b8fc</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;reciprocal&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae71d0c4eb460c994534923cbcbfc4926</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sin&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a3be1ac06521eeb553688fa4299a0f5af</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cos&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af460e0b1d61ae6316324970ffb57515c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tan&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>asin</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a983239f71827c758e79f47a732e24c8c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;asin&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>acos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a9b4f8130fc61470e33b893ba2aed89e8</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;acos&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>atan</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a984477a59f043ca6fb6fe90a91d8445b</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;atan&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sinh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a1a3d9e65cf0d34e3425450efb4157c6d</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sinh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cosh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a70d1a89f4dee674196317d3f38650633</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cosh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tanh</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a967c969f3f652baba2ce895962c24dbe</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;tanh&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sqrt</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a01586350b26418e2d007ff9a293f1550</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sqrt&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae2707e545f61e1c4f86915003bd9c0da</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log10</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af5f189b95aced9b421164f901517a6ab</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;log10&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>exp</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a2a22c822c0cbec961b9a1329f6cef3b9</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;exp&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>squared</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a6ce54f286ec81993b685286f6993ca4a</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;squared&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>cubed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a5e719e3d0e0314cd155626120478a731</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;cubed&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ceil</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>af3e5b91a96af9ecf7b5c6f91e05c4926</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;ceil&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>floor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab7404cb8c94b1669c953914051dbb239</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;floor&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>frac</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>adcb0e1f0d8545fcdba04cc307d8f20ba</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;frac&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sign</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a8a5d19cc6f61bc34b526cee17fb95134</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;sign&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>m2f</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae029ebd0d601109d427b91f968b0428b</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;m2f&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>f2m</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a4c5689400c7389dc7cb0081d19648c9a</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;f2m&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>a2dB</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ae9ebc64440f71428b24c9c725cfc47d8</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;a2dB&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dB2a</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a226ff6ec2d54fdc50dd6bce87415ea9c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;dB2a&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>d2r</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac161203dc921c344b0c992922494390c</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;d2r&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>r2d</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab4a8fc30b2979f5c32bd43dbc1769678</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;r2d&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>distort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ab8a63ff6989cee2ab236e02bfcfbf484</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;distort&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a963d555c799f560766b64874694e2455</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;zap&amp;#39; function to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator-</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afd57a8bf39d84a1cfcc6936263f75f32</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;-&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a836053001a2f334e029e941bb1d70e5a</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator++</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>aa1efcdf159ecb20019bad2e258abfc89</Anchor>
    <Abstract>Create a new Variable by applying the unary &amp;#39;++&amp;#39; operator to this one.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>afa7cc3ee279465c2e6dcaade5524cb93</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a44f9ee14363eb19a3a31b462be733fd7</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>shape</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>a885a985740d002802d1d0fcf8a82c403</Anchor>
    <Abstract>Create a shape variable that can transition in different ways to new values.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fromWeak</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>class_variable.html</Path>
    <Anchor>ac6051f1df5e6fa73a0ea5a9c015ee901</Anchor>
    <Abstract>Get a weakly linked copy of this object.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable&lt; Type &amp; &gt;</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>Variable&lt; Type &amp; &gt;</Scope>
    </TokenIdentifier>
    <Path>class_variable_3_01_type_01_6_01_4.html</Path>
    <Abstract>A variable container for objects.</Abstract>
    <DeclaredIn>plonk_Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WeakPointer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>WeakPointer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer.html</Path>
    <Abstract>Holds a weak reference to a SmartPointer.</Abstract>
    <DeclaredIn>plonk_WeakPointer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WeakPointerContainer</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>WeakPointerContainer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer_container.html</Path>
    <Abstract>This stores a weak reference using a WeakPointer.</Abstract>
    <DeclaredIn>plonk_WeakPointerContainer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WeakPointerContainer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WeakPointerContainer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer_container.html</Path>
    <Anchor>aff51da46d7d9c2350a79ab0f98b7f977</Anchor>
    <Abstract>Copy constructor.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WeakPointerContainer</Scope>
    </TokenIdentifier>
    <Path>class_weak_pointer_container.html</Path>
    <Anchor>a7cc4fd4a750be063bb921930ca43f6e0</Anchor>
    <Abstract>Assignment operator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WhiteNoiseChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Abstract>White noise generator.</Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Anchor>ad00e66be56b7faa752713d293fb43766</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Anchor>a93efd067508f7a26ad718b730ad481d6</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>WhiteNoiseChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_channel_internal.html</Path>
    <Anchor>a023d363df62f27e5703ff9ceafd9ed57</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>WhiteNoiseUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>WhiteNoiseUnit</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_unit.html</Path>
    <Abstract>A white noise generator.</Abstract>
    <DeclaredIn>plonk_WhiteNoise.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>WhiteNoiseUnit</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_unit.html</Path>
    <Anchor>a11be90c63263fb248b8a8c359f19edf9</Anchor>
    <Abstract>Create an audio rate white noise generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>kr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>WhiteNoiseUnit</Scope>
    </TokenIdentifier>
    <Path>class_white_noise_unit.html</Path>
    <Anchor>a7078022f458c95a5a92a9b5eb7959a98</Anchor>
    <Abstract>Create a control rate white noise generator.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZMulChannelInternal</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Abstract>Complex multiplication channel.</Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Anchor>a8e10293a6b718bd6778e8fc4b470ac9d</Anchor>
    <Abstract>To store channel state data.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>initChannel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Anchor>a5004b9cb82e11cf72f468ff5126221d6</Anchor>
    <Abstract>Called to initialise the channel&amp;#39;s initial value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>process</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>ZMulChannelInternal</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_channel_internal.html</Path>
    <Anchor>a89487db29f0a522137935dc47b4e1911</Anchor>
    <Abstract>The DSP function.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZMulUnit</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>ZMulUnit</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_unit.html</Path>
    <Abstract>Complex multiplication Unit.</Abstract>
    <DeclaredIn>plonk_ZMulChannel.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ar</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>ZMulUnit</Scope>
    </TokenIdentifier>
    <Path>class_z_mul_unit.html</Path>
    <Anchor>aaf197874df2dac08b4fe7cc77e48172e</Anchor>
    <Abstract>Complex multiplication of signals.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONK_NAMESPACE::ForceErrorStruct</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLONK_NAMESPACE::ForceErrorStruct</Scope>
    </TokenIdentifier>
    <Path>struct_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_force_error_struct.html</Path>
    <Abstract>To help raise compiler errors when function prototypes change.</Abstract>
    <DeclaredIn>plonk_StandardHeader.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONK_NAMESPACE::IOSUtilities</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>PLONK_NAMESPACE::IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_utilities.html</Path>
    <Abstract>Some utilties for the iOS platform.</Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pathInDirectory</Name>
      <APILanguage>occ</APILanguage>
      <Type>clm</Type>
      <Scope>PLONK_NAMESPACE::IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_utilities.html</Path>
    <Anchor>a5074d7f033fb5cb0da822220d9bc87cd</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Bundle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>PLONK_NAMESPACE::IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_utilities.html</Path>
    <Anchor>a72f886a8964685aa9ae299a29638ef19adc9be718b03922add7ffb8f715fa46c7</Anchor>
    <Abstract>In the &amp;lt;MyApp&amp;gt;.app/ bundle, files can be placed here during compilation in Xcode.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Documents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>PLONK_NAMESPACE::IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_utilities.html</Path>
    <Anchor>a72f886a8964685aa9ae299a29638ef19ab3b6ee4f8a9c5d9394d88593aa8ea2b6</Anchor>
    <Abstract>The application&amp;#39;s Documents directory, files here will be backed up during iTunes sync...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Temporary</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>PLONK_NAMESPACE::IOSUtilities</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_utilities.html</Path>
    <Anchor>a72f886a8964685aa9ae299a29638ef19a01f6fbea2b53df3225ee5275eafdb3c0</Anchor>
    <Abstract>The application&amp;#39;s tmp directory, NB this is cleared when the device is restarted.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PLONK_NAMESPACE::IOSAudioHostBase</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Abstract>An audio host for the iOS platform.</Abstract>
    <DeclaredIn>plonk_IOSAudioHost.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHostName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>ad89d5781d5d71f0b7fa213c2fa3bf8e3</Anchor>
    <Abstract>Get the name of the audio host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNativeHostName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>a9763f7784283d46a49ca0e71aff26a41</Anchor>
    <Abstract>Get the name of the native host audio API.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInputName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>a9614cb71c2ec1c8c395704a57aef47df</Anchor>
    <Abstract>Get the name of the audio input device.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutputName</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>a413d881ce7aa1732432df70ae0e95b2c</Anchor>
    <Abstract>Get the name of the audio output device.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCpuUsage</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>ad612288da3f8fb27d586afc7e5338b6b</Anchor>
    <Abstract>Get the current CPU usage for the DSP loop.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>a58715e0a5be3929fead431d150b68f05</Anchor>
    <Abstract>Start the host.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopHost</Name>
      <APILanguage>occ</APILanguage>
      <Type>instm</Type>
      <Scope>PLONK_NAMESPACE::IOSAudioHostBase</Scope>
    </TokenIdentifier>
    <Path>class_p_l_o_n_k___n_a_m_e_s_p_a_c_e_1_1_i_o_s_audio_host_base.html</Path>
    <Anchor>a17d02917eb7e6400c7175a828679bd13</Anchor>
    <Abstract>Stop the host.</Abstract>
  </Token>
</Tokens>
